package network

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "context"
    "encoding/json"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "github.com/Azure/go-autorest/autorest/to"
    "github.com/Azure/go-autorest/tracing"
    "net/http"
)

// The package's fully qualified name.
const fqdn = "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2021-03-01/network"

            // AddressSpace addressSpace contains an array of IP address ranges that can be used by subnets of the
            // virtual network.
            type AddressSpace struct {
            // AddressPrefixes - A list of address blocks reserved for this virtual network in CIDR notation.
            AddressPrefixes *[]string `json:"addressPrefixes,omitempty"`
            }

            // ApplicationGateway application gateway resource.
            type ApplicationGateway struct {
            autorest.Response `json:"-"`
            // ApplicationGatewayPropertiesFormat - Properties of the application gateway.
            *ApplicationGatewayPropertiesFormat `json:"properties,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Zones - A list of availability zones denoting where the resource needs to come from.
            Zones *[]string `json:"zones,omitempty"`
            // Identity - The identity of the application gateway, if configured.
            Identity *ManagedServiceIdentity `json:"identity,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGateway.
        func (ag ApplicationGateway)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(ag.ApplicationGatewayPropertiesFormat != nil) {
                objectMap["properties"] = ag.ApplicationGatewayPropertiesFormat
                }
                if(ag.Zones != nil) {
                objectMap["zones"] = ag.Zones
                }
                if(ag.Identity != nil) {
                objectMap["identity"] = ag.Identity
                }
                if(ag.ID != nil) {
                objectMap["id"] = ag.ID
                }
                if(ag.Location != nil) {
                objectMap["location"] = ag.Location
                }
                if(ag.Tags != nil) {
                objectMap["tags"] = ag.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGateway struct.
        func (ag *ApplicationGateway) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayPropertiesFormat ApplicationGatewayPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayPropertiesFormat)
    if err != nil {
    return err
    }
        ag.ApplicationGatewayPropertiesFormat = &applicationGatewayPropertiesFormat
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        ag.Etag = &etag
    }
                case "zones":
    if v != nil {
        var zones []string
        err = json.Unmarshal(*v, &zones)
    if err != nil {
    return err
    }
        ag.Zones = &zones
    }
                case "identity":
    if v != nil {
        var identity ManagedServiceIdentity
        err = json.Unmarshal(*v, &identity)
    if err != nil {
    return err
    }
        ag.Identity = &identity
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        ag.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        ag.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        ag.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        ag.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        ag.Tags = tags
    }
            }
        }

        return nil
        }

            // ApplicationGatewayAuthenticationCertificate authentication certificates of an application gateway.
            type ApplicationGatewayAuthenticationCertificate struct {
            // ApplicationGatewayAuthenticationCertificatePropertiesFormat - Properties of the application gateway authentication certificate.
            *ApplicationGatewayAuthenticationCertificatePropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the authentication certificate that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayAuthenticationCertificate.
        func (agac ApplicationGatewayAuthenticationCertificate)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agac.ApplicationGatewayAuthenticationCertificatePropertiesFormat != nil) {
                objectMap["properties"] = agac.ApplicationGatewayAuthenticationCertificatePropertiesFormat
                }
                if(agac.Name != nil) {
                objectMap["name"] = agac.Name
                }
                if(agac.ID != nil) {
                objectMap["id"] = agac.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayAuthenticationCertificate struct.
        func (agac *ApplicationGatewayAuthenticationCertificate) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayAuthenticationCertificatePropertiesFormat ApplicationGatewayAuthenticationCertificatePropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayAuthenticationCertificatePropertiesFormat)
    if err != nil {
    return err
    }
        agac.ApplicationGatewayAuthenticationCertificatePropertiesFormat = &applicationGatewayAuthenticationCertificatePropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agac.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agac.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agac.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agac.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayAuthenticationCertificatePropertiesFormat authentication certificates properties of an
            // application gateway.
            type ApplicationGatewayAuthenticationCertificatePropertiesFormat struct {
            // Data - Certificate public data.
            Data *string `json:"data,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the authentication certificate resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayAuthenticationCertificatePropertiesFormat.
        func (agacpf ApplicationGatewayAuthenticationCertificatePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agacpf.Data != nil) {
                objectMap["data"] = agacpf.Data
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayAutoscaleConfiguration application Gateway autoscale configuration.
            type ApplicationGatewayAutoscaleConfiguration struct {
            // MinCapacity - Lower bound on number of Application Gateway capacity.
            MinCapacity *int32 `json:"minCapacity,omitempty"`
            // MaxCapacity - Upper bound on number of Application Gateway capacity.
            MaxCapacity *int32 `json:"maxCapacity,omitempty"`
            }

            // ApplicationGatewayAvailableSslOptions response for ApplicationGatewayAvailableSslOptions API service
            // call.
            type ApplicationGatewayAvailableSslOptions struct {
            autorest.Response `json:"-"`
            // ApplicationGatewayAvailableSslOptionsPropertiesFormat - Properties of the application gateway available SSL options.
            *ApplicationGatewayAvailableSslOptionsPropertiesFormat `json:"properties,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayAvailableSslOptions.
        func (agaso ApplicationGatewayAvailableSslOptions)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agaso.ApplicationGatewayAvailableSslOptionsPropertiesFormat != nil) {
                objectMap["properties"] = agaso.ApplicationGatewayAvailableSslOptionsPropertiesFormat
                }
                if(agaso.ID != nil) {
                objectMap["id"] = agaso.ID
                }
                if(agaso.Location != nil) {
                objectMap["location"] = agaso.Location
                }
                if(agaso.Tags != nil) {
                objectMap["tags"] = agaso.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayAvailableSslOptions struct.
        func (agaso *ApplicationGatewayAvailableSslOptions) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayAvailableSslOptionsPropertiesFormat ApplicationGatewayAvailableSslOptionsPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayAvailableSslOptionsPropertiesFormat)
    if err != nil {
    return err
    }
        agaso.ApplicationGatewayAvailableSslOptionsPropertiesFormat = &applicationGatewayAvailableSslOptionsPropertiesFormat
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agaso.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agaso.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agaso.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        agaso.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        agaso.Tags = tags
    }
            }
        }

        return nil
        }

            // ApplicationGatewayAvailableSslOptionsPropertiesFormat properties of
            // ApplicationGatewayAvailableSslOptions.
            type ApplicationGatewayAvailableSslOptionsPropertiesFormat struct {
            // PredefinedPolicies - List of available Ssl predefined policy.
            PredefinedPolicies *[]SubResource `json:"predefinedPolicies,omitempty"`
            // DefaultPolicy - Name of the Ssl predefined policy applied by default to application gateway. Possible values include: 'AppGwSslPolicy20150501', 'AppGwSslPolicy20170401', 'AppGwSslPolicy20170401S'
            DefaultPolicy ApplicationGatewaySslPolicyName `json:"defaultPolicy,omitempty"`
            // AvailableCipherSuites - List of available Ssl cipher suites.
            AvailableCipherSuites *[]ApplicationGatewaySslCipherSuite `json:"availableCipherSuites,omitempty"`
            // AvailableProtocols - List of available Ssl protocols.
            AvailableProtocols *[]ApplicationGatewaySslProtocol `json:"availableProtocols,omitempty"`
            }

            // ApplicationGatewayAvailableSslPredefinedPolicies response for ApplicationGatewayAvailableSslOptions API
            // service call.
            type ApplicationGatewayAvailableSslPredefinedPolicies struct {
            autorest.Response `json:"-"`
            // Value - List of available Ssl predefined policy.
            Value *[]ApplicationGatewaySslPredefinedPolicy `json:"value,omitempty"`
            // NextLink - URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

            // ApplicationGatewayAvailableSslPredefinedPoliciesIterator provides access to a complete listing of
            // ApplicationGatewaySslPredefinedPolicy values.
            type ApplicationGatewayAvailableSslPredefinedPoliciesIterator struct {
                i int
                page ApplicationGatewayAvailableSslPredefinedPoliciesPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * ApplicationGatewayAvailableSslPredefinedPoliciesIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ApplicationGatewayAvailableSslPredefinedPoliciesIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * ApplicationGatewayAvailableSslPredefinedPoliciesIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter ApplicationGatewayAvailableSslPredefinedPoliciesIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter ApplicationGatewayAvailableSslPredefinedPoliciesIterator) Response() ApplicationGatewayAvailableSslPredefinedPolicies {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter ApplicationGatewayAvailableSslPredefinedPoliciesIterator) Value() ApplicationGatewaySslPredefinedPolicy {
        if !iter.page.NotDone() {
        return ApplicationGatewaySslPredefinedPolicy{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the ApplicationGatewayAvailableSslPredefinedPoliciesIterator type.
        func NewApplicationGatewayAvailableSslPredefinedPoliciesIterator (page ApplicationGatewayAvailableSslPredefinedPoliciesPage) ApplicationGatewayAvailableSslPredefinedPoliciesIterator {
        return ApplicationGatewayAvailableSslPredefinedPoliciesIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (agaspp ApplicationGatewayAvailableSslPredefinedPolicies) IsEmpty() bool {
                return agaspp.Value == nil || len(*agaspp.Value) == 0
                }

                // hasNextLink returns true if the NextLink is not empty.
                func (agaspp ApplicationGatewayAvailableSslPredefinedPolicies) hasNextLink() bool {
                return agaspp.NextLink != nil && len(*agaspp.NextLink) != 0
                }
                    // applicationGatewayAvailableSslPredefinedPoliciesPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (agaspp ApplicationGatewayAvailableSslPredefinedPolicies) applicationGatewayAvailableSslPredefinedPoliciesPreparer(ctx context.Context) (*http.Request, error) {
                    if !agaspp.hasNextLink() {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( agaspp.NextLink)));
                    }

            // ApplicationGatewayAvailableSslPredefinedPoliciesPage contains a page of
            // ApplicationGatewaySslPredefinedPolicy values.
            type ApplicationGatewayAvailableSslPredefinedPoliciesPage struct {
                fn func(context.Context, ApplicationGatewayAvailableSslPredefinedPolicies) (ApplicationGatewayAvailableSslPredefinedPolicies, error)
                agaspp ApplicationGatewayAvailableSslPredefinedPolicies
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * ApplicationGatewayAvailableSslPredefinedPoliciesPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ApplicationGatewayAvailableSslPredefinedPoliciesPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        for {
        next, err := page.fn(ctx, page.agaspp)
        if err != nil {
        return err
        }
        page.agaspp = next
        if !next.hasNextLink() || !next.IsEmpty() {
        break
        }
        }
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * ApplicationGatewayAvailableSslPredefinedPoliciesPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page ApplicationGatewayAvailableSslPredefinedPoliciesPage) NotDone() bool {
        return !page.agaspp.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page ApplicationGatewayAvailableSslPredefinedPoliciesPage) Response() ApplicationGatewayAvailableSslPredefinedPolicies {
        return page.agaspp
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page ApplicationGatewayAvailableSslPredefinedPoliciesPage) Values() []ApplicationGatewaySslPredefinedPolicy {
        if page.agaspp.IsEmpty() {
        return nil
        }
        return *page.agaspp.Value
        }
        // Creates a new instance of the ApplicationGatewayAvailableSslPredefinedPoliciesPage type.
        func NewApplicationGatewayAvailableSslPredefinedPoliciesPage (cur ApplicationGatewayAvailableSslPredefinedPolicies, getNextPage func(context.Context, ApplicationGatewayAvailableSslPredefinedPolicies) (ApplicationGatewayAvailableSslPredefinedPolicies, error)) ApplicationGatewayAvailableSslPredefinedPoliciesPage {
        return ApplicationGatewayAvailableSslPredefinedPoliciesPage{
        fn: getNextPage,
        agaspp: cur,
        }
        }

            // ApplicationGatewayAvailableWafRuleSetsResult response for ApplicationGatewayAvailableWafRuleSets API
            // service call.
            type ApplicationGatewayAvailableWafRuleSetsResult struct {
            autorest.Response `json:"-"`
            // Value - The list of application gateway rule sets.
            Value *[]ApplicationGatewayFirewallRuleSet `json:"value,omitempty"`
            }

            // ApplicationGatewayBackendAddress backend address of an application gateway.
            type ApplicationGatewayBackendAddress struct {
            // Fqdn - Fully qualified domain name (FQDN).
            Fqdn *string `json:"fqdn,omitempty"`
            // IPAddress - IP address.
            IPAddress *string `json:"ipAddress,omitempty"`
            }

            // ApplicationGatewayBackendAddressPool backend Address Pool of an application gateway.
            type ApplicationGatewayBackendAddressPool struct {
            // ApplicationGatewayBackendAddressPoolPropertiesFormat - Properties of the application gateway backend address pool.
            *ApplicationGatewayBackendAddressPoolPropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the backend address pool that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayBackendAddressPool.
        func (agbap ApplicationGatewayBackendAddressPool)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agbap.ApplicationGatewayBackendAddressPoolPropertiesFormat != nil) {
                objectMap["properties"] = agbap.ApplicationGatewayBackendAddressPoolPropertiesFormat
                }
                if(agbap.Name != nil) {
                objectMap["name"] = agbap.Name
                }
                if(agbap.ID != nil) {
                objectMap["id"] = agbap.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayBackendAddressPool struct.
        func (agbap *ApplicationGatewayBackendAddressPool) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayBackendAddressPoolPropertiesFormat ApplicationGatewayBackendAddressPoolPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayBackendAddressPoolPropertiesFormat)
    if err != nil {
    return err
    }
        agbap.ApplicationGatewayBackendAddressPoolPropertiesFormat = &applicationGatewayBackendAddressPoolPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agbap.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agbap.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agbap.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agbap.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayBackendAddressPoolPropertiesFormat properties of Backend Address Pool of an
            // application gateway.
            type ApplicationGatewayBackendAddressPoolPropertiesFormat struct {
            // BackendIPConfigurations - READ-ONLY; Collection of references to IPs defined in network interfaces.
            BackendIPConfigurations *[]InterfaceIPConfiguration `json:"backendIPConfigurations,omitempty"`
            // BackendAddresses - Backend addresses.
            BackendAddresses *[]ApplicationGatewayBackendAddress `json:"backendAddresses,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the backend address pool resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayBackendAddressPoolPropertiesFormat.
        func (agbappf ApplicationGatewayBackendAddressPoolPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agbappf.BackendAddresses != nil) {
                objectMap["backendAddresses"] = agbappf.BackendAddresses
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayBackendHTTPSettings backend address pool settings of an application gateway.
            type ApplicationGatewayBackendHTTPSettings struct {
            // ApplicationGatewayBackendHTTPSettingsPropertiesFormat - Properties of the application gateway backend HTTP settings.
            *ApplicationGatewayBackendHTTPSettingsPropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the backend http settings that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayBackendHTTPSettings.
        func (agbhs ApplicationGatewayBackendHTTPSettings)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agbhs.ApplicationGatewayBackendHTTPSettingsPropertiesFormat != nil) {
                objectMap["properties"] = agbhs.ApplicationGatewayBackendHTTPSettingsPropertiesFormat
                }
                if(agbhs.Name != nil) {
                objectMap["name"] = agbhs.Name
                }
                if(agbhs.ID != nil) {
                objectMap["id"] = agbhs.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayBackendHTTPSettings struct.
        func (agbhs *ApplicationGatewayBackendHTTPSettings) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayBackendHTTPSettingsPropertiesFormat ApplicationGatewayBackendHTTPSettingsPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayBackendHTTPSettingsPropertiesFormat)
    if err != nil {
    return err
    }
        agbhs.ApplicationGatewayBackendHTTPSettingsPropertiesFormat = &applicationGatewayBackendHTTPSettingsPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agbhs.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agbhs.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agbhs.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agbhs.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayBackendHTTPSettingsPropertiesFormat properties of Backend address pool settings of an
            // application gateway.
            type ApplicationGatewayBackendHTTPSettingsPropertiesFormat struct {
            // Port - The destination port on the backend.
            Port *int32 `json:"port,omitempty"`
            // Protocol - The protocol used to communicate with the backend. Possible values include: 'HTTP', 'HTTPS'
            Protocol ApplicationGatewayProtocol `json:"protocol,omitempty"`
            // CookieBasedAffinity - Cookie based affinity. Possible values include: 'Enabled', 'Disabled'
            CookieBasedAffinity ApplicationGatewayCookieBasedAffinity `json:"cookieBasedAffinity,omitempty"`
            // RequestTimeout - Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
            RequestTimeout *int32 `json:"requestTimeout,omitempty"`
            // Probe - Probe resource of an application gateway.
            Probe *SubResource `json:"probe,omitempty"`
            // AuthenticationCertificates - Array of references to application gateway authentication certificates.
            AuthenticationCertificates *[]SubResource `json:"authenticationCertificates,omitempty"`
            // TrustedRootCertificates - Array of references to application gateway trusted root certificates.
            TrustedRootCertificates *[]SubResource `json:"trustedRootCertificates,omitempty"`
            // ConnectionDraining - Connection draining of the backend http settings resource.
            ConnectionDraining *ApplicationGatewayConnectionDraining `json:"connectionDraining,omitempty"`
            // HostName - Host header to be sent to the backend servers.
            HostName *string `json:"hostName,omitempty"`
            // PickHostNameFromBackendAddress - Whether to pick host header should be picked from the host name of the backend server. Default value is false.
            PickHostNameFromBackendAddress *bool `json:"pickHostNameFromBackendAddress,omitempty"`
            // AffinityCookieName - Cookie name to use for the affinity cookie.
            AffinityCookieName *string `json:"affinityCookieName,omitempty"`
            // ProbeEnabled - Whether the probe is enabled. Default value is false.
            ProbeEnabled *bool `json:"probeEnabled,omitempty"`
            // Path - Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
            Path *string `json:"path,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the backend HTTP settings resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayBackendHTTPSettingsPropertiesFormat.
        func (agbhspf ApplicationGatewayBackendHTTPSettingsPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agbhspf.Port != nil) {
                objectMap["port"] = agbhspf.Port
                }
                if(agbhspf.Protocol != "") {
                objectMap["protocol"] = agbhspf.Protocol
                }
                if(agbhspf.CookieBasedAffinity != "") {
                objectMap["cookieBasedAffinity"] = agbhspf.CookieBasedAffinity
                }
                if(agbhspf.RequestTimeout != nil) {
                objectMap["requestTimeout"] = agbhspf.RequestTimeout
                }
                if(agbhspf.Probe != nil) {
                objectMap["probe"] = agbhspf.Probe
                }
                if(agbhspf.AuthenticationCertificates != nil) {
                objectMap["authenticationCertificates"] = agbhspf.AuthenticationCertificates
                }
                if(agbhspf.TrustedRootCertificates != nil) {
                objectMap["trustedRootCertificates"] = agbhspf.TrustedRootCertificates
                }
                if(agbhspf.ConnectionDraining != nil) {
                objectMap["connectionDraining"] = agbhspf.ConnectionDraining
                }
                if(agbhspf.HostName != nil) {
                objectMap["hostName"] = agbhspf.HostName
                }
                if(agbhspf.PickHostNameFromBackendAddress != nil) {
                objectMap["pickHostNameFromBackendAddress"] = agbhspf.PickHostNameFromBackendAddress
                }
                if(agbhspf.AffinityCookieName != nil) {
                objectMap["affinityCookieName"] = agbhspf.AffinityCookieName
                }
                if(agbhspf.ProbeEnabled != nil) {
                objectMap["probeEnabled"] = agbhspf.ProbeEnabled
                }
                if(agbhspf.Path != nil) {
                objectMap["path"] = agbhspf.Path
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayBackendHealth response for ApplicationGatewayBackendHealth API service call.
            type ApplicationGatewayBackendHealth struct {
            autorest.Response `json:"-"`
            // BackendAddressPools - A list of ApplicationGatewayBackendHealthPool resources.
            BackendAddressPools *[]ApplicationGatewayBackendHealthPool `json:"backendAddressPools,omitempty"`
            }

            // ApplicationGatewayBackendHealthHTTPSettings application gateway BackendHealthHttp settings.
            type ApplicationGatewayBackendHealthHTTPSettings struct {
            // BackendHTTPSettings - Reference to an ApplicationGatewayBackendHttpSettings resource.
            BackendHTTPSettings *ApplicationGatewayBackendHTTPSettings `json:"backendHttpSettings,omitempty"`
            // Servers - List of ApplicationGatewayBackendHealthServer resources.
            Servers *[]ApplicationGatewayBackendHealthServer `json:"servers,omitempty"`
            }

            // ApplicationGatewayBackendHealthOnDemand result of on demand test probe.
            type ApplicationGatewayBackendHealthOnDemand struct {
            autorest.Response `json:"-"`
            // BackendAddressPool - Reference to an ApplicationGatewayBackendAddressPool resource.
            BackendAddressPool *ApplicationGatewayBackendAddressPool `json:"backendAddressPool,omitempty"`
            // BackendHealthHTTPSettings - Application gateway BackendHealthHttp settings.
            BackendHealthHTTPSettings *ApplicationGatewayBackendHealthHTTPSettings `json:"backendHealthHttpSettings,omitempty"`
            }

            // ApplicationGatewayBackendHealthPool application gateway BackendHealth pool.
            type ApplicationGatewayBackendHealthPool struct {
            // BackendAddressPool - Reference to an ApplicationGatewayBackendAddressPool resource.
            BackendAddressPool *ApplicationGatewayBackendAddressPool `json:"backendAddressPool,omitempty"`
            // BackendHTTPSettingsCollection - List of ApplicationGatewayBackendHealthHttpSettings resources.
            BackendHTTPSettingsCollection *[]ApplicationGatewayBackendHealthHTTPSettings `json:"backendHttpSettingsCollection,omitempty"`
            }

            // ApplicationGatewayBackendHealthServer application gateway backendhealth http settings.
            type ApplicationGatewayBackendHealthServer struct {
            // Address - IP address or FQDN of backend server.
            Address *string `json:"address,omitempty"`
            // IPConfiguration - Reference to IP configuration of backend server.
            IPConfiguration *InterfaceIPConfiguration `json:"ipConfiguration,omitempty"`
            // Health - Health of backend server. Possible values include: 'Unknown', 'Up', 'Down', 'Partial', 'Draining'
            Health ApplicationGatewayBackendHealthServerHealth `json:"health,omitempty"`
            // HealthProbeLog - Health Probe Log.
            HealthProbeLog *string `json:"healthProbeLog,omitempty"`
            }

            // ApplicationGatewayClientAuthConfiguration application gateway client authentication configuration.
            type ApplicationGatewayClientAuthConfiguration struct {
            // VerifyClientCertIssuerDN - Verify client certificate issuer name on the application gateway.
            VerifyClientCertIssuerDN *bool `json:"verifyClientCertIssuerDN,omitempty"`
            }

            // ApplicationGatewayConnectionDraining connection draining allows open connections to a backend server to
            // be active for a specified time after the backend server got removed from the configuration.
            type ApplicationGatewayConnectionDraining struct {
            // Enabled - Whether connection draining is enabled or not.
            Enabled *bool `json:"enabled,omitempty"`
            // DrainTimeoutInSec - The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
            DrainTimeoutInSec *int32 `json:"drainTimeoutInSec,omitempty"`
            }

            // ApplicationGatewayCustomError customer error of an application gateway.
            type ApplicationGatewayCustomError struct {
            // StatusCode - Status code of the application gateway customer error. Possible values include: 'HTTPStatus403', 'HTTPStatus502'
            StatusCode ApplicationGatewayCustomErrorStatusCode `json:"statusCode,omitempty"`
            // CustomErrorPageURL - Error page URL of the application gateway customer error.
            CustomErrorPageURL *string `json:"customErrorPageUrl,omitempty"`
            }

            // ApplicationGatewayFirewallDisabledRuleGroup allows to disable rules within a rule group or an entire
            // rule group.
            type ApplicationGatewayFirewallDisabledRuleGroup struct {
            // RuleGroupName - The name of the rule group that will be disabled.
            RuleGroupName *string `json:"ruleGroupName,omitempty"`
            // Rules - The list of rules that will be disabled. If null, all rules of the rule group will be disabled.
            Rules *[]int32 `json:"rules,omitempty"`
            }

            // ApplicationGatewayFirewallExclusion allow to exclude some variable satisfy the condition for the WAF
            // check.
            type ApplicationGatewayFirewallExclusion struct {
            // MatchVariable - The variable to be excluded.
            MatchVariable *string `json:"matchVariable,omitempty"`
            // SelectorMatchOperator - When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
            SelectorMatchOperator *string `json:"selectorMatchOperator,omitempty"`
            // Selector - When matchVariable is a collection, operator used to specify which elements in the collection this exclusion applies to.
            Selector *string `json:"selector,omitempty"`
            }

            // ApplicationGatewayFirewallRule a web application firewall rule.
            type ApplicationGatewayFirewallRule struct {
            // RuleID - The identifier of the web application firewall rule.
            RuleID *int32 `json:"ruleId,omitempty"`
            // Description - The description of the web application firewall rule.
            Description *string `json:"description,omitempty"`
            }

            // ApplicationGatewayFirewallRuleGroup a web application firewall rule group.
            type ApplicationGatewayFirewallRuleGroup struct {
            // RuleGroupName - The name of the web application firewall rule group.
            RuleGroupName *string `json:"ruleGroupName,omitempty"`
            // Description - The description of the web application firewall rule group.
            Description *string `json:"description,omitempty"`
            // Rules - The rules of the web application firewall rule group.
            Rules *[]ApplicationGatewayFirewallRule `json:"rules,omitempty"`
            }

            // ApplicationGatewayFirewallRuleSet a web application firewall rule set.
            type ApplicationGatewayFirewallRuleSet struct {
            // ApplicationGatewayFirewallRuleSetPropertiesFormat - Properties of the application gateway firewall rule set.
            *ApplicationGatewayFirewallRuleSetPropertiesFormat `json:"properties,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayFirewallRuleSet.
        func (agfrs ApplicationGatewayFirewallRuleSet)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agfrs.ApplicationGatewayFirewallRuleSetPropertiesFormat != nil) {
                objectMap["properties"] = agfrs.ApplicationGatewayFirewallRuleSetPropertiesFormat
                }
                if(agfrs.ID != nil) {
                objectMap["id"] = agfrs.ID
                }
                if(agfrs.Location != nil) {
                objectMap["location"] = agfrs.Location
                }
                if(agfrs.Tags != nil) {
                objectMap["tags"] = agfrs.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayFirewallRuleSet struct.
        func (agfrs *ApplicationGatewayFirewallRuleSet) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayFirewallRuleSetPropertiesFormat ApplicationGatewayFirewallRuleSetPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayFirewallRuleSetPropertiesFormat)
    if err != nil {
    return err
    }
        agfrs.ApplicationGatewayFirewallRuleSetPropertiesFormat = &applicationGatewayFirewallRuleSetPropertiesFormat
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agfrs.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agfrs.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agfrs.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        agfrs.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        agfrs.Tags = tags
    }
            }
        }

        return nil
        }

            // ApplicationGatewayFirewallRuleSetPropertiesFormat properties of the web application firewall rule set.
            type ApplicationGatewayFirewallRuleSetPropertiesFormat struct {
            // ProvisioningState - READ-ONLY; The provisioning state of the web application firewall rule set. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // RuleSetType - The type of the web application firewall rule set.
            RuleSetType *string `json:"ruleSetType,omitempty"`
            // RuleSetVersion - The version of the web application firewall rule set type.
            RuleSetVersion *string `json:"ruleSetVersion,omitempty"`
            // RuleGroups - The rule groups of the web application firewall rule set.
            RuleGroups *[]ApplicationGatewayFirewallRuleGroup `json:"ruleGroups,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayFirewallRuleSetPropertiesFormat.
        func (agfrspf ApplicationGatewayFirewallRuleSetPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agfrspf.RuleSetType != nil) {
                objectMap["ruleSetType"] = agfrspf.RuleSetType
                }
                if(agfrspf.RuleSetVersion != nil) {
                objectMap["ruleSetVersion"] = agfrspf.RuleSetVersion
                }
                if(agfrspf.RuleGroups != nil) {
                objectMap["ruleGroups"] = agfrspf.RuleGroups
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayFrontendIPConfiguration frontend IP configuration of an application gateway.
            type ApplicationGatewayFrontendIPConfiguration struct {
            // ApplicationGatewayFrontendIPConfigurationPropertiesFormat - Properties of the application gateway frontend IP configuration.
            *ApplicationGatewayFrontendIPConfigurationPropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the frontend IP configuration that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayFrontendIPConfiguration.
        func (agfic ApplicationGatewayFrontendIPConfiguration)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agfic.ApplicationGatewayFrontendIPConfigurationPropertiesFormat != nil) {
                objectMap["properties"] = agfic.ApplicationGatewayFrontendIPConfigurationPropertiesFormat
                }
                if(agfic.Name != nil) {
                objectMap["name"] = agfic.Name
                }
                if(agfic.ID != nil) {
                objectMap["id"] = agfic.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayFrontendIPConfiguration struct.
        func (agfic *ApplicationGatewayFrontendIPConfiguration) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayFrontendIPConfigurationPropertiesFormat ApplicationGatewayFrontendIPConfigurationPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayFrontendIPConfigurationPropertiesFormat)
    if err != nil {
    return err
    }
        agfic.ApplicationGatewayFrontendIPConfigurationPropertiesFormat = &applicationGatewayFrontendIPConfigurationPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agfic.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agfic.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agfic.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agfic.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayFrontendIPConfigurationPropertiesFormat properties of Frontend IP configuration of an
            // application gateway.
            type ApplicationGatewayFrontendIPConfigurationPropertiesFormat struct {
            // PrivateIPAddress - PrivateIPAddress of the network interface IP Configuration.
            PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
            // PrivateIPAllocationMethod - The private IP address allocation method. Possible values include: 'Static', 'Dynamic'
            PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
            // Subnet - Reference to the subnet resource.
            Subnet *SubResource `json:"subnet,omitempty"`
            // PublicIPAddress - Reference to the PublicIP resource.
            PublicIPAddress *SubResource `json:"publicIPAddress,omitempty"`
            // PrivateLinkConfiguration - Reference to the application gateway private link configuration.
            PrivateLinkConfiguration *SubResource `json:"privateLinkConfiguration,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the frontend IP configuration resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayFrontendIPConfigurationPropertiesFormat.
        func (agficpf ApplicationGatewayFrontendIPConfigurationPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agficpf.PrivateIPAddress != nil) {
                objectMap["privateIPAddress"] = agficpf.PrivateIPAddress
                }
                if(agficpf.PrivateIPAllocationMethod != "") {
                objectMap["privateIPAllocationMethod"] = agficpf.PrivateIPAllocationMethod
                }
                if(agficpf.Subnet != nil) {
                objectMap["subnet"] = agficpf.Subnet
                }
                if(agficpf.PublicIPAddress != nil) {
                objectMap["publicIPAddress"] = agficpf.PublicIPAddress
                }
                if(agficpf.PrivateLinkConfiguration != nil) {
                objectMap["privateLinkConfiguration"] = agficpf.PrivateLinkConfiguration
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayFrontendPort frontend port of an application gateway.
            type ApplicationGatewayFrontendPort struct {
            // ApplicationGatewayFrontendPortPropertiesFormat - Properties of the application gateway frontend port.
            *ApplicationGatewayFrontendPortPropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the frontend port that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayFrontendPort.
        func (agfp ApplicationGatewayFrontendPort)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agfp.ApplicationGatewayFrontendPortPropertiesFormat != nil) {
                objectMap["properties"] = agfp.ApplicationGatewayFrontendPortPropertiesFormat
                }
                if(agfp.Name != nil) {
                objectMap["name"] = agfp.Name
                }
                if(agfp.ID != nil) {
                objectMap["id"] = agfp.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayFrontendPort struct.
        func (agfp *ApplicationGatewayFrontendPort) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayFrontendPortPropertiesFormat ApplicationGatewayFrontendPortPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayFrontendPortPropertiesFormat)
    if err != nil {
    return err
    }
        agfp.ApplicationGatewayFrontendPortPropertiesFormat = &applicationGatewayFrontendPortPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agfp.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agfp.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agfp.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agfp.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayFrontendPortPropertiesFormat properties of Frontend port of an application gateway.
            type ApplicationGatewayFrontendPortPropertiesFormat struct {
            // Port - Frontend port.
            Port *int32 `json:"port,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the frontend port resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayFrontendPortPropertiesFormat.
        func (agfppf ApplicationGatewayFrontendPortPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agfppf.Port != nil) {
                objectMap["port"] = agfppf.Port
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayGlobalConfiguration application Gateway global configuration.
            type ApplicationGatewayGlobalConfiguration struct {
            // EnableRequestBuffering - Enable request buffering.
            EnableRequestBuffering *bool `json:"enableRequestBuffering,omitempty"`
            // EnableResponseBuffering - Enable response buffering.
            EnableResponseBuffering *bool `json:"enableResponseBuffering,omitempty"`
            }

            // ApplicationGatewayHTTPListener http listener of an application gateway.
            type ApplicationGatewayHTTPListener struct {
            // ApplicationGatewayHTTPListenerPropertiesFormat - Properties of the application gateway HTTP listener.
            *ApplicationGatewayHTTPListenerPropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the HTTP listener that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayHTTPListener.
        func (aghl ApplicationGatewayHTTPListener)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(aghl.ApplicationGatewayHTTPListenerPropertiesFormat != nil) {
                objectMap["properties"] = aghl.ApplicationGatewayHTTPListenerPropertiesFormat
                }
                if(aghl.Name != nil) {
                objectMap["name"] = aghl.Name
                }
                if(aghl.ID != nil) {
                objectMap["id"] = aghl.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayHTTPListener struct.
        func (aghl *ApplicationGatewayHTTPListener) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayHTTPListenerPropertiesFormat ApplicationGatewayHTTPListenerPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayHTTPListenerPropertiesFormat)
    if err != nil {
    return err
    }
        aghl.ApplicationGatewayHTTPListenerPropertiesFormat = &applicationGatewayHTTPListenerPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        aghl.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        aghl.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        aghl.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        aghl.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayHTTPListenerPropertiesFormat properties of HTTP listener of an application gateway.
            type ApplicationGatewayHTTPListenerPropertiesFormat struct {
            // FrontendIPConfiguration - Frontend IP configuration resource of an application gateway.
            FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`
            // FrontendPort - Frontend port resource of an application gateway.
            FrontendPort *SubResource `json:"frontendPort,omitempty"`
            // Protocol - Protocol of the HTTP listener. Possible values include: 'HTTP', 'HTTPS'
            Protocol ApplicationGatewayProtocol `json:"protocol,omitempty"`
            // HostName - Host name of HTTP listener.
            HostName *string `json:"hostName,omitempty"`
            // SslCertificate - SSL certificate resource of an application gateway.
            SslCertificate *SubResource `json:"sslCertificate,omitempty"`
            // SslProfile - SSL profile resource of the application gateway.
            SslProfile *SubResource `json:"sslProfile,omitempty"`
            // RequireServerNameIndication - Applicable only if protocol is https. Enables SNI for multi-hosting.
            RequireServerNameIndication *bool `json:"requireServerNameIndication,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the HTTP listener resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // CustomErrorConfigurations - Custom error configurations of the HTTP listener.
            CustomErrorConfigurations *[]ApplicationGatewayCustomError `json:"customErrorConfigurations,omitempty"`
            // FirewallPolicy - Reference to the FirewallPolicy resource.
            FirewallPolicy *SubResource `json:"firewallPolicy,omitempty"`
            // HostNames - List of Host names for HTTP Listener that allows special wildcard characters as well.
            HostNames *[]string `json:"hostNames,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayHTTPListenerPropertiesFormat.
        func (aghlpf ApplicationGatewayHTTPListenerPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(aghlpf.FrontendIPConfiguration != nil) {
                objectMap["frontendIPConfiguration"] = aghlpf.FrontendIPConfiguration
                }
                if(aghlpf.FrontendPort != nil) {
                objectMap["frontendPort"] = aghlpf.FrontendPort
                }
                if(aghlpf.Protocol != "") {
                objectMap["protocol"] = aghlpf.Protocol
                }
                if(aghlpf.HostName != nil) {
                objectMap["hostName"] = aghlpf.HostName
                }
                if(aghlpf.SslCertificate != nil) {
                objectMap["sslCertificate"] = aghlpf.SslCertificate
                }
                if(aghlpf.SslProfile != nil) {
                objectMap["sslProfile"] = aghlpf.SslProfile
                }
                if(aghlpf.RequireServerNameIndication != nil) {
                objectMap["requireServerNameIndication"] = aghlpf.RequireServerNameIndication
                }
                if(aghlpf.CustomErrorConfigurations != nil) {
                objectMap["customErrorConfigurations"] = aghlpf.CustomErrorConfigurations
                }
                if(aghlpf.FirewallPolicy != nil) {
                objectMap["firewallPolicy"] = aghlpf.FirewallPolicy
                }
                if(aghlpf.HostNames != nil) {
                objectMap["hostNames"] = aghlpf.HostNames
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayHeaderConfiguration header configuration of the Actions set in Application Gateway.
            type ApplicationGatewayHeaderConfiguration struct {
            // HeaderName - Header name of the header configuration.
            HeaderName *string `json:"headerName,omitempty"`
            // HeaderValue - Header value of the header configuration.
            HeaderValue *string `json:"headerValue,omitempty"`
            }

            // ApplicationGatewayIPConfiguration IP configuration of an application gateway. Currently 1 public and 1
            // private IP configuration is allowed.
            type ApplicationGatewayIPConfiguration struct {
            // ApplicationGatewayIPConfigurationPropertiesFormat - Properties of the application gateway IP configuration.
            *ApplicationGatewayIPConfigurationPropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the IP configuration that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayIPConfiguration.
        func (agic ApplicationGatewayIPConfiguration)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agic.ApplicationGatewayIPConfigurationPropertiesFormat != nil) {
                objectMap["properties"] = agic.ApplicationGatewayIPConfigurationPropertiesFormat
                }
                if(agic.Name != nil) {
                objectMap["name"] = agic.Name
                }
                if(agic.ID != nil) {
                objectMap["id"] = agic.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayIPConfiguration struct.
        func (agic *ApplicationGatewayIPConfiguration) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayIPConfigurationPropertiesFormat ApplicationGatewayIPConfigurationPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayIPConfigurationPropertiesFormat)
    if err != nil {
    return err
    }
        agic.ApplicationGatewayIPConfigurationPropertiesFormat = &applicationGatewayIPConfigurationPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agic.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agic.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agic.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agic.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayIPConfigurationPropertiesFormat properties of IP configuration of an application
            // gateway.
            type ApplicationGatewayIPConfigurationPropertiesFormat struct {
            // Subnet - Reference to the subnet resource. A subnet from where application gateway gets its private address.
            Subnet *SubResource `json:"subnet,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the application gateway IP configuration resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayIPConfigurationPropertiesFormat.
        func (agicpf ApplicationGatewayIPConfigurationPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agicpf.Subnet != nil) {
                objectMap["subnet"] = agicpf.Subnet
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayListResult response for ListApplicationGateways API service call.
            type ApplicationGatewayListResult struct {
            autorest.Response `json:"-"`
            // Value - List of an application gateways in a resource group.
            Value *[]ApplicationGateway `json:"value,omitempty"`
            // NextLink - URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

            // ApplicationGatewayListResultIterator provides access to a complete listing of ApplicationGateway values.
            type ApplicationGatewayListResultIterator struct {
                i int
                page ApplicationGatewayListResultPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * ApplicationGatewayListResultIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ApplicationGatewayListResultIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * ApplicationGatewayListResultIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter ApplicationGatewayListResultIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter ApplicationGatewayListResultIterator) Response() ApplicationGatewayListResult {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter ApplicationGatewayListResultIterator) Value() ApplicationGateway {
        if !iter.page.NotDone() {
        return ApplicationGateway{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the ApplicationGatewayListResultIterator type.
        func NewApplicationGatewayListResultIterator (page ApplicationGatewayListResultPage) ApplicationGatewayListResultIterator {
        return ApplicationGatewayListResultIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (aglr ApplicationGatewayListResult) IsEmpty() bool {
                return aglr.Value == nil || len(*aglr.Value) == 0
                }

                // hasNextLink returns true if the NextLink is not empty.
                func (aglr ApplicationGatewayListResult) hasNextLink() bool {
                return aglr.NextLink != nil && len(*aglr.NextLink) != 0
                }
                    // applicationGatewayListResultPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (aglr ApplicationGatewayListResult) applicationGatewayListResultPreparer(ctx context.Context) (*http.Request, error) {
                    if !aglr.hasNextLink() {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( aglr.NextLink)));
                    }

            // ApplicationGatewayListResultPage contains a page of ApplicationGateway values.
            type ApplicationGatewayListResultPage struct {
                fn func(context.Context, ApplicationGatewayListResult) (ApplicationGatewayListResult, error)
                aglr ApplicationGatewayListResult
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * ApplicationGatewayListResultPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ApplicationGatewayListResultPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        for {
        next, err := page.fn(ctx, page.aglr)
        if err != nil {
        return err
        }
        page.aglr = next
        if !next.hasNextLink() || !next.IsEmpty() {
        break
        }
        }
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * ApplicationGatewayListResultPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page ApplicationGatewayListResultPage) NotDone() bool {
        return !page.aglr.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page ApplicationGatewayListResultPage) Response() ApplicationGatewayListResult {
        return page.aglr
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page ApplicationGatewayListResultPage) Values() []ApplicationGateway {
        if page.aglr.IsEmpty() {
        return nil
        }
        return *page.aglr.Value
        }
        // Creates a new instance of the ApplicationGatewayListResultPage type.
        func NewApplicationGatewayListResultPage (cur ApplicationGatewayListResult, getNextPage func(context.Context, ApplicationGatewayListResult) (ApplicationGatewayListResult, error)) ApplicationGatewayListResultPage {
        return ApplicationGatewayListResultPage{
        fn: getNextPage,
        aglr: cur,
        }
        }

            // ApplicationGatewayLoadDistributionPolicy load Distribution Policy of an application gateway.
            type ApplicationGatewayLoadDistributionPolicy struct {
            // ApplicationGatewayLoadDistributionPolicyPropertiesFormat - Properties of the application gateway load distribution policy.
            *ApplicationGatewayLoadDistributionPolicyPropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the load distribution policy that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayLoadDistributionPolicy.
        func (agldp ApplicationGatewayLoadDistributionPolicy)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agldp.ApplicationGatewayLoadDistributionPolicyPropertiesFormat != nil) {
                objectMap["properties"] = agldp.ApplicationGatewayLoadDistributionPolicyPropertiesFormat
                }
                if(agldp.Name != nil) {
                objectMap["name"] = agldp.Name
                }
                if(agldp.ID != nil) {
                objectMap["id"] = agldp.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayLoadDistributionPolicy struct.
        func (agldp *ApplicationGatewayLoadDistributionPolicy) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayLoadDistributionPolicyPropertiesFormat ApplicationGatewayLoadDistributionPolicyPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayLoadDistributionPolicyPropertiesFormat)
    if err != nil {
    return err
    }
        agldp.ApplicationGatewayLoadDistributionPolicyPropertiesFormat = &applicationGatewayLoadDistributionPolicyPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agldp.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agldp.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agldp.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agldp.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayLoadDistributionPolicyPropertiesFormat properties of Load Distribution Policy of an
            // application gateway.
            type ApplicationGatewayLoadDistributionPolicyPropertiesFormat struct {
            // LoadDistributionTargets - Load Distribution Targets resource of an application gateway.
            LoadDistributionTargets *[]ApplicationGatewayLoadDistributionTarget `json:"loadDistributionTargets,omitempty"`
            // LoadDistributionAlgorithm - Load Distribution Targets resource of an application gateway. Possible values include: 'RoundRobin', 'LeastConnections', 'IPHash'
            LoadDistributionAlgorithm ApplicationGatewayLoadDistributionAlgorithm `json:"loadDistributionAlgorithm,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the Load Distribution Policy resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayLoadDistributionPolicyPropertiesFormat.
        func (agldppf ApplicationGatewayLoadDistributionPolicyPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agldppf.LoadDistributionTargets != nil) {
                objectMap["loadDistributionTargets"] = agldppf.LoadDistributionTargets
                }
                if(agldppf.LoadDistributionAlgorithm != "") {
                objectMap["loadDistributionAlgorithm"] = agldppf.LoadDistributionAlgorithm
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayLoadDistributionTarget ...
            type ApplicationGatewayLoadDistributionTarget struct {
            // ApplicationGatewayLoadDistributionTargetPropertiesFormat - Properties of the application gateway load distribution target.
            *ApplicationGatewayLoadDistributionTargetPropertiesFormat `json:"properties,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayLoadDistributionTarget.
        func (agldt ApplicationGatewayLoadDistributionTarget)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agldt.ApplicationGatewayLoadDistributionTargetPropertiesFormat != nil) {
                objectMap["properties"] = agldt.ApplicationGatewayLoadDistributionTargetPropertiesFormat
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayLoadDistributionTarget struct.
        func (agldt *ApplicationGatewayLoadDistributionTarget) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayLoadDistributionTargetPropertiesFormat ApplicationGatewayLoadDistributionTargetPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayLoadDistributionTargetPropertiesFormat)
    if err != nil {
    return err
    }
        agldt.ApplicationGatewayLoadDistributionTargetPropertiesFormat = &applicationGatewayLoadDistributionTargetPropertiesFormat
    }
            }
        }

        return nil
        }

            // ApplicationGatewayLoadDistributionTargetPropertiesFormat ...
            type ApplicationGatewayLoadDistributionTargetPropertiesFormat struct {
            // WeightPerServer - Weight per server. Range between 1 and 100.
            WeightPerServer *int32 `json:"weightPerServer,omitempty"`
            // BackendAddressPool - Backend address pool resource of the application gateway.
            BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`
            }

            // ApplicationGatewayOnDemandProbe details of on demand test probe request.
            type ApplicationGatewayOnDemandProbe struct {
            // Protocol - The protocol used for the probe. Possible values include: 'HTTP', 'HTTPS'
            Protocol ApplicationGatewayProtocol `json:"protocol,omitempty"`
            // Host - Host name to send the probe to.
            Host *string `json:"host,omitempty"`
            // Path - Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>.
            Path *string `json:"path,omitempty"`
            // Timeout - The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
            Timeout *int32 `json:"timeout,omitempty"`
            // PickHostNameFromBackendHTTPSettings - Whether the host header should be picked from the backend http settings. Default value is false.
            PickHostNameFromBackendHTTPSettings *bool `json:"pickHostNameFromBackendHttpSettings,omitempty"`
            // Match - Criterion for classifying a healthy probe response.
            Match *ApplicationGatewayProbeHealthResponseMatch `json:"match,omitempty"`
            // BackendAddressPool - Reference to backend pool of application gateway to which probe request will be sent.
            BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`
            // BackendHTTPSettings - Reference to backend http setting of application gateway to be used for test probe.
            BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`
            }

            // ApplicationGatewayPathRule path rule of URL path map of an application gateway.
            type ApplicationGatewayPathRule struct {
            // ApplicationGatewayPathRulePropertiesFormat - Properties of the application gateway path rule.
            *ApplicationGatewayPathRulePropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the path rule that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayPathRule.
        func (agpr ApplicationGatewayPathRule)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agpr.ApplicationGatewayPathRulePropertiesFormat != nil) {
                objectMap["properties"] = agpr.ApplicationGatewayPathRulePropertiesFormat
                }
                if(agpr.Name != nil) {
                objectMap["name"] = agpr.Name
                }
                if(agpr.ID != nil) {
                objectMap["id"] = agpr.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayPathRule struct.
        func (agpr *ApplicationGatewayPathRule) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayPathRulePropertiesFormat ApplicationGatewayPathRulePropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayPathRulePropertiesFormat)
    if err != nil {
    return err
    }
        agpr.ApplicationGatewayPathRulePropertiesFormat = &applicationGatewayPathRulePropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agpr.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agpr.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agpr.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agpr.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayPathRulePropertiesFormat properties of path rule of an application gateway.
            type ApplicationGatewayPathRulePropertiesFormat struct {
            // Paths - Path rules of URL path map.
            Paths *[]string `json:"paths,omitempty"`
            // BackendAddressPool - Backend address pool resource of URL path map path rule.
            BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`
            // BackendHTTPSettings - Backend http settings resource of URL path map path rule.
            BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`
            // RedirectConfiguration - Redirect configuration resource of URL path map path rule.
            RedirectConfiguration *SubResource `json:"redirectConfiguration,omitempty"`
            // RewriteRuleSet - Rewrite rule set resource of URL path map path rule.
            RewriteRuleSet *SubResource `json:"rewriteRuleSet,omitempty"`
            // LoadDistributionPolicy - Load Distribution Policy resource of URL path map path rule.
            LoadDistributionPolicy *SubResource `json:"loadDistributionPolicy,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the path rule resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // FirewallPolicy - Reference to the FirewallPolicy resource.
            FirewallPolicy *SubResource `json:"firewallPolicy,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayPathRulePropertiesFormat.
        func (agprpf ApplicationGatewayPathRulePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agprpf.Paths != nil) {
                objectMap["paths"] = agprpf.Paths
                }
                if(agprpf.BackendAddressPool != nil) {
                objectMap["backendAddressPool"] = agprpf.BackendAddressPool
                }
                if(agprpf.BackendHTTPSettings != nil) {
                objectMap["backendHttpSettings"] = agprpf.BackendHTTPSettings
                }
                if(agprpf.RedirectConfiguration != nil) {
                objectMap["redirectConfiguration"] = agprpf.RedirectConfiguration
                }
                if(agprpf.RewriteRuleSet != nil) {
                objectMap["rewriteRuleSet"] = agprpf.RewriteRuleSet
                }
                if(agprpf.LoadDistributionPolicy != nil) {
                objectMap["loadDistributionPolicy"] = agprpf.LoadDistributionPolicy
                }
                if(agprpf.FirewallPolicy != nil) {
                objectMap["firewallPolicy"] = agprpf.FirewallPolicy
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayPrivateEndpointConnection private Endpoint connection on an application gateway.
            type ApplicationGatewayPrivateEndpointConnection struct {
            autorest.Response `json:"-"`
            // ApplicationGatewayPrivateEndpointConnectionProperties - Properties of the application gateway private endpoint connection.
            *ApplicationGatewayPrivateEndpointConnectionProperties `json:"properties,omitempty"`
            // Name - Name of the private endpoint connection on an application gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayPrivateEndpointConnection.
        func (agpec ApplicationGatewayPrivateEndpointConnection)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agpec.ApplicationGatewayPrivateEndpointConnectionProperties != nil) {
                objectMap["properties"] = agpec.ApplicationGatewayPrivateEndpointConnectionProperties
                }
                if(agpec.Name != nil) {
                objectMap["name"] = agpec.Name
                }
                if(agpec.ID != nil) {
                objectMap["id"] = agpec.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayPrivateEndpointConnection struct.
        func (agpec *ApplicationGatewayPrivateEndpointConnection) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayPrivateEndpointConnectionProperties ApplicationGatewayPrivateEndpointConnectionProperties
        err = json.Unmarshal(*v, &applicationGatewayPrivateEndpointConnectionProperties)
    if err != nil {
    return err
    }
        agpec.ApplicationGatewayPrivateEndpointConnectionProperties = &applicationGatewayPrivateEndpointConnectionProperties
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agpec.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agpec.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agpec.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agpec.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayPrivateEndpointConnectionListResult response for
            // ListApplicationGatewayPrivateEndpointConnection API service call. Gets all private endpoint connections
            // for an application gateway.
            type ApplicationGatewayPrivateEndpointConnectionListResult struct {
            autorest.Response `json:"-"`
            // Value - List of private endpoint connections on an application gateway.
            Value *[]ApplicationGatewayPrivateEndpointConnection `json:"value,omitempty"`
            // NextLink - URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

            // ApplicationGatewayPrivateEndpointConnectionListResultIterator provides access to a complete listing of
            // ApplicationGatewayPrivateEndpointConnection values.
            type ApplicationGatewayPrivateEndpointConnectionListResultIterator struct {
                i int
                page ApplicationGatewayPrivateEndpointConnectionListResultPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * ApplicationGatewayPrivateEndpointConnectionListResultIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ApplicationGatewayPrivateEndpointConnectionListResultIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * ApplicationGatewayPrivateEndpointConnectionListResultIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter ApplicationGatewayPrivateEndpointConnectionListResultIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter ApplicationGatewayPrivateEndpointConnectionListResultIterator) Response() ApplicationGatewayPrivateEndpointConnectionListResult {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter ApplicationGatewayPrivateEndpointConnectionListResultIterator) Value() ApplicationGatewayPrivateEndpointConnection {
        if !iter.page.NotDone() {
        return ApplicationGatewayPrivateEndpointConnection{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the ApplicationGatewayPrivateEndpointConnectionListResultIterator type.
        func NewApplicationGatewayPrivateEndpointConnectionListResultIterator (page ApplicationGatewayPrivateEndpointConnectionListResultPage) ApplicationGatewayPrivateEndpointConnectionListResultIterator {
        return ApplicationGatewayPrivateEndpointConnectionListResultIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (agpeclr ApplicationGatewayPrivateEndpointConnectionListResult) IsEmpty() bool {
                return agpeclr.Value == nil || len(*agpeclr.Value) == 0
                }

                // hasNextLink returns true if the NextLink is not empty.
                func (agpeclr ApplicationGatewayPrivateEndpointConnectionListResult) hasNextLink() bool {
                return agpeclr.NextLink != nil && len(*agpeclr.NextLink) != 0
                }
                    // applicationGatewayPrivateEndpointConnectionListResultPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (agpeclr ApplicationGatewayPrivateEndpointConnectionListResult) applicationGatewayPrivateEndpointConnectionListResultPreparer(ctx context.Context) (*http.Request, error) {
                    if !agpeclr.hasNextLink() {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( agpeclr.NextLink)));
                    }

            // ApplicationGatewayPrivateEndpointConnectionListResultPage contains a page of
            // ApplicationGatewayPrivateEndpointConnection values.
            type ApplicationGatewayPrivateEndpointConnectionListResultPage struct {
                fn func(context.Context, ApplicationGatewayPrivateEndpointConnectionListResult) (ApplicationGatewayPrivateEndpointConnectionListResult, error)
                agpeclr ApplicationGatewayPrivateEndpointConnectionListResult
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * ApplicationGatewayPrivateEndpointConnectionListResultPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ApplicationGatewayPrivateEndpointConnectionListResultPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        for {
        next, err := page.fn(ctx, page.agpeclr)
        if err != nil {
        return err
        }
        page.agpeclr = next
        if !next.hasNextLink() || !next.IsEmpty() {
        break
        }
        }
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * ApplicationGatewayPrivateEndpointConnectionListResultPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page ApplicationGatewayPrivateEndpointConnectionListResultPage) NotDone() bool {
        return !page.agpeclr.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page ApplicationGatewayPrivateEndpointConnectionListResultPage) Response() ApplicationGatewayPrivateEndpointConnectionListResult {
        return page.agpeclr
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page ApplicationGatewayPrivateEndpointConnectionListResultPage) Values() []ApplicationGatewayPrivateEndpointConnection {
        if page.agpeclr.IsEmpty() {
        return nil
        }
        return *page.agpeclr.Value
        }
        // Creates a new instance of the ApplicationGatewayPrivateEndpointConnectionListResultPage type.
        func NewApplicationGatewayPrivateEndpointConnectionListResultPage (cur ApplicationGatewayPrivateEndpointConnectionListResult, getNextPage func(context.Context, ApplicationGatewayPrivateEndpointConnectionListResult) (ApplicationGatewayPrivateEndpointConnectionListResult, error)) ApplicationGatewayPrivateEndpointConnectionListResultPage {
        return ApplicationGatewayPrivateEndpointConnectionListResultPage{
        fn: getNextPage,
        agpeclr: cur,
        }
        }

            // ApplicationGatewayPrivateEndpointConnectionProperties properties of Private Link Resource of an
            // application gateway.
            type ApplicationGatewayPrivateEndpointConnectionProperties struct {
            // PrivateEndpoint - READ-ONLY; The resource of private end point.
            PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty"`
            // PrivateLinkServiceConnectionState - A collection of information about the state of the connection between service consumer and provider.
            PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the application gateway private endpoint connection resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // LinkIdentifier - READ-ONLY; The consumer link id.
            LinkIdentifier *string `json:"linkIdentifier,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayPrivateEndpointConnectionProperties.
        func (agpecp ApplicationGatewayPrivateEndpointConnectionProperties)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agpecp.PrivateLinkServiceConnectionState != nil) {
                objectMap["privateLinkServiceConnectionState"] = agpecp.PrivateLinkServiceConnectionState
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayPrivateEndpointConnectionsDeleteFuture an abstraction for monitoring and retrieving
            // the results of a long-running operation.
            type ApplicationGatewayPrivateEndpointConnectionsDeleteFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(ApplicationGatewayPrivateEndpointConnectionsClient) (autorest.Response, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *ApplicationGatewayPrivateEndpointConnectionsDeleteFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for ApplicationGatewayPrivateEndpointConnectionsDeleteFuture.Result.
        func (future *ApplicationGatewayPrivateEndpointConnectionsDeleteFuture) result(client ApplicationGatewayPrivateEndpointConnectionsClient) (ar autorest.Response, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.ApplicationGatewayPrivateEndpointConnectionsDeleteFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ar.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.ApplicationGatewayPrivateEndpointConnectionsDeleteFuture")
                return
            }
            ar.Response = future.Response()
        return
        }

            // ApplicationGatewayPrivateEndpointConnectionsUpdateFuture an abstraction for monitoring and retrieving
            // the results of a long-running operation.
            type ApplicationGatewayPrivateEndpointConnectionsUpdateFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(ApplicationGatewayPrivateEndpointConnectionsClient) (ApplicationGatewayPrivateEndpointConnection, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *ApplicationGatewayPrivateEndpointConnectionsUpdateFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for ApplicationGatewayPrivateEndpointConnectionsUpdateFuture.Result.
        func (future *ApplicationGatewayPrivateEndpointConnectionsUpdateFuture) result(client ApplicationGatewayPrivateEndpointConnectionsClient) (agpec ApplicationGatewayPrivateEndpointConnection, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.ApplicationGatewayPrivateEndpointConnectionsUpdateFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    agpec.Response.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.ApplicationGatewayPrivateEndpointConnectionsUpdateFuture")
                return
            }
            sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if agpec.Response.Response, err = future.GetResult(sender); err == nil && agpec.Response.Response.StatusCode != http.StatusNoContent {
            agpec, err = client.UpdateResponder(agpec.Response.Response)
            if err != nil {
            err = autorest.NewErrorWithError(err, "network.ApplicationGatewayPrivateEndpointConnectionsUpdateFuture", "Result", agpec.Response.Response, "Failure responding to request")
            }
            }
            return
        }

            // ApplicationGatewayPrivateLinkConfiguration private Link Configuration on an application gateway.
            type ApplicationGatewayPrivateLinkConfiguration struct {
            // ApplicationGatewayPrivateLinkConfigurationProperties - Properties of the application gateway private link configuration.
            *ApplicationGatewayPrivateLinkConfigurationProperties `json:"properties,omitempty"`
            // Name - Name of the private link configuration that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayPrivateLinkConfiguration.
        func (agplc ApplicationGatewayPrivateLinkConfiguration)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agplc.ApplicationGatewayPrivateLinkConfigurationProperties != nil) {
                objectMap["properties"] = agplc.ApplicationGatewayPrivateLinkConfigurationProperties
                }
                if(agplc.Name != nil) {
                objectMap["name"] = agplc.Name
                }
                if(agplc.ID != nil) {
                objectMap["id"] = agplc.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayPrivateLinkConfiguration struct.
        func (agplc *ApplicationGatewayPrivateLinkConfiguration) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayPrivateLinkConfigurationProperties ApplicationGatewayPrivateLinkConfigurationProperties
        err = json.Unmarshal(*v, &applicationGatewayPrivateLinkConfigurationProperties)
    if err != nil {
    return err
    }
        agplc.ApplicationGatewayPrivateLinkConfigurationProperties = &applicationGatewayPrivateLinkConfigurationProperties
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agplc.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agplc.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agplc.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agplc.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayPrivateLinkConfigurationProperties properties of private link configuration on an
            // application gateway.
            type ApplicationGatewayPrivateLinkConfigurationProperties struct {
            // IPConfigurations - An array of application gateway private link ip configurations.
            IPConfigurations *[]ApplicationGatewayPrivateLinkIPConfiguration `json:"ipConfigurations,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the application gateway private link configuration. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayPrivateLinkConfigurationProperties.
        func (agplcp ApplicationGatewayPrivateLinkConfigurationProperties)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agplcp.IPConfigurations != nil) {
                objectMap["ipConfigurations"] = agplcp.IPConfigurations
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayPrivateLinkIPConfiguration the application gateway private link ip configuration.
            type ApplicationGatewayPrivateLinkIPConfiguration struct {
            // ApplicationGatewayPrivateLinkIPConfigurationProperties - Properties of an application gateway private link ip configuration.
            *ApplicationGatewayPrivateLinkIPConfigurationProperties `json:"properties,omitempty"`
            // Name - The name of application gateway private link ip configuration.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; The resource type.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayPrivateLinkIPConfiguration.
        func (agplic ApplicationGatewayPrivateLinkIPConfiguration)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agplic.ApplicationGatewayPrivateLinkIPConfigurationProperties != nil) {
                objectMap["properties"] = agplic.ApplicationGatewayPrivateLinkIPConfigurationProperties
                }
                if(agplic.Name != nil) {
                objectMap["name"] = agplic.Name
                }
                if(agplic.ID != nil) {
                objectMap["id"] = agplic.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayPrivateLinkIPConfiguration struct.
        func (agplic *ApplicationGatewayPrivateLinkIPConfiguration) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayPrivateLinkIPConfigurationProperties ApplicationGatewayPrivateLinkIPConfigurationProperties
        err = json.Unmarshal(*v, &applicationGatewayPrivateLinkIPConfigurationProperties)
    if err != nil {
    return err
    }
        agplic.ApplicationGatewayPrivateLinkIPConfigurationProperties = &applicationGatewayPrivateLinkIPConfigurationProperties
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agplic.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agplic.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agplic.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agplic.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayPrivateLinkIPConfigurationProperties properties of an application gateway private link
            // IP configuration.
            type ApplicationGatewayPrivateLinkIPConfigurationProperties struct {
            // PrivateIPAddress - The private IP address of the IP configuration.
            PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
            // PrivateIPAllocationMethod - The private IP address allocation method. Possible values include: 'Static', 'Dynamic'
            PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
            // Subnet - Reference to the subnet resource.
            Subnet *SubResource `json:"subnet,omitempty"`
            // Primary - Whether the ip configuration is primary or not.
            Primary *bool `json:"primary,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the application gateway private link IP configuration. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayPrivateLinkIPConfigurationProperties.
        func (agplicp ApplicationGatewayPrivateLinkIPConfigurationProperties)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agplicp.PrivateIPAddress != nil) {
                objectMap["privateIPAddress"] = agplicp.PrivateIPAddress
                }
                if(agplicp.PrivateIPAllocationMethod != "") {
                objectMap["privateIPAllocationMethod"] = agplicp.PrivateIPAllocationMethod
                }
                if(agplicp.Subnet != nil) {
                objectMap["subnet"] = agplicp.Subnet
                }
                if(agplicp.Primary != nil) {
                objectMap["primary"] = agplicp.Primary
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayPrivateLinkResource privateLink Resource of an application gateway.
            type ApplicationGatewayPrivateLinkResource struct {
            // ApplicationGatewayPrivateLinkResourceProperties - Properties of the application gateway private link resource.
            *ApplicationGatewayPrivateLinkResourceProperties `json:"properties,omitempty"`
            // Name - Name of the private link resource that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayPrivateLinkResource.
        func (agplr ApplicationGatewayPrivateLinkResource)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agplr.ApplicationGatewayPrivateLinkResourceProperties != nil) {
                objectMap["properties"] = agplr.ApplicationGatewayPrivateLinkResourceProperties
                }
                if(agplr.Name != nil) {
                objectMap["name"] = agplr.Name
                }
                if(agplr.ID != nil) {
                objectMap["id"] = agplr.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayPrivateLinkResource struct.
        func (agplr *ApplicationGatewayPrivateLinkResource) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayPrivateLinkResourceProperties ApplicationGatewayPrivateLinkResourceProperties
        err = json.Unmarshal(*v, &applicationGatewayPrivateLinkResourceProperties)
    if err != nil {
    return err
    }
        agplr.ApplicationGatewayPrivateLinkResourceProperties = &applicationGatewayPrivateLinkResourceProperties
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agplr.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agplr.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agplr.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agplr.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayPrivateLinkResourceListResult response for ListApplicationGatewayPrivateLinkResources
            // API service call. Gets all private link resources for an application gateway.
            type ApplicationGatewayPrivateLinkResourceListResult struct {
            autorest.Response `json:"-"`
            // Value - List of private link resources of an application gateway.
            Value *[]ApplicationGatewayPrivateLinkResource `json:"value,omitempty"`
            // NextLink - URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

            // ApplicationGatewayPrivateLinkResourceListResultIterator provides access to a complete listing of
            // ApplicationGatewayPrivateLinkResource values.
            type ApplicationGatewayPrivateLinkResourceListResultIterator struct {
                i int
                page ApplicationGatewayPrivateLinkResourceListResultPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * ApplicationGatewayPrivateLinkResourceListResultIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ApplicationGatewayPrivateLinkResourceListResultIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * ApplicationGatewayPrivateLinkResourceListResultIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter ApplicationGatewayPrivateLinkResourceListResultIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter ApplicationGatewayPrivateLinkResourceListResultIterator) Response() ApplicationGatewayPrivateLinkResourceListResult {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter ApplicationGatewayPrivateLinkResourceListResultIterator) Value() ApplicationGatewayPrivateLinkResource {
        if !iter.page.NotDone() {
        return ApplicationGatewayPrivateLinkResource{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the ApplicationGatewayPrivateLinkResourceListResultIterator type.
        func NewApplicationGatewayPrivateLinkResourceListResultIterator (page ApplicationGatewayPrivateLinkResourceListResultPage) ApplicationGatewayPrivateLinkResourceListResultIterator {
        return ApplicationGatewayPrivateLinkResourceListResultIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (agplrlr ApplicationGatewayPrivateLinkResourceListResult) IsEmpty() bool {
                return agplrlr.Value == nil || len(*agplrlr.Value) == 0
                }

                // hasNextLink returns true if the NextLink is not empty.
                func (agplrlr ApplicationGatewayPrivateLinkResourceListResult) hasNextLink() bool {
                return agplrlr.NextLink != nil && len(*agplrlr.NextLink) != 0
                }
                    // applicationGatewayPrivateLinkResourceListResultPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (agplrlr ApplicationGatewayPrivateLinkResourceListResult) applicationGatewayPrivateLinkResourceListResultPreparer(ctx context.Context) (*http.Request, error) {
                    if !agplrlr.hasNextLink() {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( agplrlr.NextLink)));
                    }

            // ApplicationGatewayPrivateLinkResourceListResultPage contains a page of
            // ApplicationGatewayPrivateLinkResource values.
            type ApplicationGatewayPrivateLinkResourceListResultPage struct {
                fn func(context.Context, ApplicationGatewayPrivateLinkResourceListResult) (ApplicationGatewayPrivateLinkResourceListResult, error)
                agplrlr ApplicationGatewayPrivateLinkResourceListResult
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * ApplicationGatewayPrivateLinkResourceListResultPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ApplicationGatewayPrivateLinkResourceListResultPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        for {
        next, err := page.fn(ctx, page.agplrlr)
        if err != nil {
        return err
        }
        page.agplrlr = next
        if !next.hasNextLink() || !next.IsEmpty() {
        break
        }
        }
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * ApplicationGatewayPrivateLinkResourceListResultPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page ApplicationGatewayPrivateLinkResourceListResultPage) NotDone() bool {
        return !page.agplrlr.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page ApplicationGatewayPrivateLinkResourceListResultPage) Response() ApplicationGatewayPrivateLinkResourceListResult {
        return page.agplrlr
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page ApplicationGatewayPrivateLinkResourceListResultPage) Values() []ApplicationGatewayPrivateLinkResource {
        if page.agplrlr.IsEmpty() {
        return nil
        }
        return *page.agplrlr.Value
        }
        // Creates a new instance of the ApplicationGatewayPrivateLinkResourceListResultPage type.
        func NewApplicationGatewayPrivateLinkResourceListResultPage (cur ApplicationGatewayPrivateLinkResourceListResult, getNextPage func(context.Context, ApplicationGatewayPrivateLinkResourceListResult) (ApplicationGatewayPrivateLinkResourceListResult, error)) ApplicationGatewayPrivateLinkResourceListResultPage {
        return ApplicationGatewayPrivateLinkResourceListResultPage{
        fn: getNextPage,
        agplrlr: cur,
        }
        }

            // ApplicationGatewayPrivateLinkResourceProperties properties of a private link resource.
            type ApplicationGatewayPrivateLinkResourceProperties struct {
            // GroupID - READ-ONLY; Group identifier of private link resource.
            GroupID *string `json:"groupId,omitempty"`
            // RequiredMembers - READ-ONLY; Required member names of private link resource.
            RequiredMembers *[]string `json:"requiredMembers,omitempty"`
            // RequiredZoneNames - Required DNS zone names of the the private link resource.
            RequiredZoneNames *[]string `json:"requiredZoneNames,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayPrivateLinkResourceProperties.
        func (agplrp ApplicationGatewayPrivateLinkResourceProperties)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agplrp.RequiredZoneNames != nil) {
                objectMap["requiredZoneNames"] = agplrp.RequiredZoneNames
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayProbe probe of the application gateway.
            type ApplicationGatewayProbe struct {
            // ApplicationGatewayProbePropertiesFormat - Properties of the application gateway probe.
            *ApplicationGatewayProbePropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the probe that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayProbe.
        func (agp ApplicationGatewayProbe)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agp.ApplicationGatewayProbePropertiesFormat != nil) {
                objectMap["properties"] = agp.ApplicationGatewayProbePropertiesFormat
                }
                if(agp.Name != nil) {
                objectMap["name"] = agp.Name
                }
                if(agp.ID != nil) {
                objectMap["id"] = agp.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayProbe struct.
        func (agp *ApplicationGatewayProbe) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayProbePropertiesFormat ApplicationGatewayProbePropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayProbePropertiesFormat)
    if err != nil {
    return err
    }
        agp.ApplicationGatewayProbePropertiesFormat = &applicationGatewayProbePropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agp.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agp.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agp.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agp.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayProbeHealthResponseMatch application gateway probe health response match.
            type ApplicationGatewayProbeHealthResponseMatch struct {
            // Body - Body that must be contained in the health response. Default value is empty.
            Body *string `json:"body,omitempty"`
            // StatusCodes - Allowed ranges of healthy status codes. Default range of healthy status codes is 200-399.
            StatusCodes *[]string `json:"statusCodes,omitempty"`
            }

            // ApplicationGatewayProbePropertiesFormat properties of probe of an application gateway.
            type ApplicationGatewayProbePropertiesFormat struct {
            // Protocol - The protocol used for the probe. Possible values include: 'HTTP', 'HTTPS'
            Protocol ApplicationGatewayProtocol `json:"protocol,omitempty"`
            // Host - Host name to send the probe to.
            Host *string `json:"host,omitempty"`
            // Path - Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>.
            Path *string `json:"path,omitempty"`
            // Interval - The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.
            Interval *int32 `json:"interval,omitempty"`
            // Timeout - The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
            Timeout *int32 `json:"timeout,omitempty"`
            // UnhealthyThreshold - The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.
            UnhealthyThreshold *int32 `json:"unhealthyThreshold,omitempty"`
            // PickHostNameFromBackendHTTPSettings - Whether the host header should be picked from the backend http settings. Default value is false.
            PickHostNameFromBackendHTTPSettings *bool `json:"pickHostNameFromBackendHttpSettings,omitempty"`
            // MinServers - Minimum number of servers that are always marked healthy. Default value is 0.
            MinServers *int32 `json:"minServers,omitempty"`
            // Match - Criterion for classifying a healthy probe response.
            Match *ApplicationGatewayProbeHealthResponseMatch `json:"match,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the probe resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // Port - Custom port which will be used for probing the backend servers. The valid value ranges from 1 to 65535. In case not set, port from http settings will be used. This property is valid for Standard_v2 and WAF_v2 only.
            Port *int32 `json:"port,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayProbePropertiesFormat.
        func (agppf ApplicationGatewayProbePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agppf.Protocol != "") {
                objectMap["protocol"] = agppf.Protocol
                }
                if(agppf.Host != nil) {
                objectMap["host"] = agppf.Host
                }
                if(agppf.Path != nil) {
                objectMap["path"] = agppf.Path
                }
                if(agppf.Interval != nil) {
                objectMap["interval"] = agppf.Interval
                }
                if(agppf.Timeout != nil) {
                objectMap["timeout"] = agppf.Timeout
                }
                if(agppf.UnhealthyThreshold != nil) {
                objectMap["unhealthyThreshold"] = agppf.UnhealthyThreshold
                }
                if(agppf.PickHostNameFromBackendHTTPSettings != nil) {
                objectMap["pickHostNameFromBackendHttpSettings"] = agppf.PickHostNameFromBackendHTTPSettings
                }
                if(agppf.MinServers != nil) {
                objectMap["minServers"] = agppf.MinServers
                }
                if(agppf.Match != nil) {
                objectMap["match"] = agppf.Match
                }
                if(agppf.Port != nil) {
                objectMap["port"] = agppf.Port
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayPropertiesFormat properties of the application gateway.
            type ApplicationGatewayPropertiesFormat struct {
            // Sku - SKU of the application gateway resource.
            Sku *ApplicationGatewaySku `json:"sku,omitempty"`
            // SslPolicy - SSL policy of the application gateway resource.
            SslPolicy *ApplicationGatewaySslPolicy `json:"sslPolicy,omitempty"`
            // OperationalState - READ-ONLY; Operational state of the application gateway resource. Possible values include: 'Stopped', 'Starting', 'Running', 'Stopping'
            OperationalState ApplicationGatewayOperationalState `json:"operationalState,omitempty"`
            // GatewayIPConfigurations - Subnets of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            GatewayIPConfigurations *[]ApplicationGatewayIPConfiguration `json:"gatewayIPConfigurations,omitempty"`
            // AuthenticationCertificates - Authentication certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            AuthenticationCertificates *[]ApplicationGatewayAuthenticationCertificate `json:"authenticationCertificates,omitempty"`
            // TrustedRootCertificates - Trusted Root certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            TrustedRootCertificates *[]ApplicationGatewayTrustedRootCertificate `json:"trustedRootCertificates,omitempty"`
            // TrustedClientCertificates - Trusted client certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            TrustedClientCertificates *[]ApplicationGatewayTrustedClientCertificate `json:"trustedClientCertificates,omitempty"`
            // SslCertificates - SSL certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            SslCertificates *[]ApplicationGatewaySslCertificate `json:"sslCertificates,omitempty"`
            // FrontendIPConfigurations - Frontend IP addresses of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            FrontendIPConfigurations *[]ApplicationGatewayFrontendIPConfiguration `json:"frontendIPConfigurations,omitempty"`
            // FrontendPorts - Frontend ports of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            FrontendPorts *[]ApplicationGatewayFrontendPort `json:"frontendPorts,omitempty"`
            // Probes - Probes of the application gateway resource.
            Probes *[]ApplicationGatewayProbe `json:"probes,omitempty"`
            // BackendAddressPools - Backend address pool of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            BackendAddressPools *[]ApplicationGatewayBackendAddressPool `json:"backendAddressPools,omitempty"`
            // BackendHTTPSettingsCollection - Backend http settings of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            BackendHTTPSettingsCollection *[]ApplicationGatewayBackendHTTPSettings `json:"backendHttpSettingsCollection,omitempty"`
            // HTTPListeners - Http listeners of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            HTTPListeners *[]ApplicationGatewayHTTPListener `json:"httpListeners,omitempty"`
            // SslProfiles - SSL profiles of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            SslProfiles *[]ApplicationGatewaySslProfile `json:"sslProfiles,omitempty"`
            // URLPathMaps - URL path map of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            URLPathMaps *[]ApplicationGatewayURLPathMap `json:"urlPathMaps,omitempty"`
            // RequestRoutingRules - Request routing rules of the application gateway resource.
            RequestRoutingRules *[]ApplicationGatewayRequestRoutingRule `json:"requestRoutingRules,omitempty"`
            // RewriteRuleSets - Rewrite rules for the application gateway resource.
            RewriteRuleSets *[]ApplicationGatewayRewriteRuleSet `json:"rewriteRuleSets,omitempty"`
            // RedirectConfigurations - Redirect configurations of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
            RedirectConfigurations *[]ApplicationGatewayRedirectConfiguration `json:"redirectConfigurations,omitempty"`
            // WebApplicationFirewallConfiguration - Web application firewall configuration.
            WebApplicationFirewallConfiguration *ApplicationGatewayWebApplicationFirewallConfiguration `json:"webApplicationFirewallConfiguration,omitempty"`
            // FirewallPolicy - Reference to the FirewallPolicy resource.
            FirewallPolicy *SubResource `json:"firewallPolicy,omitempty"`
            // EnableHTTP2 - Whether HTTP2 is enabled on the application gateway resource.
            EnableHTTP2 *bool `json:"enableHttp2,omitempty"`
            // EnableFips - Whether FIPS is enabled on the application gateway resource.
            EnableFips *bool `json:"enableFips,omitempty"`
            // AutoscaleConfiguration - Autoscale Configuration.
            AutoscaleConfiguration *ApplicationGatewayAutoscaleConfiguration `json:"autoscaleConfiguration,omitempty"`
            // PrivateLinkConfigurations - PrivateLink configurations on application gateway.
            PrivateLinkConfigurations *[]ApplicationGatewayPrivateLinkConfiguration `json:"privateLinkConfigurations,omitempty"`
            // PrivateEndpointConnections - READ-ONLY; Private Endpoint connections on application gateway.
            PrivateEndpointConnections *[]ApplicationGatewayPrivateEndpointConnection `json:"privateEndpointConnections,omitempty"`
            // ResourceGUID - READ-ONLY; The resource GUID property of the application gateway resource.
            ResourceGUID *string `json:"resourceGuid,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the application gateway resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // CustomErrorConfigurations - Custom error configurations of the application gateway resource.
            CustomErrorConfigurations *[]ApplicationGatewayCustomError `json:"customErrorConfigurations,omitempty"`
            // ForceFirewallPolicyAssociation - If true, associates a firewall policy with an application gateway regardless whether the policy differs from the WAF Config.
            ForceFirewallPolicyAssociation *bool `json:"forceFirewallPolicyAssociation,omitempty"`
            // LoadDistributionPolicies - Load distribution policies of the application gateway resource.
            LoadDistributionPolicies *[]ApplicationGatewayLoadDistributionPolicy `json:"loadDistributionPolicies,omitempty"`
            // GlobalConfiguration - Global Configuration.
            GlobalConfiguration *ApplicationGatewayGlobalConfiguration `json:"globalConfiguration,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayPropertiesFormat.
        func (agpf ApplicationGatewayPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agpf.Sku != nil) {
                objectMap["sku"] = agpf.Sku
                }
                if(agpf.SslPolicy != nil) {
                objectMap["sslPolicy"] = agpf.SslPolicy
                }
                if(agpf.GatewayIPConfigurations != nil) {
                objectMap["gatewayIPConfigurations"] = agpf.GatewayIPConfigurations
                }
                if(agpf.AuthenticationCertificates != nil) {
                objectMap["authenticationCertificates"] = agpf.AuthenticationCertificates
                }
                if(agpf.TrustedRootCertificates != nil) {
                objectMap["trustedRootCertificates"] = agpf.TrustedRootCertificates
                }
                if(agpf.TrustedClientCertificates != nil) {
                objectMap["trustedClientCertificates"] = agpf.TrustedClientCertificates
                }
                if(agpf.SslCertificates != nil) {
                objectMap["sslCertificates"] = agpf.SslCertificates
                }
                if(agpf.FrontendIPConfigurations != nil) {
                objectMap["frontendIPConfigurations"] = agpf.FrontendIPConfigurations
                }
                if(agpf.FrontendPorts != nil) {
                objectMap["frontendPorts"] = agpf.FrontendPorts
                }
                if(agpf.Probes != nil) {
                objectMap["probes"] = agpf.Probes
                }
                if(agpf.BackendAddressPools != nil) {
                objectMap["backendAddressPools"] = agpf.BackendAddressPools
                }
                if(agpf.BackendHTTPSettingsCollection != nil) {
                objectMap["backendHttpSettingsCollection"] = agpf.BackendHTTPSettingsCollection
                }
                if(agpf.HTTPListeners != nil) {
                objectMap["httpListeners"] = agpf.HTTPListeners
                }
                if(agpf.SslProfiles != nil) {
                objectMap["sslProfiles"] = agpf.SslProfiles
                }
                if(agpf.URLPathMaps != nil) {
                objectMap["urlPathMaps"] = agpf.URLPathMaps
                }
                if(agpf.RequestRoutingRules != nil) {
                objectMap["requestRoutingRules"] = agpf.RequestRoutingRules
                }
                if(agpf.RewriteRuleSets != nil) {
                objectMap["rewriteRuleSets"] = agpf.RewriteRuleSets
                }
                if(agpf.RedirectConfigurations != nil) {
                objectMap["redirectConfigurations"] = agpf.RedirectConfigurations
                }
                if(agpf.WebApplicationFirewallConfiguration != nil) {
                objectMap["webApplicationFirewallConfiguration"] = agpf.WebApplicationFirewallConfiguration
                }
                if(agpf.FirewallPolicy != nil) {
                objectMap["firewallPolicy"] = agpf.FirewallPolicy
                }
                if(agpf.EnableHTTP2 != nil) {
                objectMap["enableHttp2"] = agpf.EnableHTTP2
                }
                if(agpf.EnableFips != nil) {
                objectMap["enableFips"] = agpf.EnableFips
                }
                if(agpf.AutoscaleConfiguration != nil) {
                objectMap["autoscaleConfiguration"] = agpf.AutoscaleConfiguration
                }
                if(agpf.PrivateLinkConfigurations != nil) {
                objectMap["privateLinkConfigurations"] = agpf.PrivateLinkConfigurations
                }
                if(agpf.CustomErrorConfigurations != nil) {
                objectMap["customErrorConfigurations"] = agpf.CustomErrorConfigurations
                }
                if(agpf.ForceFirewallPolicyAssociation != nil) {
                objectMap["forceFirewallPolicyAssociation"] = agpf.ForceFirewallPolicyAssociation
                }
                if(agpf.LoadDistributionPolicies != nil) {
                objectMap["loadDistributionPolicies"] = agpf.LoadDistributionPolicies
                }
                if(agpf.GlobalConfiguration != nil) {
                objectMap["globalConfiguration"] = agpf.GlobalConfiguration
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayRedirectConfiguration redirect configuration of an application gateway.
            type ApplicationGatewayRedirectConfiguration struct {
            // ApplicationGatewayRedirectConfigurationPropertiesFormat - Properties of the application gateway redirect configuration.
            *ApplicationGatewayRedirectConfigurationPropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the redirect configuration that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayRedirectConfiguration.
        func (agrc ApplicationGatewayRedirectConfiguration)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agrc.ApplicationGatewayRedirectConfigurationPropertiesFormat != nil) {
                objectMap["properties"] = agrc.ApplicationGatewayRedirectConfigurationPropertiesFormat
                }
                if(agrc.Name != nil) {
                objectMap["name"] = agrc.Name
                }
                if(agrc.ID != nil) {
                objectMap["id"] = agrc.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayRedirectConfiguration struct.
        func (agrc *ApplicationGatewayRedirectConfiguration) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayRedirectConfigurationPropertiesFormat ApplicationGatewayRedirectConfigurationPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayRedirectConfigurationPropertiesFormat)
    if err != nil {
    return err
    }
        agrc.ApplicationGatewayRedirectConfigurationPropertiesFormat = &applicationGatewayRedirectConfigurationPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agrc.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agrc.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agrc.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agrc.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayRedirectConfigurationPropertiesFormat properties of redirect configuration of the
            // application gateway.
            type ApplicationGatewayRedirectConfigurationPropertiesFormat struct {
            // RedirectType - HTTP redirection type. Possible values include: 'Permanent', 'Found', 'SeeOther', 'Temporary'
            RedirectType ApplicationGatewayRedirectType `json:"redirectType,omitempty"`
            // TargetListener - Reference to a listener to redirect the request to.
            TargetListener *SubResource `json:"targetListener,omitempty"`
            // TargetURL - Url to redirect the request to.
            TargetURL *string `json:"targetUrl,omitempty"`
            // IncludePath - Include path in the redirected url.
            IncludePath *bool `json:"includePath,omitempty"`
            // IncludeQueryString - Include query string in the redirected url.
            IncludeQueryString *bool `json:"includeQueryString,omitempty"`
            // RequestRoutingRules - Request routing specifying redirect configuration.
            RequestRoutingRules *[]SubResource `json:"requestRoutingRules,omitempty"`
            // URLPathMaps - Url path maps specifying default redirect configuration.
            URLPathMaps *[]SubResource `json:"urlPathMaps,omitempty"`
            // PathRules - Path rules specifying redirect configuration.
            PathRules *[]SubResource `json:"pathRules,omitempty"`
            }

            // ApplicationGatewayRequestRoutingRule request routing rule of an application gateway.
            type ApplicationGatewayRequestRoutingRule struct {
            // ApplicationGatewayRequestRoutingRulePropertiesFormat - Properties of the application gateway request routing rule.
            *ApplicationGatewayRequestRoutingRulePropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the request routing rule that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayRequestRoutingRule.
        func (agrrr ApplicationGatewayRequestRoutingRule)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agrrr.ApplicationGatewayRequestRoutingRulePropertiesFormat != nil) {
                objectMap["properties"] = agrrr.ApplicationGatewayRequestRoutingRulePropertiesFormat
                }
                if(agrrr.Name != nil) {
                objectMap["name"] = agrrr.Name
                }
                if(agrrr.ID != nil) {
                objectMap["id"] = agrrr.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayRequestRoutingRule struct.
        func (agrrr *ApplicationGatewayRequestRoutingRule) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayRequestRoutingRulePropertiesFormat ApplicationGatewayRequestRoutingRulePropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayRequestRoutingRulePropertiesFormat)
    if err != nil {
    return err
    }
        agrrr.ApplicationGatewayRequestRoutingRulePropertiesFormat = &applicationGatewayRequestRoutingRulePropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agrrr.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agrrr.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agrrr.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agrrr.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayRequestRoutingRulePropertiesFormat properties of request routing rule of the
            // application gateway.
            type ApplicationGatewayRequestRoutingRulePropertiesFormat struct {
            // RuleType - Rule type. Possible values include: 'Basic', 'PathBasedRouting'
            RuleType ApplicationGatewayRequestRoutingRuleType `json:"ruleType,omitempty"`
            // Priority - Priority of the request routing rule.
            Priority *int32 `json:"priority,omitempty"`
            // BackendAddressPool - Backend address pool resource of the application gateway.
            BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`
            // BackendHTTPSettings - Backend http settings resource of the application gateway.
            BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`
            // HTTPListener - Http listener resource of the application gateway.
            HTTPListener *SubResource `json:"httpListener,omitempty"`
            // URLPathMap - URL path map resource of the application gateway.
            URLPathMap *SubResource `json:"urlPathMap,omitempty"`
            // RewriteRuleSet - Rewrite Rule Set resource in Basic rule of the application gateway.
            RewriteRuleSet *SubResource `json:"rewriteRuleSet,omitempty"`
            // RedirectConfiguration - Redirect configuration resource of the application gateway.
            RedirectConfiguration *SubResource `json:"redirectConfiguration,omitempty"`
            // LoadDistributionPolicy - Load Distribution Policy resource of the application gateway.
            LoadDistributionPolicy *SubResource `json:"loadDistributionPolicy,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the request routing rule resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayRequestRoutingRulePropertiesFormat.
        func (agrrrpf ApplicationGatewayRequestRoutingRulePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agrrrpf.RuleType != "") {
                objectMap["ruleType"] = agrrrpf.RuleType
                }
                if(agrrrpf.Priority != nil) {
                objectMap["priority"] = agrrrpf.Priority
                }
                if(agrrrpf.BackendAddressPool != nil) {
                objectMap["backendAddressPool"] = agrrrpf.BackendAddressPool
                }
                if(agrrrpf.BackendHTTPSettings != nil) {
                objectMap["backendHttpSettings"] = agrrrpf.BackendHTTPSettings
                }
                if(agrrrpf.HTTPListener != nil) {
                objectMap["httpListener"] = agrrrpf.HTTPListener
                }
                if(agrrrpf.URLPathMap != nil) {
                objectMap["urlPathMap"] = agrrrpf.URLPathMap
                }
                if(agrrrpf.RewriteRuleSet != nil) {
                objectMap["rewriteRuleSet"] = agrrrpf.RewriteRuleSet
                }
                if(agrrrpf.RedirectConfiguration != nil) {
                objectMap["redirectConfiguration"] = agrrrpf.RedirectConfiguration
                }
                if(agrrrpf.LoadDistributionPolicy != nil) {
                objectMap["loadDistributionPolicy"] = agrrrpf.LoadDistributionPolicy
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayRewriteRule rewrite rule of an application gateway.
            type ApplicationGatewayRewriteRule struct {
            // Name - Name of the rewrite rule that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // RuleSequence - Rule Sequence of the rewrite rule that determines the order of execution of a particular rule in a RewriteRuleSet.
            RuleSequence *int32 `json:"ruleSequence,omitempty"`
            // Conditions - Conditions based on which the action set execution will be evaluated.
            Conditions *[]ApplicationGatewayRewriteRuleCondition `json:"conditions,omitempty"`
            // ActionSet - Set of actions to be done as part of the rewrite Rule.
            ActionSet *ApplicationGatewayRewriteRuleActionSet `json:"actionSet,omitempty"`
            }

            // ApplicationGatewayRewriteRuleActionSet set of actions in the Rewrite Rule in Application Gateway.
            type ApplicationGatewayRewriteRuleActionSet struct {
            // RequestHeaderConfigurations - Request Header Actions in the Action Set.
            RequestHeaderConfigurations *[]ApplicationGatewayHeaderConfiguration `json:"requestHeaderConfigurations,omitempty"`
            // ResponseHeaderConfigurations - Response Header Actions in the Action Set.
            ResponseHeaderConfigurations *[]ApplicationGatewayHeaderConfiguration `json:"responseHeaderConfigurations,omitempty"`
            // URLConfiguration - Url Configuration Action in the Action Set.
            URLConfiguration *ApplicationGatewayURLConfiguration `json:"urlConfiguration,omitempty"`
            }

            // ApplicationGatewayRewriteRuleCondition set of conditions in the Rewrite Rule in Application Gateway.
            type ApplicationGatewayRewriteRuleCondition struct {
            // Variable - The condition parameter of the RewriteRuleCondition.
            Variable *string `json:"variable,omitempty"`
            // Pattern - The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
            Pattern *string `json:"pattern,omitempty"`
            // IgnoreCase - Setting this parameter to truth value with force the pattern to do a case in-sensitive comparison.
            IgnoreCase *bool `json:"ignoreCase,omitempty"`
            // Negate - Setting this value as truth will force to check the negation of the condition given by the user.
            Negate *bool `json:"negate,omitempty"`
            }

            // ApplicationGatewayRewriteRuleSet rewrite rule set of an application gateway.
            type ApplicationGatewayRewriteRuleSet struct {
            // ApplicationGatewayRewriteRuleSetPropertiesFormat - Properties of the application gateway rewrite rule set.
            *ApplicationGatewayRewriteRuleSetPropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the rewrite rule set that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayRewriteRuleSet.
        func (agrrs ApplicationGatewayRewriteRuleSet)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agrrs.ApplicationGatewayRewriteRuleSetPropertiesFormat != nil) {
                objectMap["properties"] = agrrs.ApplicationGatewayRewriteRuleSetPropertiesFormat
                }
                if(agrrs.Name != nil) {
                objectMap["name"] = agrrs.Name
                }
                if(agrrs.ID != nil) {
                objectMap["id"] = agrrs.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayRewriteRuleSet struct.
        func (agrrs *ApplicationGatewayRewriteRuleSet) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayRewriteRuleSetPropertiesFormat ApplicationGatewayRewriteRuleSetPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayRewriteRuleSetPropertiesFormat)
    if err != nil {
    return err
    }
        agrrs.ApplicationGatewayRewriteRuleSetPropertiesFormat = &applicationGatewayRewriteRuleSetPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agrrs.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agrrs.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agrrs.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayRewriteRuleSetPropertiesFormat properties of rewrite rule set of the application
            // gateway.
            type ApplicationGatewayRewriteRuleSetPropertiesFormat struct {
            // RewriteRules - Rewrite rules in the rewrite rule set.
            RewriteRules *[]ApplicationGatewayRewriteRule `json:"rewriteRules,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the rewrite rule set resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayRewriteRuleSetPropertiesFormat.
        func (agrrspf ApplicationGatewayRewriteRuleSetPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agrrspf.RewriteRules != nil) {
                objectMap["rewriteRules"] = agrrspf.RewriteRules
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewaySku SKU of an application gateway.
            type ApplicationGatewaySku struct {
            // Name - Name of an application gateway SKU. Possible values include: 'StandardSmall', 'StandardMedium', 'StandardLarge', 'WAFMedium', 'WAFLarge', 'StandardV2', 'WAFV2'
            Name ApplicationGatewaySkuName `json:"name,omitempty"`
            // Tier - Tier of an application gateway. Possible values include: 'ApplicationGatewayTierStandard', 'ApplicationGatewayTierWAF', 'ApplicationGatewayTierStandardV2', 'ApplicationGatewayTierWAFV2'
            Tier ApplicationGatewayTier `json:"tier,omitempty"`
            // Capacity - Capacity (instance count) of an application gateway.
            Capacity *int32 `json:"capacity,omitempty"`
            }

            // ApplicationGatewaySslCertificate SSL certificates of an application gateway.
            type ApplicationGatewaySslCertificate struct {
            // ApplicationGatewaySslCertificatePropertiesFormat - Properties of the application gateway SSL certificate.
            *ApplicationGatewaySslCertificatePropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the SSL certificate that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewaySslCertificate.
        func (agsc ApplicationGatewaySslCertificate)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agsc.ApplicationGatewaySslCertificatePropertiesFormat != nil) {
                objectMap["properties"] = agsc.ApplicationGatewaySslCertificatePropertiesFormat
                }
                if(agsc.Name != nil) {
                objectMap["name"] = agsc.Name
                }
                if(agsc.ID != nil) {
                objectMap["id"] = agsc.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewaySslCertificate struct.
        func (agsc *ApplicationGatewaySslCertificate) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewaySslCertificatePropertiesFormat ApplicationGatewaySslCertificatePropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewaySslCertificatePropertiesFormat)
    if err != nil {
    return err
    }
        agsc.ApplicationGatewaySslCertificatePropertiesFormat = &applicationGatewaySslCertificatePropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agsc.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agsc.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agsc.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agsc.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewaySslCertificatePropertiesFormat properties of SSL certificates of an application
            // gateway.
            type ApplicationGatewaySslCertificatePropertiesFormat struct {
            // Data - Base-64 encoded pfx certificate. Only applicable in PUT Request.
            Data *string `json:"data,omitempty"`
            // Password - Password for the pfx file specified in data. Only applicable in PUT request.
            Password *string `json:"password,omitempty"`
            // PublicCertData - READ-ONLY; Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in GET request.
            PublicCertData *string `json:"publicCertData,omitempty"`
            // KeyVaultSecretID - Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
            KeyVaultSecretID *string `json:"keyVaultSecretId,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the SSL certificate resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewaySslCertificatePropertiesFormat.
        func (agscpf ApplicationGatewaySslCertificatePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agscpf.Data != nil) {
                objectMap["data"] = agscpf.Data
                }
                if(agscpf.Password != nil) {
                objectMap["password"] = agscpf.Password
                }
                if(agscpf.KeyVaultSecretID != nil) {
                objectMap["keyVaultSecretId"] = agscpf.KeyVaultSecretID
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewaySslPolicy application Gateway Ssl policy.
            type ApplicationGatewaySslPolicy struct {
            // DisabledSslProtocols - Ssl protocols to be disabled on application gateway.
            DisabledSslProtocols *[]ApplicationGatewaySslProtocol `json:"disabledSslProtocols,omitempty"`
            // PolicyType - Type of Ssl Policy. Possible values include: 'Predefined', 'Custom'
            PolicyType ApplicationGatewaySslPolicyType `json:"policyType,omitempty"`
            // PolicyName - Name of Ssl predefined policy. Possible values include: 'AppGwSslPolicy20150501', 'AppGwSslPolicy20170401', 'AppGwSslPolicy20170401S'
            PolicyName ApplicationGatewaySslPolicyName `json:"policyName,omitempty"`
            // CipherSuites - Ssl cipher suites to be enabled in the specified order to application gateway.
            CipherSuites *[]ApplicationGatewaySslCipherSuite `json:"cipherSuites,omitempty"`
            // MinProtocolVersion - Minimum version of Ssl protocol to be supported on application gateway. Possible values include: 'TLSv10', 'TLSv11', 'TLSv12'
            MinProtocolVersion ApplicationGatewaySslProtocol `json:"minProtocolVersion,omitempty"`
            }

            // ApplicationGatewaySslPredefinedPolicy an Ssl predefined policy.
            type ApplicationGatewaySslPredefinedPolicy struct {
            autorest.Response `json:"-"`
            // Name - Name of the Ssl predefined policy.
            Name *string `json:"name,omitempty"`
            // ApplicationGatewaySslPredefinedPolicyPropertiesFormat - Properties of the application gateway SSL predefined policy.
            *ApplicationGatewaySslPredefinedPolicyPropertiesFormat `json:"properties,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewaySslPredefinedPolicy.
        func (agspp ApplicationGatewaySslPredefinedPolicy)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agspp.Name != nil) {
                objectMap["name"] = agspp.Name
                }
                if(agspp.ApplicationGatewaySslPredefinedPolicyPropertiesFormat != nil) {
                objectMap["properties"] = agspp.ApplicationGatewaySslPredefinedPolicyPropertiesFormat
                }
                if(agspp.ID != nil) {
                objectMap["id"] = agspp.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewaySslPredefinedPolicy struct.
        func (agspp *ApplicationGatewaySslPredefinedPolicy) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agspp.Name = &name
    }
                case "properties":
    if v != nil {
        var applicationGatewaySslPredefinedPolicyPropertiesFormat ApplicationGatewaySslPredefinedPolicyPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewaySslPredefinedPolicyPropertiesFormat)
    if err != nil {
    return err
    }
        agspp.ApplicationGatewaySslPredefinedPolicyPropertiesFormat = &applicationGatewaySslPredefinedPolicyPropertiesFormat
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agspp.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewaySslPredefinedPolicyPropertiesFormat properties of
            // ApplicationGatewaySslPredefinedPolicy.
            type ApplicationGatewaySslPredefinedPolicyPropertiesFormat struct {
            // CipherSuites - Ssl cipher suites to be enabled in the specified order for application gateway.
            CipherSuites *[]ApplicationGatewaySslCipherSuite `json:"cipherSuites,omitempty"`
            // MinProtocolVersion - Minimum version of Ssl protocol to be supported on application gateway. Possible values include: 'TLSv10', 'TLSv11', 'TLSv12'
            MinProtocolVersion ApplicationGatewaySslProtocol `json:"minProtocolVersion,omitempty"`
            }

            // ApplicationGatewaySslProfile SSL profile of an application gateway.
            type ApplicationGatewaySslProfile struct {
            // ApplicationGatewaySslProfilePropertiesFormat - Properties of the application gateway SSL profile.
            *ApplicationGatewaySslProfilePropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the SSL profile that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewaySslProfile.
        func (agsp ApplicationGatewaySslProfile)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agsp.ApplicationGatewaySslProfilePropertiesFormat != nil) {
                objectMap["properties"] = agsp.ApplicationGatewaySslProfilePropertiesFormat
                }
                if(agsp.Name != nil) {
                objectMap["name"] = agsp.Name
                }
                if(agsp.ID != nil) {
                objectMap["id"] = agsp.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewaySslProfile struct.
        func (agsp *ApplicationGatewaySslProfile) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewaySslProfilePropertiesFormat ApplicationGatewaySslProfilePropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewaySslProfilePropertiesFormat)
    if err != nil {
    return err
    }
        agsp.ApplicationGatewaySslProfilePropertiesFormat = &applicationGatewaySslProfilePropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agsp.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agsp.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agsp.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agsp.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewaySslProfilePropertiesFormat properties of SSL profile of an application gateway.
            type ApplicationGatewaySslProfilePropertiesFormat struct {
            // TrustedClientCertificates - Array of references to application gateway trusted client certificates.
            TrustedClientCertificates *[]SubResource `json:"trustedClientCertificates,omitempty"`
            // SslPolicy - SSL policy of the application gateway resource.
            SslPolicy *ApplicationGatewaySslPolicy `json:"sslPolicy,omitempty"`
            // ClientAuthConfiguration - Client authentication configuration of the application gateway resource.
            ClientAuthConfiguration *ApplicationGatewayClientAuthConfiguration `json:"clientAuthConfiguration,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the HTTP listener resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewaySslProfilePropertiesFormat.
        func (agsppf ApplicationGatewaySslProfilePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agsppf.TrustedClientCertificates != nil) {
                objectMap["trustedClientCertificates"] = agsppf.TrustedClientCertificates
                }
                if(agsppf.SslPolicy != nil) {
                objectMap["sslPolicy"] = agsppf.SslPolicy
                }
                if(agsppf.ClientAuthConfiguration != nil) {
                objectMap["clientAuthConfiguration"] = agsppf.ClientAuthConfiguration
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayTrustedClientCertificate trusted client certificates of an application gateway.
            type ApplicationGatewayTrustedClientCertificate struct {
            // ApplicationGatewayTrustedClientCertificatePropertiesFormat - Properties of the application gateway trusted client certificate.
            *ApplicationGatewayTrustedClientCertificatePropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the trusted client certificate that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayTrustedClientCertificate.
        func (agtcc ApplicationGatewayTrustedClientCertificate)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agtcc.ApplicationGatewayTrustedClientCertificatePropertiesFormat != nil) {
                objectMap["properties"] = agtcc.ApplicationGatewayTrustedClientCertificatePropertiesFormat
                }
                if(agtcc.Name != nil) {
                objectMap["name"] = agtcc.Name
                }
                if(agtcc.ID != nil) {
                objectMap["id"] = agtcc.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayTrustedClientCertificate struct.
        func (agtcc *ApplicationGatewayTrustedClientCertificate) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayTrustedClientCertificatePropertiesFormat ApplicationGatewayTrustedClientCertificatePropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayTrustedClientCertificatePropertiesFormat)
    if err != nil {
    return err
    }
        agtcc.ApplicationGatewayTrustedClientCertificatePropertiesFormat = &applicationGatewayTrustedClientCertificatePropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agtcc.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agtcc.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agtcc.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agtcc.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayTrustedClientCertificatePropertiesFormat trusted client certificates properties of an
            // application gateway.
            type ApplicationGatewayTrustedClientCertificatePropertiesFormat struct {
            // Data - Certificate public data.
            Data *string `json:"data,omitempty"`
            // ValidatedCertData - READ-ONLY; Validated certificate data.
            ValidatedCertData *string `json:"validatedCertData,omitempty"`
            // ClientCertIssuerDN - READ-ONLY; Distinguished name of client certificate issuer.
            ClientCertIssuerDN *string `json:"clientCertIssuerDN,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the trusted client certificate resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayTrustedClientCertificatePropertiesFormat.
        func (agtccpf ApplicationGatewayTrustedClientCertificatePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agtccpf.Data != nil) {
                objectMap["data"] = agtccpf.Data
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayTrustedRootCertificate trusted Root certificates of an application gateway.
            type ApplicationGatewayTrustedRootCertificate struct {
            // ApplicationGatewayTrustedRootCertificatePropertiesFormat - Properties of the application gateway trusted root certificate.
            *ApplicationGatewayTrustedRootCertificatePropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the trusted root certificate that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayTrustedRootCertificate.
        func (agtrc ApplicationGatewayTrustedRootCertificate)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agtrc.ApplicationGatewayTrustedRootCertificatePropertiesFormat != nil) {
                objectMap["properties"] = agtrc.ApplicationGatewayTrustedRootCertificatePropertiesFormat
                }
                if(agtrc.Name != nil) {
                objectMap["name"] = agtrc.Name
                }
                if(agtrc.ID != nil) {
                objectMap["id"] = agtrc.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayTrustedRootCertificate struct.
        func (agtrc *ApplicationGatewayTrustedRootCertificate) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayTrustedRootCertificatePropertiesFormat ApplicationGatewayTrustedRootCertificatePropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayTrustedRootCertificatePropertiesFormat)
    if err != nil {
    return err
    }
        agtrc.ApplicationGatewayTrustedRootCertificatePropertiesFormat = &applicationGatewayTrustedRootCertificatePropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agtrc.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agtrc.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agtrc.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agtrc.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayTrustedRootCertificatePropertiesFormat trusted Root certificates properties of an
            // application gateway.
            type ApplicationGatewayTrustedRootCertificatePropertiesFormat struct {
            // Data - Certificate public data.
            Data *string `json:"data,omitempty"`
            // KeyVaultSecretID - Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
            KeyVaultSecretID *string `json:"keyVaultSecretId,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the trusted root certificate resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayTrustedRootCertificatePropertiesFormat.
        func (agtrcpf ApplicationGatewayTrustedRootCertificatePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agtrcpf.Data != nil) {
                objectMap["data"] = agtrcpf.Data
                }
                if(agtrcpf.KeyVaultSecretID != nil) {
                objectMap["keyVaultSecretId"] = agtrcpf.KeyVaultSecretID
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayURLConfiguration url configuration of the Actions set in Application Gateway.
            type ApplicationGatewayURLConfiguration struct {
            // ModifiedPath - Url path which user has provided for url rewrite. Null means no path will be updated. Default value is null.
            ModifiedPath *string `json:"modifiedPath,omitempty"`
            // ModifiedQueryString - Query string which user has provided for url rewrite. Null means no query string will be updated. Default value is null.
            ModifiedQueryString *string `json:"modifiedQueryString,omitempty"`
            // Reroute - If set as true, it will re-evaluate the url path map provided in path based request routing rules using modified path. Default value is false.
            Reroute *bool `json:"reroute,omitempty"`
            }

            // ApplicationGatewayURLPathMap urlPathMaps give a url path to the backend mapping information for
            // PathBasedRouting.
            type ApplicationGatewayURLPathMap struct {
            // ApplicationGatewayURLPathMapPropertiesFormat - Properties of the application gateway URL path map.
            *ApplicationGatewayURLPathMapPropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the URL path map that is unique within an Application Gateway.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayURLPathMap.
        func (agupm ApplicationGatewayURLPathMap)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agupm.ApplicationGatewayURLPathMapPropertiesFormat != nil) {
                objectMap["properties"] = agupm.ApplicationGatewayURLPathMapPropertiesFormat
                }
                if(agupm.Name != nil) {
                objectMap["name"] = agupm.Name
                }
                if(agupm.ID != nil) {
                objectMap["id"] = agupm.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationGatewayURLPathMap struct.
        func (agupm *ApplicationGatewayURLPathMap) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationGatewayURLPathMapPropertiesFormat ApplicationGatewayURLPathMapPropertiesFormat
        err = json.Unmarshal(*v, &applicationGatewayURLPathMapPropertiesFormat)
    if err != nil {
    return err
    }
        agupm.ApplicationGatewayURLPathMapPropertiesFormat = &applicationGatewayURLPathMapPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        agupm.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        agupm.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        agupm.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        agupm.ID = &ID
    }
            }
        }

        return nil
        }

            // ApplicationGatewayURLPathMapPropertiesFormat properties of UrlPathMap of the application gateway.
            type ApplicationGatewayURLPathMapPropertiesFormat struct {
            // DefaultBackendAddressPool - Default backend address pool resource of URL path map.
            DefaultBackendAddressPool *SubResource `json:"defaultBackendAddressPool,omitempty"`
            // DefaultBackendHTTPSettings - Default backend http settings resource of URL path map.
            DefaultBackendHTTPSettings *SubResource `json:"defaultBackendHttpSettings,omitempty"`
            // DefaultRewriteRuleSet - Default Rewrite rule set resource of URL path map.
            DefaultRewriteRuleSet *SubResource `json:"defaultRewriteRuleSet,omitempty"`
            // DefaultRedirectConfiguration - Default redirect configuration resource of URL path map.
            DefaultRedirectConfiguration *SubResource `json:"defaultRedirectConfiguration,omitempty"`
            // DefaultLoadDistributionPolicy - Default Load Distribution Policy resource of URL path map.
            DefaultLoadDistributionPolicy *SubResource `json:"defaultLoadDistributionPolicy,omitempty"`
            // PathRules - Path rule of URL path map resource.
            PathRules *[]ApplicationGatewayPathRule `json:"pathRules,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the URL path map resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationGatewayURLPathMapPropertiesFormat.
        func (agupmpf ApplicationGatewayURLPathMapPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(agupmpf.DefaultBackendAddressPool != nil) {
                objectMap["defaultBackendAddressPool"] = agupmpf.DefaultBackendAddressPool
                }
                if(agupmpf.DefaultBackendHTTPSettings != nil) {
                objectMap["defaultBackendHttpSettings"] = agupmpf.DefaultBackendHTTPSettings
                }
                if(agupmpf.DefaultRewriteRuleSet != nil) {
                objectMap["defaultRewriteRuleSet"] = agupmpf.DefaultRewriteRuleSet
                }
                if(agupmpf.DefaultRedirectConfiguration != nil) {
                objectMap["defaultRedirectConfiguration"] = agupmpf.DefaultRedirectConfiguration
                }
                if(agupmpf.DefaultLoadDistributionPolicy != nil) {
                objectMap["defaultLoadDistributionPolicy"] = agupmpf.DefaultLoadDistributionPolicy
                }
                if(agupmpf.PathRules != nil) {
                objectMap["pathRules"] = agupmpf.PathRules
                }
                return json.Marshal(objectMap)
        }

            // ApplicationGatewayWebApplicationFirewallConfiguration application gateway web application firewall
            // configuration.
            type ApplicationGatewayWebApplicationFirewallConfiguration struct {
            // Enabled - Whether the web application firewall is enabled or not.
            Enabled *bool `json:"enabled,omitempty"`
            // FirewallMode - Web application firewall mode. Possible values include: 'Detection', 'Prevention'
            FirewallMode ApplicationGatewayFirewallMode `json:"firewallMode,omitempty"`
            // RuleSetType - The type of the web application firewall rule set. Possible values are: 'OWASP'.
            RuleSetType *string `json:"ruleSetType,omitempty"`
            // RuleSetVersion - The version of the rule set type.
            RuleSetVersion *string `json:"ruleSetVersion,omitempty"`
            // DisabledRuleGroups - The disabled rule groups.
            DisabledRuleGroups *[]ApplicationGatewayFirewallDisabledRuleGroup `json:"disabledRuleGroups,omitempty"`
            // RequestBodyCheck - Whether allow WAF to check request Body.
            RequestBodyCheck *bool `json:"requestBodyCheck,omitempty"`
            // MaxRequestBodySize - Maximum request body size for WAF.
            MaxRequestBodySize *int32 `json:"maxRequestBodySize,omitempty"`
            // MaxRequestBodySizeInKb - Maximum request body size in Kb for WAF.
            MaxRequestBodySizeInKb *int32 `json:"maxRequestBodySizeInKb,omitempty"`
            // FileUploadLimitInMb - Maximum file upload size in Mb for WAF.
            FileUploadLimitInMb *int32 `json:"fileUploadLimitInMb,omitempty"`
            // Exclusions - The exclusion list.
            Exclusions *[]ApplicationGatewayFirewallExclusion `json:"exclusions,omitempty"`
            }

            // ApplicationGatewaysBackendHealthFuture an abstraction for monitoring and retrieving the results of a
            // long-running operation.
            type ApplicationGatewaysBackendHealthFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(ApplicationGatewaysClient) (ApplicationGatewayBackendHealth, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *ApplicationGatewaysBackendHealthFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for ApplicationGatewaysBackendHealthFuture.Result.
        func (future *ApplicationGatewaysBackendHealthFuture) result(client ApplicationGatewaysClient) (agbh ApplicationGatewayBackendHealth, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.ApplicationGatewaysBackendHealthFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    agbh.Response.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.ApplicationGatewaysBackendHealthFuture")
                return
            }
            sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if agbh.Response.Response, err = future.GetResult(sender); err == nil && agbh.Response.Response.StatusCode != http.StatusNoContent {
            agbh, err = client.BackendHealthResponder(agbh.Response.Response)
            if err != nil {
            err = autorest.NewErrorWithError(err, "network.ApplicationGatewaysBackendHealthFuture", "Result", agbh.Response.Response, "Failure responding to request")
            }
            }
            return
        }

            // ApplicationGatewaysBackendHealthOnDemandFuture an abstraction for monitoring and retrieving the results
            // of a long-running operation.
            type ApplicationGatewaysBackendHealthOnDemandFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(ApplicationGatewaysClient) (ApplicationGatewayBackendHealthOnDemand, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *ApplicationGatewaysBackendHealthOnDemandFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for ApplicationGatewaysBackendHealthOnDemandFuture.Result.
        func (future *ApplicationGatewaysBackendHealthOnDemandFuture) result(client ApplicationGatewaysClient) (agbhod ApplicationGatewayBackendHealthOnDemand, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.ApplicationGatewaysBackendHealthOnDemandFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    agbhod.Response.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.ApplicationGatewaysBackendHealthOnDemandFuture")
                return
            }
            sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if agbhod.Response.Response, err = future.GetResult(sender); err == nil && agbhod.Response.Response.StatusCode != http.StatusNoContent {
            agbhod, err = client.BackendHealthOnDemandResponder(agbhod.Response.Response)
            if err != nil {
            err = autorest.NewErrorWithError(err, "network.ApplicationGatewaysBackendHealthOnDemandFuture", "Result", agbhod.Response.Response, "Failure responding to request")
            }
            }
            return
        }

            // ApplicationGatewaysCreateOrUpdateFuture an abstraction for monitoring and retrieving the results of a
            // long-running operation.
            type ApplicationGatewaysCreateOrUpdateFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(ApplicationGatewaysClient) (ApplicationGateway, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *ApplicationGatewaysCreateOrUpdateFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for ApplicationGatewaysCreateOrUpdateFuture.Result.
        func (future *ApplicationGatewaysCreateOrUpdateFuture) result(client ApplicationGatewaysClient) (ag ApplicationGateway, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.ApplicationGatewaysCreateOrUpdateFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ag.Response.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.ApplicationGatewaysCreateOrUpdateFuture")
                return
            }
            sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if ag.Response.Response, err = future.GetResult(sender); err == nil && ag.Response.Response.StatusCode != http.StatusNoContent {
            ag, err = client.CreateOrUpdateResponder(ag.Response.Response)
            if err != nil {
            err = autorest.NewErrorWithError(err, "network.ApplicationGatewaysCreateOrUpdateFuture", "Result", ag.Response.Response, "Failure responding to request")
            }
            }
            return
        }

            // ApplicationGatewaysDeleteFuture an abstraction for monitoring and retrieving the results of a
            // long-running operation.
            type ApplicationGatewaysDeleteFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(ApplicationGatewaysClient) (autorest.Response, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *ApplicationGatewaysDeleteFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for ApplicationGatewaysDeleteFuture.Result.
        func (future *ApplicationGatewaysDeleteFuture) result(client ApplicationGatewaysClient) (ar autorest.Response, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.ApplicationGatewaysDeleteFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ar.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.ApplicationGatewaysDeleteFuture")
                return
            }
            ar.Response = future.Response()
        return
        }

            // ApplicationGatewaysStartFuture an abstraction for monitoring and retrieving the results of a
            // long-running operation.
            type ApplicationGatewaysStartFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(ApplicationGatewaysClient) (autorest.Response, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *ApplicationGatewaysStartFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for ApplicationGatewaysStartFuture.Result.
        func (future *ApplicationGatewaysStartFuture) result(client ApplicationGatewaysClient) (ar autorest.Response, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.ApplicationGatewaysStartFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ar.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.ApplicationGatewaysStartFuture")
                return
            }
            ar.Response = future.Response()
        return
        }

            // ApplicationGatewaysStopFuture an abstraction for monitoring and retrieving the results of a long-running
            // operation.
            type ApplicationGatewaysStopFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(ApplicationGatewaysClient) (autorest.Response, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *ApplicationGatewaysStopFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for ApplicationGatewaysStopFuture.Result.
        func (future *ApplicationGatewaysStopFuture) result(client ApplicationGatewaysClient) (ar autorest.Response, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.ApplicationGatewaysStopFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ar.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.ApplicationGatewaysStopFuture")
                return
            }
            ar.Response = future.Response()
        return
        }

            // ApplicationSecurityGroup an application security group in a resource group.
            type ApplicationSecurityGroup struct {
            // ApplicationSecurityGroupPropertiesFormat - Properties of the application security group.
            *ApplicationSecurityGroupPropertiesFormat `json:"properties,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for ApplicationSecurityGroup.
        func (asg ApplicationSecurityGroup)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(asg.ApplicationSecurityGroupPropertiesFormat != nil) {
                objectMap["properties"] = asg.ApplicationSecurityGroupPropertiesFormat
                }
                if(asg.ID != nil) {
                objectMap["id"] = asg.ID
                }
                if(asg.Location != nil) {
                objectMap["location"] = asg.Location
                }
                if(asg.Tags != nil) {
                objectMap["tags"] = asg.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ApplicationSecurityGroup struct.
        func (asg *ApplicationSecurityGroup) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var applicationSecurityGroupPropertiesFormat ApplicationSecurityGroupPropertiesFormat
        err = json.Unmarshal(*v, &applicationSecurityGroupPropertiesFormat)
    if err != nil {
    return err
    }
        asg.ApplicationSecurityGroupPropertiesFormat = &applicationSecurityGroupPropertiesFormat
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        asg.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        asg.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        asg.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        asg.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        asg.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        asg.Tags = tags
    }
            }
        }

        return nil
        }

            // ApplicationSecurityGroupPropertiesFormat application security group properties.
            type ApplicationSecurityGroupPropertiesFormat struct {
            // ResourceGUID - READ-ONLY; The resource GUID property of the application security group resource. It uniquely identifies a resource, even if the user changes its name or migrate the resource across subscriptions or resource groups.
            ResourceGUID *string `json:"resourceGuid,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the application security group resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationSecurityGroupPropertiesFormat.
        func (asgpf ApplicationSecurityGroupPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                return json.Marshal(objectMap)
        }

            // BackendAddressPool pool of backend IP addresses.
            type BackendAddressPool struct {
            // BackendAddressPoolPropertiesFormat - Properties of load balancer backend address pool.
            *BackendAddressPoolPropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for BackendAddressPool.
        func (bap BackendAddressPool)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(bap.BackendAddressPoolPropertiesFormat != nil) {
                objectMap["properties"] = bap.BackendAddressPoolPropertiesFormat
                }
                if(bap.Name != nil) {
                objectMap["name"] = bap.Name
                }
                if(bap.ID != nil) {
                objectMap["id"] = bap.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for BackendAddressPool struct.
        func (bap *BackendAddressPool) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var backendAddressPoolPropertiesFormat BackendAddressPoolPropertiesFormat
        err = json.Unmarshal(*v, &backendAddressPoolPropertiesFormat)
    if err != nil {
    return err
    }
        bap.BackendAddressPoolPropertiesFormat = &backendAddressPoolPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        bap.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        bap.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        bap.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        bap.ID = &ID
    }
            }
        }

        return nil
        }

            // BackendAddressPoolPropertiesFormat properties of the backend address pool.
            type BackendAddressPoolPropertiesFormat struct {
            // Location - The location of the backend address pool.
            Location *string `json:"location,omitempty"`
            // TunnelInterfaces - An array of gateway load balancer tunnel interfaces.
            TunnelInterfaces *[]GatewayLoadBalancerTunnelInterface `json:"tunnelInterfaces,omitempty"`
            // LoadBalancerBackendAddresses - An array of backend addresses.
            LoadBalancerBackendAddresses *[]LoadBalancerBackendAddress `json:"loadBalancerBackendAddresses,omitempty"`
            // BackendIPConfigurations - READ-ONLY; An array of references to IP addresses defined in network interfaces.
            BackendIPConfigurations *[]InterfaceIPConfiguration `json:"backendIPConfigurations,omitempty"`
            // LoadBalancingRules - READ-ONLY; An array of references to load balancing rules that use this backend address pool.
            LoadBalancingRules *[]SubResource `json:"loadBalancingRules,omitempty"`
            // OutboundRule - READ-ONLY; A reference to an outbound rule that uses this backend address pool.
            OutboundRule *SubResource `json:"outboundRule,omitempty"`
            // OutboundRules - READ-ONLY; An array of references to outbound rules that use this backend address pool.
            OutboundRules *[]SubResource `json:"outboundRules,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the backend address pool resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for BackendAddressPoolPropertiesFormat.
        func (bappf BackendAddressPoolPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(bappf.Location != nil) {
                objectMap["location"] = bappf.Location
                }
                if(bappf.TunnelInterfaces != nil) {
                objectMap["tunnelInterfaces"] = bappf.TunnelInterfaces
                }
                if(bappf.LoadBalancerBackendAddresses != nil) {
                objectMap["loadBalancerBackendAddresses"] = bappf.LoadBalancerBackendAddresses
                }
                return json.Marshal(objectMap)
        }

            // CloudError an error response from the service.
            type CloudError struct {
            // Error - Cloud error body.
            Error *CloudErrorBody `json:"error,omitempty"`
            }

            // CloudErrorBody an error response from the service.
            type CloudErrorBody struct {
            // Code - An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
            Code *string `json:"code,omitempty"`
            // Message - A message describing the error, intended to be suitable for display in a user interface.
            Message *string `json:"message,omitempty"`
            // Target - The target of the particular error. For example, the name of the property in error.
            Target *string `json:"target,omitempty"`
            // Details - A list of additional details about the error.
            Details *[]CloudErrorBody `json:"details,omitempty"`
            }

            // CustomDNSConfigPropertiesFormat contains custom Dns resolution configuration from customer.
            type CustomDNSConfigPropertiesFormat struct {
            // Fqdn - Fqdn that resolves to private endpoint ip address.
            Fqdn *string `json:"fqdn,omitempty"`
            // IPAddresses - A list of private ip addresses of the private endpoint.
            IPAddresses *[]string `json:"ipAddresses,omitempty"`
            }

            // DdosSettings contains the DDoS protection settings of the public IP.
            type DdosSettings struct {
            // DdosCustomPolicy - The DDoS custom policy associated with the public IP.
            DdosCustomPolicy *SubResource `json:"ddosCustomPolicy,omitempty"`
            // ProtectionCoverage - The DDoS protection policy customizability of the public IP. Only standard coverage will have the ability to be customized. Possible values include: 'DdosSettingsProtectionCoverageBasic', 'DdosSettingsProtectionCoverageStandard'
            ProtectionCoverage DdosSettingsProtectionCoverage `json:"protectionCoverage,omitempty"`
            // ProtectedIP - Enables DDoS protection on the public IP.
            ProtectedIP *bool `json:"protectedIP,omitempty"`
            }

            // Delegation details the service to which the subnet is delegated.
            type Delegation struct {
            // ServiceDelegationPropertiesFormat - Properties of the subnet.
            *ServiceDelegationPropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within a subnet. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - Resource type.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for Delegation.
        func (d Delegation)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(d.ServiceDelegationPropertiesFormat != nil) {
                objectMap["properties"] = d.ServiceDelegationPropertiesFormat
                }
                if(d.Name != nil) {
                objectMap["name"] = d.Name
                }
                if(d.Type != nil) {
                objectMap["type"] = d.Type
                }
                if(d.ID != nil) {
                objectMap["id"] = d.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for Delegation struct.
        func (d *Delegation) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var serviceDelegationPropertiesFormat ServiceDelegationPropertiesFormat
        err = json.Unmarshal(*v, &serviceDelegationPropertiesFormat)
    if err != nil {
    return err
    }
        d.ServiceDelegationPropertiesFormat = &serviceDelegationPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        d.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        d.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        d.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        d.ID = &ID
    }
            }
        }

        return nil
        }

            // DhcpOptions dhcpOptions contains an array of DNS servers available to VMs deployed in the virtual
            // network. Standard DHCP option for a subnet overrides VNET DHCP options.
            type DhcpOptions struct {
            // DNSServers - The list of DNS servers IP addresses.
            DNSServers *[]string `json:"dnsServers,omitempty"`
            }

            // Error common error representation.
            type Error struct {
            // Code - Error code.
            Code *string `json:"code,omitempty"`
            // Message - Error message.
            Message *string `json:"message,omitempty"`
            // Target - Error target.
            Target *string `json:"target,omitempty"`
            // Details - Error details.
            Details *[]ErrorDetails `json:"details,omitempty"`
            // InnerError - Inner error message.
            InnerError *string `json:"innerError,omitempty"`
            }

            // ErrorDetails common error details representation.
            type ErrorDetails struct {
            // Code - Error code.
            Code *string `json:"code,omitempty"`
            // Target - Error target.
            Target *string `json:"target,omitempty"`
            // Message - Error message.
            Message *string `json:"message,omitempty"`
            }

            // ExtendedLocation extendedLocation complex type.
            type ExtendedLocation struct {
            // Name - The name of the extended location.
            Name *string `json:"name,omitempty"`
            // Type - The type of the extended location. Possible values include: 'EdgeZone'
            Type ExtendedLocationTypes `json:"type,omitempty"`
            }

            // FlowLog a flow log resource.
            type FlowLog struct {
            // FlowLogPropertiesFormat - Properties of the flow log.
            *FlowLogPropertiesFormat `json:"properties,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for FlowLog.
        func (fl FlowLog)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(fl.FlowLogPropertiesFormat != nil) {
                objectMap["properties"] = fl.FlowLogPropertiesFormat
                }
                if(fl.ID != nil) {
                objectMap["id"] = fl.ID
                }
                if(fl.Location != nil) {
                objectMap["location"] = fl.Location
                }
                if(fl.Tags != nil) {
                objectMap["tags"] = fl.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for FlowLog struct.
        func (fl *FlowLog) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var flowLogPropertiesFormat FlowLogPropertiesFormat
        err = json.Unmarshal(*v, &flowLogPropertiesFormat)
    if err != nil {
    return err
    }
        fl.FlowLogPropertiesFormat = &flowLogPropertiesFormat
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        fl.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        fl.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        fl.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        fl.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        fl.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        fl.Tags = tags
    }
            }
        }

        return nil
        }

            // FlowLogFormatParameters parameters that define the flow log format.
            type FlowLogFormatParameters struct {
            // Type - The file type of flow log. Possible values include: 'JSON'
            Type FlowLogFormatType `json:"type,omitempty"`
            // Version - The version (revision) of the flow log.
            Version *int32 `json:"version,omitempty"`
            }

            // FlowLogPropertiesFormat parameters that define the configuration of flow log.
            type FlowLogPropertiesFormat struct {
            // TargetResourceID - ID of network security group to which flow log will be applied.
            TargetResourceID *string `json:"targetResourceId,omitempty"`
            // TargetResourceGUID - READ-ONLY; Guid of network security group to which flow log will be applied.
            TargetResourceGUID *string `json:"targetResourceGuid,omitempty"`
            // StorageID - ID of the storage account which is used to store the flow log.
            StorageID *string `json:"storageId,omitempty"`
            // Enabled - Flag to enable/disable flow logging.
            Enabled *bool `json:"enabled,omitempty"`
            // RetentionPolicy - Parameters that define the retention policy for flow log.
            RetentionPolicy *RetentionPolicyParameters `json:"retentionPolicy,omitempty"`
            // Format - Parameters that define the flow log format.
            Format *FlowLogFormatParameters `json:"format,omitempty"`
            // FlowAnalyticsConfiguration - Parameters that define the configuration of traffic analytics.
            FlowAnalyticsConfiguration *TrafficAnalyticsProperties `json:"flowAnalyticsConfiguration,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the flow log. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for FlowLogPropertiesFormat.
        func (flpf FlowLogPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(flpf.TargetResourceID != nil) {
                objectMap["targetResourceId"] = flpf.TargetResourceID
                }
                if(flpf.StorageID != nil) {
                objectMap["storageId"] = flpf.StorageID
                }
                if(flpf.Enabled != nil) {
                objectMap["enabled"] = flpf.Enabled
                }
                if(flpf.RetentionPolicy != nil) {
                objectMap["retentionPolicy"] = flpf.RetentionPolicy
                }
                if(flpf.Format != nil) {
                objectMap["format"] = flpf.Format
                }
                if(flpf.FlowAnalyticsConfiguration != nil) {
                objectMap["flowAnalyticsConfiguration"] = flpf.FlowAnalyticsConfiguration
                }
                return json.Marshal(objectMap)
        }

            // FrontendIPConfiguration frontend IP address of the load balancer.
            type FrontendIPConfiguration struct {
            // FrontendIPConfigurationPropertiesFormat - Properties of the load balancer probe.
            *FrontendIPConfigurationPropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // Zones - A list of availability zones denoting the IP allocated for the resource needs to come from.
            Zones *[]string `json:"zones,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for FrontendIPConfiguration.
        func (fic FrontendIPConfiguration)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(fic.FrontendIPConfigurationPropertiesFormat != nil) {
                objectMap["properties"] = fic.FrontendIPConfigurationPropertiesFormat
                }
                if(fic.Name != nil) {
                objectMap["name"] = fic.Name
                }
                if(fic.Zones != nil) {
                objectMap["zones"] = fic.Zones
                }
                if(fic.ID != nil) {
                objectMap["id"] = fic.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for FrontendIPConfiguration struct.
        func (fic *FrontendIPConfiguration) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var frontendIPConfigurationPropertiesFormat FrontendIPConfigurationPropertiesFormat
        err = json.Unmarshal(*v, &frontendIPConfigurationPropertiesFormat)
    if err != nil {
    return err
    }
        fic.FrontendIPConfigurationPropertiesFormat = &frontendIPConfigurationPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        fic.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        fic.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        fic.Type = &typeVar
    }
                case "zones":
    if v != nil {
        var zones []string
        err = json.Unmarshal(*v, &zones)
    if err != nil {
    return err
    }
        fic.Zones = &zones
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        fic.ID = &ID
    }
            }
        }

        return nil
        }

            // FrontendIPConfigurationPropertiesFormat properties of Frontend IP Configuration of the load balancer.
            type FrontendIPConfigurationPropertiesFormat struct {
            // InboundNatRules - READ-ONLY; An array of references to inbound rules that use this frontend IP.
            InboundNatRules *[]SubResource `json:"inboundNatRules,omitempty"`
            // InboundNatPools - READ-ONLY; An array of references to inbound pools that use this frontend IP.
            InboundNatPools *[]SubResource `json:"inboundNatPools,omitempty"`
            // OutboundRules - READ-ONLY; An array of references to outbound rules that use this frontend IP.
            OutboundRules *[]SubResource `json:"outboundRules,omitempty"`
            // LoadBalancingRules - READ-ONLY; An array of references to load balancing rules that use this frontend IP.
            LoadBalancingRules *[]SubResource `json:"loadBalancingRules,omitempty"`
            // PrivateIPAddress - The private IP address of the IP configuration.
            PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
            // PrivateIPAllocationMethod - The Private IP allocation method. Possible values include: 'Static', 'Dynamic'
            PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
            // PrivateIPAddressVersion - Whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values include: 'IPv4', 'IPv6'
            PrivateIPAddressVersion IPVersion `json:"privateIPAddressVersion,omitempty"`
            // Subnet - The reference to the subnet resource.
            Subnet *Subnet `json:"subnet,omitempty"`
            // PublicIPAddress - The reference to the Public IP resource.
            PublicIPAddress *PublicIPAddress `json:"publicIPAddress,omitempty"`
            // PublicIPPrefix - The reference to the Public IP Prefix resource.
            PublicIPPrefix *SubResource `json:"publicIPPrefix,omitempty"`
            // GatewayLoadBalancer - The reference to gateway load balancer frontend IP.
            GatewayLoadBalancer *SubResource `json:"gatewayLoadBalancer,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the frontend IP configuration resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for FrontendIPConfigurationPropertiesFormat.
        func (ficpf FrontendIPConfigurationPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(ficpf.PrivateIPAddress != nil) {
                objectMap["privateIPAddress"] = ficpf.PrivateIPAddress
                }
                if(ficpf.PrivateIPAllocationMethod != "") {
                objectMap["privateIPAllocationMethod"] = ficpf.PrivateIPAllocationMethod
                }
                if(ficpf.PrivateIPAddressVersion != "") {
                objectMap["privateIPAddressVersion"] = ficpf.PrivateIPAddressVersion
                }
                if(ficpf.Subnet != nil) {
                objectMap["subnet"] = ficpf.Subnet
                }
                if(ficpf.PublicIPAddress != nil) {
                objectMap["publicIPAddress"] = ficpf.PublicIPAddress
                }
                if(ficpf.PublicIPPrefix != nil) {
                objectMap["publicIPPrefix"] = ficpf.PublicIPPrefix
                }
                if(ficpf.GatewayLoadBalancer != nil) {
                objectMap["gatewayLoadBalancer"] = ficpf.GatewayLoadBalancer
                }
                return json.Marshal(objectMap)
        }

            // GatewayLoadBalancerTunnelInterface gateway load balancer tunnel interface of a load balancer backend
            // address pool.
            type GatewayLoadBalancerTunnelInterface struct {
            // Port - Port of gateway load balancer tunnel interface.
            Port *int32 `json:"port,omitempty"`
            // Identifier - Identifier of gateway load balancer tunnel interface.
            Identifier *int32 `json:"identifier,omitempty"`
            // Protocol - Protocol of gateway load balancer tunnel interface. Possible values include: 'GatewayLoadBalancerTunnelProtocolNone', 'GatewayLoadBalancerTunnelProtocolNative', 'GatewayLoadBalancerTunnelProtocolVXLAN'
            Protocol GatewayLoadBalancerTunnelProtocol `json:"protocol,omitempty"`
            // Type - Traffic type of gateway load balancer tunnel interface. Possible values include: 'None', 'Internal', 'External'
            Type GatewayLoadBalancerTunnelInterfaceType `json:"type,omitempty"`
            }

            // IPAddressAvailabilityResult response for CheckIPAddressAvailability API service call.
            type IPAddressAvailabilityResult struct {
            autorest.Response `json:"-"`
            // Available - Private IP address availability.
            Available *bool `json:"available,omitempty"`
            // AvailableIPAddresses - Contains other available private IP addresses if the asked for address is taken.
            AvailableIPAddresses *[]string `json:"availableIPAddresses,omitempty"`
            // IsPlatformReserved - Private IP address platform reserved.
            IsPlatformReserved *bool `json:"isPlatformReserved,omitempty"`
            }

            // IPConfiguration IP configuration.
            type IPConfiguration struct {
            // IPConfigurationPropertiesFormat - Properties of the IP configuration.
            *IPConfigurationPropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for IPConfiguration.
        func (ic IPConfiguration)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(ic.IPConfigurationPropertiesFormat != nil) {
                objectMap["properties"] = ic.IPConfigurationPropertiesFormat
                }
                if(ic.Name != nil) {
                objectMap["name"] = ic.Name
                }
                if(ic.ID != nil) {
                objectMap["id"] = ic.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for IPConfiguration struct.
        func (ic *IPConfiguration) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var IPConfigurationPropertiesFormat IPConfigurationPropertiesFormat
        err = json.Unmarshal(*v, &IPConfigurationPropertiesFormat)
    if err != nil {
    return err
    }
        ic.IPConfigurationPropertiesFormat = &IPConfigurationPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        ic.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        ic.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        ic.ID = &ID
    }
            }
        }

        return nil
        }

            // IPConfigurationProfile IP configuration profile child resource.
            type IPConfigurationProfile struct {
            // IPConfigurationProfilePropertiesFormat - Properties of the IP configuration profile.
            *IPConfigurationProfilePropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Sub Resource type.
            Type *string `json:"type,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for IPConfigurationProfile.
        func (icp IPConfigurationProfile)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(icp.IPConfigurationProfilePropertiesFormat != nil) {
                objectMap["properties"] = icp.IPConfigurationProfilePropertiesFormat
                }
                if(icp.Name != nil) {
                objectMap["name"] = icp.Name
                }
                if(icp.ID != nil) {
                objectMap["id"] = icp.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for IPConfigurationProfile struct.
        func (icp *IPConfigurationProfile) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var IPConfigurationProfilePropertiesFormat IPConfigurationProfilePropertiesFormat
        err = json.Unmarshal(*v, &IPConfigurationProfilePropertiesFormat)
    if err != nil {
    return err
    }
        icp.IPConfigurationProfilePropertiesFormat = &IPConfigurationProfilePropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        icp.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        icp.Type = &typeVar
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        icp.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        icp.ID = &ID
    }
            }
        }

        return nil
        }

            // IPConfigurationProfilePropertiesFormat IP configuration profile properties.
            type IPConfigurationProfilePropertiesFormat struct {
            // Subnet - The reference to the subnet resource to create a container network interface ip configuration.
            Subnet *Subnet `json:"subnet,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the IP configuration profile resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for IPConfigurationProfilePropertiesFormat.
        func (icppf IPConfigurationProfilePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(icppf.Subnet != nil) {
                objectMap["subnet"] = icppf.Subnet
                }
                return json.Marshal(objectMap)
        }

            // IPConfigurationPropertiesFormat properties of IP configuration.
            type IPConfigurationPropertiesFormat struct {
            // PrivateIPAddress - The private IP address of the IP configuration.
            PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
            // PrivateIPAllocationMethod - The private IP address allocation method. Possible values include: 'Static', 'Dynamic'
            PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
            // Subnet - The reference to the subnet resource.
            Subnet *Subnet `json:"subnet,omitempty"`
            // PublicIPAddress - The reference to the public IP resource.
            PublicIPAddress *PublicIPAddress `json:"publicIPAddress,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the IP configuration resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for IPConfigurationPropertiesFormat.
        func (icpf IPConfigurationPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(icpf.PrivateIPAddress != nil) {
                objectMap["privateIPAddress"] = icpf.PrivateIPAddress
                }
                if(icpf.PrivateIPAllocationMethod != "") {
                objectMap["privateIPAllocationMethod"] = icpf.PrivateIPAllocationMethod
                }
                if(icpf.Subnet != nil) {
                objectMap["subnet"] = icpf.Subnet
                }
                if(icpf.PublicIPAddress != nil) {
                objectMap["publicIPAddress"] = icpf.PublicIPAddress
                }
                return json.Marshal(objectMap)
        }

            // IPTag contains the IpTag associated with the object.
            type IPTag struct {
            // IPTagType - The IP tag type. Example: FirstPartyUsage.
            IPTagType *string `json:"ipTagType,omitempty"`
            // Tag - The value of the IP tag associated with the public IP. Example: SQL.
            Tag *string `json:"tag,omitempty"`
            }

            // InboundNatRule inbound NAT rule of the load balancer.
            type InboundNatRule struct {
            // InboundNatRulePropertiesFormat - Properties of load balancer inbound nat rule.
            *InboundNatRulePropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for InboundNatRule.
        func (inr InboundNatRule)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(inr.InboundNatRulePropertiesFormat != nil) {
                objectMap["properties"] = inr.InboundNatRulePropertiesFormat
                }
                if(inr.Name != nil) {
                objectMap["name"] = inr.Name
                }
                if(inr.ID != nil) {
                objectMap["id"] = inr.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for InboundNatRule struct.
        func (inr *InboundNatRule) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var inboundNatRulePropertiesFormat InboundNatRulePropertiesFormat
        err = json.Unmarshal(*v, &inboundNatRulePropertiesFormat)
    if err != nil {
    return err
    }
        inr.InboundNatRulePropertiesFormat = &inboundNatRulePropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        inr.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        inr.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        inr.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        inr.ID = &ID
    }
            }
        }

        return nil
        }

            // InboundNatRulePropertiesFormat properties of the inbound NAT rule.
            type InboundNatRulePropertiesFormat struct {
            // FrontendIPConfiguration - A reference to frontend IP addresses.
            FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`
            // BackendIPConfiguration - READ-ONLY; A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations is forwarded to the backend IP.
            BackendIPConfiguration *InterfaceIPConfiguration `json:"backendIPConfiguration,omitempty"`
            // Protocol - The reference to the transport protocol used by the load balancing rule. Possible values include: 'TransportProtocolUDP', 'TransportProtocolTCP', 'TransportProtocolAll'
            Protocol TransportProtocol `json:"protocol,omitempty"`
            // FrontendPort - The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.
            FrontendPort *int32 `json:"frontendPort,omitempty"`
            // BackendPort - The port used for the internal endpoint. Acceptable values range from 1 to 65535.
            BackendPort *int32 `json:"backendPort,omitempty"`
            // IdleTimeoutInMinutes - The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
            IdleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`
            // EnableFloatingIP - Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
            EnableFloatingIP *bool `json:"enableFloatingIP,omitempty"`
            // EnableTCPReset - Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
            EnableTCPReset *bool `json:"enableTcpReset,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the inbound NAT rule resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for InboundNatRulePropertiesFormat.
        func (inrpf InboundNatRulePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(inrpf.FrontendIPConfiguration != nil) {
                objectMap["frontendIPConfiguration"] = inrpf.FrontendIPConfiguration
                }
                if(inrpf.Protocol != "") {
                objectMap["protocol"] = inrpf.Protocol
                }
                if(inrpf.FrontendPort != nil) {
                objectMap["frontendPort"] = inrpf.FrontendPort
                }
                if(inrpf.BackendPort != nil) {
                objectMap["backendPort"] = inrpf.BackendPort
                }
                if(inrpf.IdleTimeoutInMinutes != nil) {
                objectMap["idleTimeoutInMinutes"] = inrpf.IdleTimeoutInMinutes
                }
                if(inrpf.EnableFloatingIP != nil) {
                objectMap["enableFloatingIP"] = inrpf.EnableFloatingIP
                }
                if(inrpf.EnableTCPReset != nil) {
                objectMap["enableTcpReset"] = inrpf.EnableTCPReset
                }
                return json.Marshal(objectMap)
        }

            // IntentPolicy network Intent Policy resource.
            type IntentPolicy struct {
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for IntentPolicy.
        func (IP IntentPolicy)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(IP.ID != nil) {
                objectMap["id"] = IP.ID
                }
                if(IP.Location != nil) {
                objectMap["location"] = IP.Location
                }
                if(IP.Tags != nil) {
                objectMap["tags"] = IP.Tags
                }
                return json.Marshal(objectMap)
        }

            // IntentPolicyConfiguration details of NetworkIntentPolicyConfiguration for PrepareNetworkPoliciesRequest.
            type IntentPolicyConfiguration struct {
            // NetworkIntentPolicyName - The name of the Network Intent Policy for storing in target subscription.
            NetworkIntentPolicyName *string `json:"networkIntentPolicyName,omitempty"`
            // SourceNetworkIntentPolicy - Source network intent policy.
            SourceNetworkIntentPolicy *IntentPolicy `json:"sourceNetworkIntentPolicy,omitempty"`
            }

            // Interface a network interface in a resource group.
            type Interface struct {
            // ExtendedLocation - The extended location of the network interface.
            ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`
            // InterfacePropertiesFormat - Properties of the network interface.
            *InterfacePropertiesFormat `json:"properties,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for Interface.
        func (i Interface)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(i.ExtendedLocation != nil) {
                objectMap["extendedLocation"] = i.ExtendedLocation
                }
                if(i.InterfacePropertiesFormat != nil) {
                objectMap["properties"] = i.InterfacePropertiesFormat
                }
                if(i.ID != nil) {
                objectMap["id"] = i.ID
                }
                if(i.Location != nil) {
                objectMap["location"] = i.Location
                }
                if(i.Tags != nil) {
                objectMap["tags"] = i.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for Interface struct.
        func (i *Interface) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "extendedLocation":
    if v != nil {
        var extendedLocation ExtendedLocation
        err = json.Unmarshal(*v, &extendedLocation)
    if err != nil {
    return err
    }
        i.ExtendedLocation = &extendedLocation
    }
                case "properties":
    if v != nil {
        var interfacePropertiesFormat InterfacePropertiesFormat
        err = json.Unmarshal(*v, &interfacePropertiesFormat)
    if err != nil {
    return err
    }
        i.InterfacePropertiesFormat = &interfacePropertiesFormat
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        i.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        i.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        i.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        i.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        i.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        i.Tags = tags
    }
            }
        }

        return nil
        }

            // InterfaceDNSSettings DNS settings of a network interface.
            type InterfaceDNSSettings struct {
            // DNSServers - List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection.
            DNSServers *[]string `json:"dnsServers,omitempty"`
            // AppliedDNSServers - READ-ONLY; If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.
            AppliedDNSServers *[]string `json:"appliedDnsServers,omitempty"`
            // InternalDNSNameLabel - Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.
            InternalDNSNameLabel *string `json:"internalDnsNameLabel,omitempty"`
            // InternalFqdn - READ-ONLY; Fully qualified DNS name supporting internal communications between VMs in the same virtual network.
            InternalFqdn *string `json:"internalFqdn,omitempty"`
            // InternalDomainNameSuffix - READ-ONLY; Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the VM name with the value of internalDomainNameSuffix.
            InternalDomainNameSuffix *string `json:"internalDomainNameSuffix,omitempty"`
            }

        // MarshalJSON is the custom marshaler for InterfaceDNSSettings.
        func (ids InterfaceDNSSettings)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(ids.DNSServers != nil) {
                objectMap["dnsServers"] = ids.DNSServers
                }
                if(ids.InternalDNSNameLabel != nil) {
                objectMap["internalDnsNameLabel"] = ids.InternalDNSNameLabel
                }
                return json.Marshal(objectMap)
        }

            // InterfaceIPConfiguration iPConfiguration in a network interface.
            type InterfaceIPConfiguration struct {
            // InterfaceIPConfigurationPropertiesFormat - Network interface IP configuration properties.
            *InterfaceIPConfigurationPropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - Resource type.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for InterfaceIPConfiguration.
        func (iic InterfaceIPConfiguration)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(iic.InterfaceIPConfigurationPropertiesFormat != nil) {
                objectMap["properties"] = iic.InterfaceIPConfigurationPropertiesFormat
                }
                if(iic.Name != nil) {
                objectMap["name"] = iic.Name
                }
                if(iic.Type != nil) {
                objectMap["type"] = iic.Type
                }
                if(iic.ID != nil) {
                objectMap["id"] = iic.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for InterfaceIPConfiguration struct.
        func (iic *InterfaceIPConfiguration) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var interfaceIPConfigurationPropertiesFormat InterfaceIPConfigurationPropertiesFormat
        err = json.Unmarshal(*v, &interfaceIPConfigurationPropertiesFormat)
    if err != nil {
    return err
    }
        iic.InterfaceIPConfigurationPropertiesFormat = &interfaceIPConfigurationPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        iic.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        iic.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        iic.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        iic.ID = &ID
    }
            }
        }

        return nil
        }

            // InterfaceIPConfigurationPrivateLinkConnectionProperties privateLinkConnection properties for the network
            // interface.
            type InterfaceIPConfigurationPrivateLinkConnectionProperties struct {
            // GroupID - READ-ONLY; The group ID for current private link connection.
            GroupID *string `json:"groupId,omitempty"`
            // RequiredMemberName - READ-ONLY; The required member name for current private link connection.
            RequiredMemberName *string `json:"requiredMemberName,omitempty"`
            // Fqdns - READ-ONLY; List of FQDNs for current private link connection.
            Fqdns *[]string `json:"fqdns,omitempty"`
            }

        // MarshalJSON is the custom marshaler for InterfaceIPConfigurationPrivateLinkConnectionProperties.
        func (iicplcp InterfaceIPConfigurationPrivateLinkConnectionProperties)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                return json.Marshal(objectMap)
        }

            // InterfaceIPConfigurationPropertiesFormat properties of IP configuration.
            type InterfaceIPConfigurationPropertiesFormat struct {
            // GatewayLoadBalancer - The reference to gateway load balancer frontend IP.
            GatewayLoadBalancer *SubResource `json:"gatewayLoadBalancer,omitempty"`
            // VirtualNetworkTaps - The reference to Virtual Network Taps.
            VirtualNetworkTaps *[]VirtualNetworkTap `json:"virtualNetworkTaps,omitempty"`
            // ApplicationGatewayBackendAddressPools - The reference to ApplicationGatewayBackendAddressPool resource.
            ApplicationGatewayBackendAddressPools *[]ApplicationGatewayBackendAddressPool `json:"applicationGatewayBackendAddressPools,omitempty"`
            // LoadBalancerBackendAddressPools - The reference to LoadBalancerBackendAddressPool resource.
            LoadBalancerBackendAddressPools *[]BackendAddressPool `json:"loadBalancerBackendAddressPools,omitempty"`
            // LoadBalancerInboundNatRules - A list of references of LoadBalancerInboundNatRules.
            LoadBalancerInboundNatRules *[]InboundNatRule `json:"loadBalancerInboundNatRules,omitempty"`
            // PrivateIPAddress - Private IP address of the IP configuration.
            PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
            // PrivateIPAllocationMethod - The private IP address allocation method. Possible values include: 'Static', 'Dynamic'
            PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
            // PrivateIPAddressVersion - Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4. Possible values include: 'IPv4', 'IPv6'
            PrivateIPAddressVersion IPVersion `json:"privateIPAddressVersion,omitempty"`
            // Subnet - Subnet bound to the IP configuration.
            Subnet *Subnet `json:"subnet,omitempty"`
            // Primary - Whether this is a primary customer address on the network interface.
            Primary *bool `json:"primary,omitempty"`
            // PublicIPAddress - Public IP address bound to the IP configuration.
            PublicIPAddress *PublicIPAddress `json:"publicIPAddress,omitempty"`
            // ApplicationSecurityGroups - Application security groups in which the IP configuration is included.
            ApplicationSecurityGroups *[]ApplicationSecurityGroup `json:"applicationSecurityGroups,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the network interface IP configuration. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // PrivateLinkConnectionProperties - READ-ONLY; PrivateLinkConnection properties for the network interface.
            PrivateLinkConnectionProperties *InterfaceIPConfigurationPrivateLinkConnectionProperties `json:"privateLinkConnectionProperties,omitempty"`
            }

        // MarshalJSON is the custom marshaler for InterfaceIPConfigurationPropertiesFormat.
        func (iicpf InterfaceIPConfigurationPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(iicpf.GatewayLoadBalancer != nil) {
                objectMap["gatewayLoadBalancer"] = iicpf.GatewayLoadBalancer
                }
                if(iicpf.VirtualNetworkTaps != nil) {
                objectMap["virtualNetworkTaps"] = iicpf.VirtualNetworkTaps
                }
                if(iicpf.ApplicationGatewayBackendAddressPools != nil) {
                objectMap["applicationGatewayBackendAddressPools"] = iicpf.ApplicationGatewayBackendAddressPools
                }
                if(iicpf.LoadBalancerBackendAddressPools != nil) {
                objectMap["loadBalancerBackendAddressPools"] = iicpf.LoadBalancerBackendAddressPools
                }
                if(iicpf.LoadBalancerInboundNatRules != nil) {
                objectMap["loadBalancerInboundNatRules"] = iicpf.LoadBalancerInboundNatRules
                }
                if(iicpf.PrivateIPAddress != nil) {
                objectMap["privateIPAddress"] = iicpf.PrivateIPAddress
                }
                if(iicpf.PrivateIPAllocationMethod != "") {
                objectMap["privateIPAllocationMethod"] = iicpf.PrivateIPAllocationMethod
                }
                if(iicpf.PrivateIPAddressVersion != "") {
                objectMap["privateIPAddressVersion"] = iicpf.PrivateIPAddressVersion
                }
                if(iicpf.Subnet != nil) {
                objectMap["subnet"] = iicpf.Subnet
                }
                if(iicpf.Primary != nil) {
                objectMap["primary"] = iicpf.Primary
                }
                if(iicpf.PublicIPAddress != nil) {
                objectMap["publicIPAddress"] = iicpf.PublicIPAddress
                }
                if(iicpf.ApplicationSecurityGroups != nil) {
                objectMap["applicationSecurityGroups"] = iicpf.ApplicationSecurityGroups
                }
                return json.Marshal(objectMap)
        }

            // InterfacePropertiesFormat networkInterface properties.
            type InterfacePropertiesFormat struct {
            // VirtualMachine - READ-ONLY; The reference to a virtual machine.
            VirtualMachine *SubResource `json:"virtualMachine,omitempty"`
            // NetworkSecurityGroup - The reference to the NetworkSecurityGroup resource.
            NetworkSecurityGroup *SecurityGroup `json:"networkSecurityGroup,omitempty"`
            // PrivateEndpoint - READ-ONLY; A reference to the private endpoint to which the network interface is linked.
            PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty"`
            // IPConfigurations - A list of IPConfigurations of the network interface.
            IPConfigurations *[]InterfaceIPConfiguration `json:"ipConfigurations,omitempty"`
            // TapConfigurations - READ-ONLY; A list of TapConfigurations of the network interface.
            TapConfigurations *[]InterfaceTapConfiguration `json:"tapConfigurations,omitempty"`
            // DNSSettings - The DNS settings in network interface.
            DNSSettings *InterfaceDNSSettings `json:"dnsSettings,omitempty"`
            // MacAddress - READ-ONLY; The MAC address of the network interface.
            MacAddress *string `json:"macAddress,omitempty"`
            // Primary - READ-ONLY; Whether this is a primary network interface on a virtual machine.
            Primary *bool `json:"primary,omitempty"`
            // EnableAcceleratedNetworking - If the network interface is accelerated networking enabled.
            EnableAcceleratedNetworking *bool `json:"enableAcceleratedNetworking,omitempty"`
            // EnableIPForwarding - Indicates whether IP forwarding is enabled on this network interface.
            EnableIPForwarding *bool `json:"enableIPForwarding,omitempty"`
            // HostedWorkloads - READ-ONLY; A list of references to linked BareMetal resources.
            HostedWorkloads *[]string `json:"hostedWorkloads,omitempty"`
            // DscpConfiguration - READ-ONLY; A reference to the dscp configuration to which the network interface is linked.
            DscpConfiguration *SubResource `json:"dscpConfiguration,omitempty"`
            // ResourceGUID - READ-ONLY; The resource GUID property of the network interface resource.
            ResourceGUID *string `json:"resourceGuid,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the network interface resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // WorkloadType - WorkloadType of the NetworkInterface for BareMetal resources
            WorkloadType *string `json:"workloadType,omitempty"`
            // NicType - Type of Network Interface resource. Possible values include: 'Standard', 'Elastic'
            NicType InterfaceNicType `json:"nicType,omitempty"`
            // PrivateLinkService - Privatelinkservice of the network interface resource.
            PrivateLinkService *PrivateLinkService `json:"privateLinkService,omitempty"`
            // MigrationPhase - Migration phase of Network Interface resource. Possible values include: 'InterfaceMigrationPhaseNone', 'InterfaceMigrationPhasePrepare', 'InterfaceMigrationPhaseCommit', 'InterfaceMigrationPhaseAbort', 'InterfaceMigrationPhaseCommitted'
            MigrationPhase InterfaceMigrationPhase `json:"migrationPhase,omitempty"`
            }

        // MarshalJSON is the custom marshaler for InterfacePropertiesFormat.
        func (ipf InterfacePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(ipf.NetworkSecurityGroup != nil) {
                objectMap["networkSecurityGroup"] = ipf.NetworkSecurityGroup
                }
                if(ipf.IPConfigurations != nil) {
                objectMap["ipConfigurations"] = ipf.IPConfigurations
                }
                if(ipf.DNSSettings != nil) {
                objectMap["dnsSettings"] = ipf.DNSSettings
                }
                if(ipf.EnableAcceleratedNetworking != nil) {
                objectMap["enableAcceleratedNetworking"] = ipf.EnableAcceleratedNetworking
                }
                if(ipf.EnableIPForwarding != nil) {
                objectMap["enableIPForwarding"] = ipf.EnableIPForwarding
                }
                if(ipf.WorkloadType != nil) {
                objectMap["workloadType"] = ipf.WorkloadType
                }
                if(ipf.NicType != "") {
                objectMap["nicType"] = ipf.NicType
                }
                if(ipf.PrivateLinkService != nil) {
                objectMap["privateLinkService"] = ipf.PrivateLinkService
                }
                if(ipf.MigrationPhase != "") {
                objectMap["migrationPhase"] = ipf.MigrationPhase
                }
                return json.Marshal(objectMap)
        }

            // InterfaceTapConfiguration tap configuration in a Network Interface.
            type InterfaceTapConfiguration struct {
            // InterfaceTapConfigurationPropertiesFormat - Properties of the Virtual Network Tap configuration.
            *InterfaceTapConfigurationPropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Sub Resource type.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for InterfaceTapConfiguration.
        func (itc InterfaceTapConfiguration)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(itc.InterfaceTapConfigurationPropertiesFormat != nil) {
                objectMap["properties"] = itc.InterfaceTapConfigurationPropertiesFormat
                }
                if(itc.Name != nil) {
                objectMap["name"] = itc.Name
                }
                if(itc.ID != nil) {
                objectMap["id"] = itc.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for InterfaceTapConfiguration struct.
        func (itc *InterfaceTapConfiguration) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var interfaceTapConfigurationPropertiesFormat InterfaceTapConfigurationPropertiesFormat
        err = json.Unmarshal(*v, &interfaceTapConfigurationPropertiesFormat)
    if err != nil {
    return err
    }
        itc.InterfaceTapConfigurationPropertiesFormat = &interfaceTapConfigurationPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        itc.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        itc.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        itc.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        itc.ID = &ID
    }
            }
        }

        return nil
        }

            // InterfaceTapConfigurationPropertiesFormat properties of Virtual Network Tap configuration.
            type InterfaceTapConfigurationPropertiesFormat struct {
            // VirtualNetworkTap - The reference to the Virtual Network Tap resource.
            VirtualNetworkTap *VirtualNetworkTap `json:"virtualNetworkTap,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the network interface tap configuration resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for InterfaceTapConfigurationPropertiesFormat.
        func (itcpf InterfaceTapConfigurationPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(itcpf.VirtualNetworkTap != nil) {
                objectMap["virtualNetworkTap"] = itcpf.VirtualNetworkTap
                }
                return json.Marshal(objectMap)
        }

            // ListString ...
            type ListString struct {
            autorest.Response `json:"-"`
            Value *[]string `json:"value,omitempty"`
            }

            // LoadBalancerBackendAddress load balancer backend addresses.
            type LoadBalancerBackendAddress struct {
            // LoadBalancerBackendAddressPropertiesFormat - Properties of load balancer backend address pool.
            *LoadBalancerBackendAddressPropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the backend address.
            Name *string `json:"name,omitempty"`
            }

        // MarshalJSON is the custom marshaler for LoadBalancerBackendAddress.
        func (lbba LoadBalancerBackendAddress)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(lbba.LoadBalancerBackendAddressPropertiesFormat != nil) {
                objectMap["properties"] = lbba.LoadBalancerBackendAddressPropertiesFormat
                }
                if(lbba.Name != nil) {
                objectMap["name"] = lbba.Name
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for LoadBalancerBackendAddress struct.
        func (lbba *LoadBalancerBackendAddress) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var loadBalancerBackendAddressPropertiesFormat LoadBalancerBackendAddressPropertiesFormat
        err = json.Unmarshal(*v, &loadBalancerBackendAddressPropertiesFormat)
    if err != nil {
    return err
    }
        lbba.LoadBalancerBackendAddressPropertiesFormat = &loadBalancerBackendAddressPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        lbba.Name = &name
    }
            }
        }

        return nil
        }

            // LoadBalancerBackendAddressPropertiesFormat properties of the load balancer backend addresses.
            type LoadBalancerBackendAddressPropertiesFormat struct {
            // VirtualNetwork - Reference to an existing virtual network.
            VirtualNetwork *SubResource `json:"virtualNetwork,omitempty"`
            // Subnet - Reference to an existing subnet.
            Subnet *SubResource `json:"subnet,omitempty"`
            // IPAddress - IP Address belonging to the referenced virtual network.
            IPAddress *string `json:"ipAddress,omitempty"`
            // NetworkInterfaceIPConfiguration - READ-ONLY; Reference to IP address defined in network interfaces.
            NetworkInterfaceIPConfiguration *SubResource `json:"networkInterfaceIPConfiguration,omitempty"`
            // LoadBalancerFrontendIPConfiguration - Reference to the frontend ip address configuration defined in regional loadbalancer.
            LoadBalancerFrontendIPConfiguration *SubResource `json:"loadBalancerFrontendIPConfiguration,omitempty"`
            }

        // MarshalJSON is the custom marshaler for LoadBalancerBackendAddressPropertiesFormat.
        func (lbbapf LoadBalancerBackendAddressPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(lbbapf.VirtualNetwork != nil) {
                objectMap["virtualNetwork"] = lbbapf.VirtualNetwork
                }
                if(lbbapf.Subnet != nil) {
                objectMap["subnet"] = lbbapf.Subnet
                }
                if(lbbapf.IPAddress != nil) {
                objectMap["ipAddress"] = lbbapf.IPAddress
                }
                if(lbbapf.LoadBalancerFrontendIPConfiguration != nil) {
                objectMap["loadBalancerFrontendIPConfiguration"] = lbbapf.LoadBalancerFrontendIPConfiguration
                }
                return json.Marshal(objectMap)
        }

            // ManagedServiceIdentity identity for the resource.
            type ManagedServiceIdentity struct {
            // PrincipalID - READ-ONLY; The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
            PrincipalID *string `json:"principalId,omitempty"`
            // TenantID - READ-ONLY; The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
            TenantID *string `json:"tenantId,omitempty"`
            // Type - The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine. Possible values include: 'ResourceIdentityTypeSystemAssigned', 'ResourceIdentityTypeUserAssigned', 'ResourceIdentityTypeSystemAssignedUserAssigned', 'ResourceIdentityTypeNone'
            Type ResourceIdentityType `json:"type,omitempty"`
            // UserAssignedIdentities - The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
            UserAssignedIdentities map[string]*ManagedServiceIdentityUserAssignedIdentitiesValue `json:"userAssignedIdentities"`
            }

        // MarshalJSON is the custom marshaler for ManagedServiceIdentity.
        func (msi ManagedServiceIdentity)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(msi.Type != "") {
                objectMap["type"] = msi.Type
                }
                if(msi.UserAssignedIdentities != nil) {
                objectMap["userAssignedIdentities"] = msi.UserAssignedIdentities
                }
                return json.Marshal(objectMap)
        }

            // ManagedServiceIdentityUserAssignedIdentitiesValue ...
            type ManagedServiceIdentityUserAssignedIdentitiesValue struct {
            // PrincipalID - READ-ONLY; The principal id of user assigned identity.
            PrincipalID *string `json:"principalId,omitempty"`
            // ClientID - READ-ONLY; The client id of user assigned identity.
            ClientID *string `json:"clientId,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ManagedServiceIdentityUserAssignedIdentitiesValue.
        func (msiAiv ManagedServiceIdentityUserAssignedIdentitiesValue)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                return json.Marshal(objectMap)
        }

            // NatGateway nat Gateway resource.
            type NatGateway struct {
            // Sku - The nat gateway SKU.
            Sku *NatGatewaySku `json:"sku,omitempty"`
            // NatGatewayPropertiesFormat - Nat Gateway properties.
            *NatGatewayPropertiesFormat `json:"properties,omitempty"`
            // Zones - A list of availability zones denoting the zone in which Nat Gateway should be deployed.
            Zones *[]string `json:"zones,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for NatGateway.
        func (ng NatGateway)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(ng.Sku != nil) {
                objectMap["sku"] = ng.Sku
                }
                if(ng.NatGatewayPropertiesFormat != nil) {
                objectMap["properties"] = ng.NatGatewayPropertiesFormat
                }
                if(ng.Zones != nil) {
                objectMap["zones"] = ng.Zones
                }
                if(ng.ID != nil) {
                objectMap["id"] = ng.ID
                }
                if(ng.Location != nil) {
                objectMap["location"] = ng.Location
                }
                if(ng.Tags != nil) {
                objectMap["tags"] = ng.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for NatGateway struct.
        func (ng *NatGateway) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "sku":
    if v != nil {
        var sku NatGatewaySku
        err = json.Unmarshal(*v, &sku)
    if err != nil {
    return err
    }
        ng.Sku = &sku
    }
                case "properties":
    if v != nil {
        var natGatewayPropertiesFormat NatGatewayPropertiesFormat
        err = json.Unmarshal(*v, &natGatewayPropertiesFormat)
    if err != nil {
    return err
    }
        ng.NatGatewayPropertiesFormat = &natGatewayPropertiesFormat
    }
                case "zones":
    if v != nil {
        var zones []string
        err = json.Unmarshal(*v, &zones)
    if err != nil {
    return err
    }
        ng.Zones = &zones
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        ng.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        ng.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        ng.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        ng.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        ng.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        ng.Tags = tags
    }
            }
        }

        return nil
        }

            // NatGatewayPropertiesFormat nat Gateway properties.
            type NatGatewayPropertiesFormat struct {
            // IdleTimeoutInMinutes - The idle timeout of the nat gateway.
            IdleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`
            // PublicIPAddresses - An array of public ip addresses associated with the nat gateway resource.
            PublicIPAddresses *[]SubResource `json:"publicIpAddresses,omitempty"`
            // PublicIPPrefixes - An array of public ip prefixes associated with the nat gateway resource.
            PublicIPPrefixes *[]SubResource `json:"publicIpPrefixes,omitempty"`
            // Subnets - READ-ONLY; An array of references to the subnets using this nat gateway resource.
            Subnets *[]SubResource `json:"subnets,omitempty"`
            // ResourceGUID - READ-ONLY; The resource GUID property of the NAT gateway resource.
            ResourceGUID *string `json:"resourceGuid,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the NAT gateway resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for NatGatewayPropertiesFormat.
        func (ngpf NatGatewayPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(ngpf.IdleTimeoutInMinutes != nil) {
                objectMap["idleTimeoutInMinutes"] = ngpf.IdleTimeoutInMinutes
                }
                if(ngpf.PublicIPAddresses != nil) {
                objectMap["publicIpAddresses"] = ngpf.PublicIPAddresses
                }
                if(ngpf.PublicIPPrefixes != nil) {
                objectMap["publicIpPrefixes"] = ngpf.PublicIPPrefixes
                }
                return json.Marshal(objectMap)
        }

            // NatGatewaySku SKU of nat gateway.
            type NatGatewaySku struct {
            // Name - Name of Nat Gateway SKU. Possible values include: 'NatGatewaySkuNameStandard'
            Name NatGatewaySkuName `json:"name,omitempty"`
            }

            // PrepareNetworkPoliciesRequest details of PrepareNetworkPolicies for Subnet.
            type PrepareNetworkPoliciesRequest struct {
            // ServiceName - The name of the service for which subnet is being prepared for.
            ServiceName *string `json:"serviceName,omitempty"`
            // NetworkIntentPolicyConfigurations - A list of NetworkIntentPolicyConfiguration.
            NetworkIntentPolicyConfigurations *[]IntentPolicyConfiguration `json:"networkIntentPolicyConfigurations,omitempty"`
            }

            // PrivateEndpoint private endpoint resource.
            type PrivateEndpoint struct {
            // ExtendedLocation - The extended location of the load balancer.
            ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`
            // PrivateEndpointProperties - Properties of the private endpoint.
            *PrivateEndpointProperties `json:"properties,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for PrivateEndpoint.
        func (peVar PrivateEndpoint)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(peVar.ExtendedLocation != nil) {
                objectMap["extendedLocation"] = peVar.ExtendedLocation
                }
                if(peVar.PrivateEndpointProperties != nil) {
                objectMap["properties"] = peVar.PrivateEndpointProperties
                }
                if(peVar.ID != nil) {
                objectMap["id"] = peVar.ID
                }
                if(peVar.Location != nil) {
                objectMap["location"] = peVar.Location
                }
                if(peVar.Tags != nil) {
                objectMap["tags"] = peVar.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for PrivateEndpoint struct.
        func (peVar *PrivateEndpoint) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "extendedLocation":
    if v != nil {
        var extendedLocation ExtendedLocation
        err = json.Unmarshal(*v, &extendedLocation)
    if err != nil {
    return err
    }
        peVar.ExtendedLocation = &extendedLocation
    }
                case "properties":
    if v != nil {
        var privateEndpointProperties PrivateEndpointProperties
        err = json.Unmarshal(*v, &privateEndpointProperties)
    if err != nil {
    return err
    }
        peVar.PrivateEndpointProperties = &privateEndpointProperties
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        peVar.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        peVar.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        peVar.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        peVar.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        peVar.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        peVar.Tags = tags
    }
            }
        }

        return nil
        }

            // PrivateEndpointConnection privateEndpointConnection resource.
            type PrivateEndpointConnection struct {
            // PrivateEndpointConnectionProperties - Properties of the private end point connection.
            *PrivateEndpointConnectionProperties `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; The resource type.
            Type *string `json:"type,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for PrivateEndpointConnection.
        func (pec PrivateEndpointConnection)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(pec.PrivateEndpointConnectionProperties != nil) {
                objectMap["properties"] = pec.PrivateEndpointConnectionProperties
                }
                if(pec.Name != nil) {
                objectMap["name"] = pec.Name
                }
                if(pec.ID != nil) {
                objectMap["id"] = pec.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for PrivateEndpointConnection struct.
        func (pec *PrivateEndpointConnection) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var privateEndpointConnectionProperties PrivateEndpointConnectionProperties
        err = json.Unmarshal(*v, &privateEndpointConnectionProperties)
    if err != nil {
    return err
    }
        pec.PrivateEndpointConnectionProperties = &privateEndpointConnectionProperties
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        pec.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        pec.Type = &typeVar
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        pec.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        pec.ID = &ID
    }
            }
        }

        return nil
        }

            // PrivateEndpointConnectionProperties properties of the PrivateEndpointConnectProperties.
            type PrivateEndpointConnectionProperties struct {
            // PrivateEndpoint - READ-ONLY; The resource of private end point.
            PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty"`
            // PrivateLinkServiceConnectionState - A collection of information about the state of the connection between service consumer and provider.
            PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the private endpoint connection resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // LinkIdentifier - READ-ONLY; The consumer link id.
            LinkIdentifier *string `json:"linkIdentifier,omitempty"`
            }

        // MarshalJSON is the custom marshaler for PrivateEndpointConnectionProperties.
        func (pecp PrivateEndpointConnectionProperties)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(pecp.PrivateLinkServiceConnectionState != nil) {
                objectMap["privateLinkServiceConnectionState"] = pecp.PrivateLinkServiceConnectionState
                }
                return json.Marshal(objectMap)
        }

            // PrivateEndpointIPConfiguration an IP Configuration of the private endpoint.
            type PrivateEndpointIPConfiguration struct {
            // PrivateEndpointIPConfigurationProperties - Properties of private endpoint IP configurations.
            *PrivateEndpointIPConfigurationProperties `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within a resource group.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; The resource type.
            Type *string `json:"type,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            }

        // MarshalJSON is the custom marshaler for PrivateEndpointIPConfiguration.
        func (peic PrivateEndpointIPConfiguration)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(peic.PrivateEndpointIPConfigurationProperties != nil) {
                objectMap["properties"] = peic.PrivateEndpointIPConfigurationProperties
                }
                if(peic.Name != nil) {
                objectMap["name"] = peic.Name
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for PrivateEndpointIPConfiguration struct.
        func (peic *PrivateEndpointIPConfiguration) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var privateEndpointIPConfigurationProperties PrivateEndpointIPConfigurationProperties
        err = json.Unmarshal(*v, &privateEndpointIPConfigurationProperties)
    if err != nil {
    return err
    }
        peic.PrivateEndpointIPConfigurationProperties = &privateEndpointIPConfigurationProperties
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        peic.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        peic.Type = &typeVar
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        peic.Etag = &etag
    }
            }
        }

        return nil
        }

            // PrivateEndpointIPConfigurationProperties properties of an IP Configuration of the private endpoint.
            type PrivateEndpointIPConfigurationProperties struct {
            // GroupID - The ID of a group obtained from the remote resource that this private endpoint should connect to.
            GroupID *string `json:"groupId,omitempty"`
            // MemberName - The member name of a group obtained from the remote resource that this private endpoint should connect to.
            MemberName *string `json:"memberName,omitempty"`
            // PrivateIPAddress - A private ip address obtained from the private endpoint's subnet.
            PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
            }

            // PrivateEndpointProperties properties of the private endpoint.
            type PrivateEndpointProperties struct {
            // Subnet - The ID of the subnet from which the private IP will be allocated.
            Subnet *Subnet `json:"subnet,omitempty"`
            // NetworkInterfaces - READ-ONLY; An array of references to the network interfaces created for this private endpoint.
            NetworkInterfaces *[]Interface `json:"networkInterfaces,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the private endpoint resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // PrivateLinkServiceConnections - A grouping of information about the connection to the remote resource.
            PrivateLinkServiceConnections *[]PrivateLinkServiceConnection `json:"privateLinkServiceConnections,omitempty"`
            // ManualPrivateLinkServiceConnections - A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource.
            ManualPrivateLinkServiceConnections *[]PrivateLinkServiceConnection `json:"manualPrivateLinkServiceConnections,omitempty"`
            // CustomDNSConfigs - An array of custom dns configurations.
            CustomDNSConfigs *[]CustomDNSConfigPropertiesFormat `json:"customDnsConfigs,omitempty"`
            // ApplicationSecurityGroups - Application security groups in which the private endpoint IP configuration is included.
            ApplicationSecurityGroups *[]ApplicationSecurityGroup `json:"applicationSecurityGroups,omitempty"`
            // IPConfigurations - A list of IP configurations of the private endpoint. This will be used to map to the First Party Service's endpoints.
            IPConfigurations *[]PrivateEndpointIPConfiguration `json:"ipConfigurations,omitempty"`
            }

        // MarshalJSON is the custom marshaler for PrivateEndpointProperties.
        func (pep PrivateEndpointProperties)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(pep.Subnet != nil) {
                objectMap["subnet"] = pep.Subnet
                }
                if(pep.PrivateLinkServiceConnections != nil) {
                objectMap["privateLinkServiceConnections"] = pep.PrivateLinkServiceConnections
                }
                if(pep.ManualPrivateLinkServiceConnections != nil) {
                objectMap["manualPrivateLinkServiceConnections"] = pep.ManualPrivateLinkServiceConnections
                }
                if(pep.CustomDNSConfigs != nil) {
                objectMap["customDnsConfigs"] = pep.CustomDNSConfigs
                }
                if(pep.ApplicationSecurityGroups != nil) {
                objectMap["applicationSecurityGroups"] = pep.ApplicationSecurityGroups
                }
                if(pep.IPConfigurations != nil) {
                objectMap["ipConfigurations"] = pep.IPConfigurations
                }
                return json.Marshal(objectMap)
        }

            // PrivateLinkService private link service resource.
            type PrivateLinkService struct {
            // ExtendedLocation - The extended location of the load balancer.
            ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`
            // PrivateLinkServiceProperties - Properties of the private link service.
            *PrivateLinkServiceProperties `json:"properties,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for PrivateLinkService.
        func (pls PrivateLinkService)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(pls.ExtendedLocation != nil) {
                objectMap["extendedLocation"] = pls.ExtendedLocation
                }
                if(pls.PrivateLinkServiceProperties != nil) {
                objectMap["properties"] = pls.PrivateLinkServiceProperties
                }
                if(pls.ID != nil) {
                objectMap["id"] = pls.ID
                }
                if(pls.Location != nil) {
                objectMap["location"] = pls.Location
                }
                if(pls.Tags != nil) {
                objectMap["tags"] = pls.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for PrivateLinkService struct.
        func (pls *PrivateLinkService) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "extendedLocation":
    if v != nil {
        var extendedLocation ExtendedLocation
        err = json.Unmarshal(*v, &extendedLocation)
    if err != nil {
    return err
    }
        pls.ExtendedLocation = &extendedLocation
    }
                case "properties":
    if v != nil {
        var privateLinkServiceProperties PrivateLinkServiceProperties
        err = json.Unmarshal(*v, &privateLinkServiceProperties)
    if err != nil {
    return err
    }
        pls.PrivateLinkServiceProperties = &privateLinkServiceProperties
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        pls.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        pls.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        pls.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        pls.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        pls.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        pls.Tags = tags
    }
            }
        }

        return nil
        }

            // PrivateLinkServiceConnection privateLinkServiceConnection resource.
            type PrivateLinkServiceConnection struct {
            // PrivateLinkServiceConnectionProperties - Properties of the private link service connection.
            *PrivateLinkServiceConnectionProperties `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; The resource type.
            Type *string `json:"type,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for PrivateLinkServiceConnection.
        func (plsc PrivateLinkServiceConnection)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(plsc.PrivateLinkServiceConnectionProperties != nil) {
                objectMap["properties"] = plsc.PrivateLinkServiceConnectionProperties
                }
                if(plsc.Name != nil) {
                objectMap["name"] = plsc.Name
                }
                if(plsc.ID != nil) {
                objectMap["id"] = plsc.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for PrivateLinkServiceConnection struct.
        func (plsc *PrivateLinkServiceConnection) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var privateLinkServiceConnectionProperties PrivateLinkServiceConnectionProperties
        err = json.Unmarshal(*v, &privateLinkServiceConnectionProperties)
    if err != nil {
    return err
    }
        plsc.PrivateLinkServiceConnectionProperties = &privateLinkServiceConnectionProperties
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        plsc.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        plsc.Type = &typeVar
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        plsc.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        plsc.ID = &ID
    }
            }
        }

        return nil
        }

            // PrivateLinkServiceConnectionProperties properties of the PrivateLinkServiceConnection.
            type PrivateLinkServiceConnectionProperties struct {
            // ProvisioningState - READ-ONLY; The provisioning state of the private link service connection resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // PrivateLinkServiceID - The resource id of private link service.
            PrivateLinkServiceID *string `json:"privateLinkServiceId,omitempty"`
            // GroupIds - The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to.
            GroupIds *[]string `json:"groupIds,omitempty"`
            // RequestMessage - A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars.
            RequestMessage *string `json:"requestMessage,omitempty"`
            // PrivateLinkServiceConnectionState - A collection of read-only information about the state of the connection to the remote resource.
            PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for PrivateLinkServiceConnectionProperties.
        func (plscp PrivateLinkServiceConnectionProperties)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(plscp.PrivateLinkServiceID != nil) {
                objectMap["privateLinkServiceId"] = plscp.PrivateLinkServiceID
                }
                if(plscp.GroupIds != nil) {
                objectMap["groupIds"] = plscp.GroupIds
                }
                if(plscp.RequestMessage != nil) {
                objectMap["requestMessage"] = plscp.RequestMessage
                }
                if(plscp.PrivateLinkServiceConnectionState != nil) {
                objectMap["privateLinkServiceConnectionState"] = plscp.PrivateLinkServiceConnectionState
                }
                return json.Marshal(objectMap)
        }

            // PrivateLinkServiceConnectionState a collection of information about the state of the connection between
            // service consumer and provider.
            type PrivateLinkServiceConnectionState struct {
            // Status - Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
            Status *string `json:"status,omitempty"`
            // Description - The reason for approval/rejection of the connection.
            Description *string `json:"description,omitempty"`
            // ActionsRequired - A message indicating if changes on the service provider require any updates on the consumer.
            ActionsRequired *string `json:"actionsRequired,omitempty"`
            }

            // PrivateLinkServiceIPConfiguration the private link service ip configuration.
            type PrivateLinkServiceIPConfiguration struct {
            // PrivateLinkServiceIPConfigurationProperties - Properties of the private link service ip configuration.
            *PrivateLinkServiceIPConfigurationProperties `json:"properties,omitempty"`
            // Name - The name of private link service ip configuration.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; The resource type.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for PrivateLinkServiceIPConfiguration.
        func (plsic PrivateLinkServiceIPConfiguration)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(plsic.PrivateLinkServiceIPConfigurationProperties != nil) {
                objectMap["properties"] = plsic.PrivateLinkServiceIPConfigurationProperties
                }
                if(plsic.Name != nil) {
                objectMap["name"] = plsic.Name
                }
                if(plsic.ID != nil) {
                objectMap["id"] = plsic.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for PrivateLinkServiceIPConfiguration struct.
        func (plsic *PrivateLinkServiceIPConfiguration) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var privateLinkServiceIPConfigurationProperties PrivateLinkServiceIPConfigurationProperties
        err = json.Unmarshal(*v, &privateLinkServiceIPConfigurationProperties)
    if err != nil {
    return err
    }
        plsic.PrivateLinkServiceIPConfigurationProperties = &privateLinkServiceIPConfigurationProperties
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        plsic.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        plsic.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        plsic.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        plsic.ID = &ID
    }
            }
        }

        return nil
        }

            // PrivateLinkServiceIPConfigurationProperties properties of private link service IP configuration.
            type PrivateLinkServiceIPConfigurationProperties struct {
            // PrivateIPAddress - The private IP address of the IP configuration.
            PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
            // PrivateIPAllocationMethod - The private IP address allocation method. Possible values include: 'Static', 'Dynamic'
            PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
            // Subnet - The reference to the subnet resource.
            Subnet *Subnet `json:"subnet,omitempty"`
            // Primary - Whether the ip configuration is primary or not.
            Primary *bool `json:"primary,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the private link service IP configuration resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // PrivateIPAddressVersion - Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4. Possible values include: 'IPv4', 'IPv6'
            PrivateIPAddressVersion IPVersion `json:"privateIPAddressVersion,omitempty"`
            }

        // MarshalJSON is the custom marshaler for PrivateLinkServiceIPConfigurationProperties.
        func (plsicp PrivateLinkServiceIPConfigurationProperties)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(plsicp.PrivateIPAddress != nil) {
                objectMap["privateIPAddress"] = plsicp.PrivateIPAddress
                }
                if(plsicp.PrivateIPAllocationMethod != "") {
                objectMap["privateIPAllocationMethod"] = plsicp.PrivateIPAllocationMethod
                }
                if(plsicp.Subnet != nil) {
                objectMap["subnet"] = plsicp.Subnet
                }
                if(plsicp.Primary != nil) {
                objectMap["primary"] = plsicp.Primary
                }
                if(plsicp.PrivateIPAddressVersion != "") {
                objectMap["privateIPAddressVersion"] = plsicp.PrivateIPAddressVersion
                }
                return json.Marshal(objectMap)
        }

            // PrivateLinkServiceProperties properties of the private link service.
            type PrivateLinkServiceProperties struct {
            // LoadBalancerFrontendIPConfigurations - An array of references to the load balancer IP configurations.
            LoadBalancerFrontendIPConfigurations *[]FrontendIPConfiguration `json:"loadBalancerFrontendIpConfigurations,omitempty"`
            // IPConfigurations - An array of private link service IP configurations.
            IPConfigurations *[]PrivateLinkServiceIPConfiguration `json:"ipConfigurations,omitempty"`
            // NetworkInterfaces - READ-ONLY; An array of references to the network interfaces created for this private link service.
            NetworkInterfaces *[]Interface `json:"networkInterfaces,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the private link service resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // PrivateEndpointConnections - READ-ONLY; An array of list about connections to the private endpoint.
            PrivateEndpointConnections *[]PrivateEndpointConnection `json:"privateEndpointConnections,omitempty"`
            // Visibility - The visibility list of the private link service.
            Visibility *PrivateLinkServicePropertiesVisibility `json:"visibility,omitempty"`
            // AutoApproval - The auto-approval list of the private link service.
            AutoApproval *PrivateLinkServicePropertiesAutoApproval `json:"autoApproval,omitempty"`
            // Fqdns - The list of Fqdn.
            Fqdns *[]string `json:"fqdns,omitempty"`
            // Alias - READ-ONLY; The alias of the private link service.
            Alias *string `json:"alias,omitempty"`
            // EnableProxyProtocol - Whether the private link service is enabled for proxy protocol or not.
            EnableProxyProtocol *bool `json:"enableProxyProtocol,omitempty"`
            }

        // MarshalJSON is the custom marshaler for PrivateLinkServiceProperties.
        func (plsp PrivateLinkServiceProperties)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(plsp.LoadBalancerFrontendIPConfigurations != nil) {
                objectMap["loadBalancerFrontendIpConfigurations"] = plsp.LoadBalancerFrontendIPConfigurations
                }
                if(plsp.IPConfigurations != nil) {
                objectMap["ipConfigurations"] = plsp.IPConfigurations
                }
                if(plsp.Visibility != nil) {
                objectMap["visibility"] = plsp.Visibility
                }
                if(plsp.AutoApproval != nil) {
                objectMap["autoApproval"] = plsp.AutoApproval
                }
                if(plsp.Fqdns != nil) {
                objectMap["fqdns"] = plsp.Fqdns
                }
                if(plsp.EnableProxyProtocol != nil) {
                objectMap["enableProxyProtocol"] = plsp.EnableProxyProtocol
                }
                return json.Marshal(objectMap)
        }

            // PrivateLinkServicePropertiesAutoApproval the auto-approval list of the private link service.
            type PrivateLinkServicePropertiesAutoApproval struct {
            // Subscriptions - The list of subscriptions.
            Subscriptions *[]string `json:"subscriptions,omitempty"`
            }

            // PrivateLinkServicePropertiesVisibility the visibility list of the private link service.
            type PrivateLinkServicePropertiesVisibility struct {
            // Subscriptions - The list of subscriptions.
            Subscriptions *[]string `json:"subscriptions,omitempty"`
            }

            // PublicIPAddress public IP address resource.
            type PublicIPAddress struct {
            autorest.Response `json:"-"`
            // ExtendedLocation - The extended location of the public ip address.
            ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`
            // Sku - The public IP address SKU.
            Sku *PublicIPAddressSku `json:"sku,omitempty"`
            // PublicIPAddressPropertiesFormat - Public IP address properties.
            *PublicIPAddressPropertiesFormat `json:"properties,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Zones - A list of availability zones denoting the IP allocated for the resource needs to come from.
            Zones *[]string `json:"zones,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for PublicIPAddress.
        func (pia PublicIPAddress)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(pia.ExtendedLocation != nil) {
                objectMap["extendedLocation"] = pia.ExtendedLocation
                }
                if(pia.Sku != nil) {
                objectMap["sku"] = pia.Sku
                }
                if(pia.PublicIPAddressPropertiesFormat != nil) {
                objectMap["properties"] = pia.PublicIPAddressPropertiesFormat
                }
                if(pia.Zones != nil) {
                objectMap["zones"] = pia.Zones
                }
                if(pia.ID != nil) {
                objectMap["id"] = pia.ID
                }
                if(pia.Location != nil) {
                objectMap["location"] = pia.Location
                }
                if(pia.Tags != nil) {
                objectMap["tags"] = pia.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for PublicIPAddress struct.
        func (pia *PublicIPAddress) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "extendedLocation":
    if v != nil {
        var extendedLocation ExtendedLocation
        err = json.Unmarshal(*v, &extendedLocation)
    if err != nil {
    return err
    }
        pia.ExtendedLocation = &extendedLocation
    }
                case "sku":
    if v != nil {
        var sku PublicIPAddressSku
        err = json.Unmarshal(*v, &sku)
    if err != nil {
    return err
    }
        pia.Sku = &sku
    }
                case "properties":
    if v != nil {
        var publicIPAddressPropertiesFormat PublicIPAddressPropertiesFormat
        err = json.Unmarshal(*v, &publicIPAddressPropertiesFormat)
    if err != nil {
    return err
    }
        pia.PublicIPAddressPropertiesFormat = &publicIPAddressPropertiesFormat
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        pia.Etag = &etag
    }
                case "zones":
    if v != nil {
        var zones []string
        err = json.Unmarshal(*v, &zones)
    if err != nil {
    return err
    }
        pia.Zones = &zones
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        pia.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        pia.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        pia.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        pia.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        pia.Tags = tags
    }
            }
        }

        return nil
        }

            // PublicIPAddressDNSSettings contains FQDN of the DNS record associated with the public IP address.
            type PublicIPAddressDNSSettings struct {
            // DomainNameLabel - The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.
            DomainNameLabel *string `json:"domainNameLabel,omitempty"`
            // Fqdn - The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
            Fqdn *string `json:"fqdn,omitempty"`
            // ReverseFqdn - The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
            ReverseFqdn *string `json:"reverseFqdn,omitempty"`
            }

            // PublicIPAddressListResult response for ListPublicIpAddresses API service call.
            type PublicIPAddressListResult struct {
            autorest.Response `json:"-"`
            // Value - A list of public IP addresses that exists in a resource group.
            Value *[]PublicIPAddress `json:"value,omitempty"`
            // NextLink - The URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

            // PublicIPAddressListResultIterator provides access to a complete listing of PublicIPAddress values.
            type PublicIPAddressListResultIterator struct {
                i int
                page PublicIPAddressListResultPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * PublicIPAddressListResultIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/PublicIPAddressListResultIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * PublicIPAddressListResultIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter PublicIPAddressListResultIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter PublicIPAddressListResultIterator) Response() PublicIPAddressListResult {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter PublicIPAddressListResultIterator) Value() PublicIPAddress {
        if !iter.page.NotDone() {
        return PublicIPAddress{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the PublicIPAddressListResultIterator type.
        func NewPublicIPAddressListResultIterator (page PublicIPAddressListResultPage) PublicIPAddressListResultIterator {
        return PublicIPAddressListResultIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (pialr PublicIPAddressListResult) IsEmpty() bool {
                return pialr.Value == nil || len(*pialr.Value) == 0
                }

                // hasNextLink returns true if the NextLink is not empty.
                func (pialr PublicIPAddressListResult) hasNextLink() bool {
                return pialr.NextLink != nil && len(*pialr.NextLink) != 0
                }
                    // publicIPAddressListResultPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (pialr PublicIPAddressListResult) publicIPAddressListResultPreparer(ctx context.Context) (*http.Request, error) {
                    if !pialr.hasNextLink() {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( pialr.NextLink)));
                    }

            // PublicIPAddressListResultPage contains a page of PublicIPAddress values.
            type PublicIPAddressListResultPage struct {
                fn func(context.Context, PublicIPAddressListResult) (PublicIPAddressListResult, error)
                pialr PublicIPAddressListResult
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * PublicIPAddressListResultPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/PublicIPAddressListResultPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        for {
        next, err := page.fn(ctx, page.pialr)
        if err != nil {
        return err
        }
        page.pialr = next
        if !next.hasNextLink() || !next.IsEmpty() {
        break
        }
        }
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * PublicIPAddressListResultPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page PublicIPAddressListResultPage) NotDone() bool {
        return !page.pialr.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page PublicIPAddressListResultPage) Response() PublicIPAddressListResult {
        return page.pialr
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page PublicIPAddressListResultPage) Values() []PublicIPAddress {
        if page.pialr.IsEmpty() {
        return nil
        }
        return *page.pialr.Value
        }
        // Creates a new instance of the PublicIPAddressListResultPage type.
        func NewPublicIPAddressListResultPage (cur PublicIPAddressListResult, getNextPage func(context.Context, PublicIPAddressListResult) (PublicIPAddressListResult, error)) PublicIPAddressListResultPage {
        return PublicIPAddressListResultPage{
        fn: getNextPage,
        pialr: cur,
        }
        }

            // PublicIPAddressPropertiesFormat public IP address properties.
            type PublicIPAddressPropertiesFormat struct {
            // PublicIPAllocationMethod - The public IP address allocation method. Possible values include: 'Static', 'Dynamic'
            PublicIPAllocationMethod IPAllocationMethod `json:"publicIPAllocationMethod,omitempty"`
            // PublicIPAddressVersion - The public IP address version. Possible values include: 'IPv4', 'IPv6'
            PublicIPAddressVersion IPVersion `json:"publicIPAddressVersion,omitempty"`
            // IPConfiguration - READ-ONLY; The IP configuration associated with the public IP address.
            IPConfiguration *IPConfiguration `json:"ipConfiguration,omitempty"`
            // DNSSettings - The FQDN of the DNS record associated with the public IP address.
            DNSSettings *PublicIPAddressDNSSettings `json:"dnsSettings,omitempty"`
            // DdosSettings - The DDoS protection custom policy associated with the public IP address.
            DdosSettings *DdosSettings `json:"ddosSettings,omitempty"`
            // IPTags - The list of tags associated with the public IP address.
            IPTags *[]IPTag `json:"ipTags,omitempty"`
            // IPAddress - The IP address associated with the public IP address resource.
            IPAddress *string `json:"ipAddress,omitempty"`
            // PublicIPPrefix - The Public IP Prefix this Public IP Address should be allocated from.
            PublicIPPrefix *SubResource `json:"publicIPPrefix,omitempty"`
            // IdleTimeoutInMinutes - The idle timeout of the public IP address.
            IdleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`
            // ResourceGUID - READ-ONLY; The resource GUID property of the public IP address resource.
            ResourceGUID *string `json:"resourceGuid,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the public IP address resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // ServicePublicIPAddress - The service public IP address of the public IP address resource.
            ServicePublicIPAddress *PublicIPAddress `json:"servicePublicIPAddress,omitempty"`
            // NatGateway - The NatGateway for the Public IP address.
            NatGateway *NatGateway `json:"natGateway,omitempty"`
            // MigrationPhase - Migration phase of Public IP Address. Possible values include: 'PublicIPAddressMigrationPhaseNone', 'PublicIPAddressMigrationPhasePrepare', 'PublicIPAddressMigrationPhaseCommit', 'PublicIPAddressMigrationPhaseAbort', 'PublicIPAddressMigrationPhaseCommitted'
            MigrationPhase PublicIPAddressMigrationPhase `json:"migrationPhase,omitempty"`
            // LinkedPublicIPAddress - The linked public IP address of the public IP address resource.
            LinkedPublicIPAddress *PublicIPAddress `json:"linkedPublicIPAddress,omitempty"`
            // DeleteOption - Specify what happens to the public IP address when the VM using it is deleted. Possible values include: 'Delete', 'Detach'
            DeleteOption DeleteOptions `json:"deleteOption,omitempty"`
            }

        // MarshalJSON is the custom marshaler for PublicIPAddressPropertiesFormat.
        func (piapf PublicIPAddressPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(piapf.PublicIPAllocationMethod != "") {
                objectMap["publicIPAllocationMethod"] = piapf.PublicIPAllocationMethod
                }
                if(piapf.PublicIPAddressVersion != "") {
                objectMap["publicIPAddressVersion"] = piapf.PublicIPAddressVersion
                }
                if(piapf.DNSSettings != nil) {
                objectMap["dnsSettings"] = piapf.DNSSettings
                }
                if(piapf.DdosSettings != nil) {
                objectMap["ddosSettings"] = piapf.DdosSettings
                }
                if(piapf.IPTags != nil) {
                objectMap["ipTags"] = piapf.IPTags
                }
                if(piapf.IPAddress != nil) {
                objectMap["ipAddress"] = piapf.IPAddress
                }
                if(piapf.PublicIPPrefix != nil) {
                objectMap["publicIPPrefix"] = piapf.PublicIPPrefix
                }
                if(piapf.IdleTimeoutInMinutes != nil) {
                objectMap["idleTimeoutInMinutes"] = piapf.IdleTimeoutInMinutes
                }
                if(piapf.ServicePublicIPAddress != nil) {
                objectMap["servicePublicIPAddress"] = piapf.ServicePublicIPAddress
                }
                if(piapf.NatGateway != nil) {
                objectMap["natGateway"] = piapf.NatGateway
                }
                if(piapf.MigrationPhase != "") {
                objectMap["migrationPhase"] = piapf.MigrationPhase
                }
                if(piapf.LinkedPublicIPAddress != nil) {
                objectMap["linkedPublicIPAddress"] = piapf.LinkedPublicIPAddress
                }
                if(piapf.DeleteOption != "") {
                objectMap["deleteOption"] = piapf.DeleteOption
                }
                return json.Marshal(objectMap)
        }

            // PublicIPAddressSku SKU of a public IP address.
            type PublicIPAddressSku struct {
            // Name - Name of a public IP address SKU. Possible values include: 'PublicIPAddressSkuNameBasic', 'PublicIPAddressSkuNameStandard'
            Name PublicIPAddressSkuName `json:"name,omitempty"`
            // Tier - Tier of a public IP address SKU. Possible values include: 'Regional', 'Global'
            Tier PublicIPAddressSkuTier `json:"tier,omitempty"`
            }

            // PublicIPAddressesCreateOrUpdateFuture an abstraction for monitoring and retrieving the results of a
            // long-running operation.
            type PublicIPAddressesCreateOrUpdateFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(PublicIPAddressesClient) (PublicIPAddress, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *PublicIPAddressesCreateOrUpdateFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for PublicIPAddressesCreateOrUpdateFuture.Result.
        func (future *PublicIPAddressesCreateOrUpdateFuture) result(client PublicIPAddressesClient) (pia PublicIPAddress, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.PublicIPAddressesCreateOrUpdateFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    pia.Response.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.PublicIPAddressesCreateOrUpdateFuture")
                return
            }
            sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if pia.Response.Response, err = future.GetResult(sender); err == nil && pia.Response.Response.StatusCode != http.StatusNoContent {
            pia, err = client.CreateOrUpdateResponder(pia.Response.Response)
            if err != nil {
            err = autorest.NewErrorWithError(err, "network.PublicIPAddressesCreateOrUpdateFuture", "Result", pia.Response.Response, "Failure responding to request")
            }
            }
            return
        }

            // PublicIPAddressesDeleteFuture an abstraction for monitoring and retrieving the results of a long-running
            // operation.
            type PublicIPAddressesDeleteFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(PublicIPAddressesClient) (autorest.Response, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *PublicIPAddressesDeleteFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for PublicIPAddressesDeleteFuture.Result.
        func (future *PublicIPAddressesDeleteFuture) result(client PublicIPAddressesClient) (ar autorest.Response, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.PublicIPAddressesDeleteFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ar.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.PublicIPAddressesDeleteFuture")
                return
            }
            ar.Response = future.Response()
        return
        }

            // Resource common resource representation.
            type Resource struct {
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for Resource.
        func (r Resource)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(r.ID != nil) {
                objectMap["id"] = r.ID
                }
                if(r.Location != nil) {
                objectMap["location"] = r.Location
                }
                if(r.Tags != nil) {
                objectMap["tags"] = r.Tags
                }
                return json.Marshal(objectMap)
        }

            // ResourceNavigationLink resourceNavigationLink resource.
            type ResourceNavigationLink struct {
            // ResourceNavigationLinkFormat - Resource navigation link properties format.
            *ResourceNavigationLinkFormat `json:"properties,omitempty"`
            // Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ResourceNavigationLink.
        func (rnl ResourceNavigationLink)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(rnl.ResourceNavigationLinkFormat != nil) {
                objectMap["properties"] = rnl.ResourceNavigationLinkFormat
                }
                if(rnl.Name != nil) {
                objectMap["name"] = rnl.Name
                }
                if(rnl.ID != nil) {
                objectMap["id"] = rnl.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ResourceNavigationLink struct.
        func (rnl *ResourceNavigationLink) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var resourceNavigationLinkFormat ResourceNavigationLinkFormat
        err = json.Unmarshal(*v, &resourceNavigationLinkFormat)
    if err != nil {
    return err
    }
        rnl.ResourceNavigationLinkFormat = &resourceNavigationLinkFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        rnl.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        rnl.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        rnl.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        rnl.ID = &ID
    }
            }
        }

        return nil
        }

            // ResourceNavigationLinkFormat properties of ResourceNavigationLink.
            type ResourceNavigationLinkFormat struct {
            // LinkedResourceType - Resource type of the linked resource.
            LinkedResourceType *string `json:"linkedResourceType,omitempty"`
            // Link - Link to the external resource.
            Link *string `json:"link,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the resource navigation link resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ResourceNavigationLinkFormat.
        func (rnlf ResourceNavigationLinkFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(rnlf.LinkedResourceType != nil) {
                objectMap["linkedResourceType"] = rnlf.LinkedResourceType
                }
                if(rnlf.Link != nil) {
                objectMap["link"] = rnlf.Link
                }
                return json.Marshal(objectMap)
        }

            // ResourceNavigationLinksListResult response for ResourceNavigationLinks_List operation.
            type ResourceNavigationLinksListResult struct {
            autorest.Response `json:"-"`
            // Value - The resource navigation links in a subnet.
            Value *[]ResourceNavigationLink `json:"value,omitempty"`
            // NextLink - READ-ONLY; The URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ResourceNavigationLinksListResult.
        func (rnllr ResourceNavigationLinksListResult)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(rnllr.Value != nil) {
                objectMap["value"] = rnllr.Value
                }
                return json.Marshal(objectMap)
        }

            // ResourceSet the base resource set for visibility and auto-approval.
            type ResourceSet struct {
            // Subscriptions - The list of subscriptions.
            Subscriptions *[]string `json:"subscriptions,omitempty"`
            }

            // RetentionPolicyParameters parameters that define the retention policy for flow log.
            type RetentionPolicyParameters struct {
            // Days - Number of days to retain flow log records.
            Days *int32 `json:"days,omitempty"`
            // Enabled - Flag to enable/disable retention.
            Enabled *bool `json:"enabled,omitempty"`
            }

            // Route route resource.
            type Route struct {
            autorest.Response `json:"-"`
            // RoutePropertiesFormat - Properties of the route.
            *RoutePropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - The type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for Route.
        func (r Route)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(r.RoutePropertiesFormat != nil) {
                objectMap["properties"] = r.RoutePropertiesFormat
                }
                if(r.Name != nil) {
                objectMap["name"] = r.Name
                }
                if(r.Type != nil) {
                objectMap["type"] = r.Type
                }
                if(r.ID != nil) {
                objectMap["id"] = r.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for Route struct.
        func (r *Route) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var routePropertiesFormat RoutePropertiesFormat
        err = json.Unmarshal(*v, &routePropertiesFormat)
    if err != nil {
    return err
    }
        r.RoutePropertiesFormat = &routePropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        r.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        r.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        r.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        r.ID = &ID
    }
            }
        }

        return nil
        }

            // RouteListResult response for the ListRoute API service call.
            type RouteListResult struct {
            autorest.Response `json:"-"`
            // Value - A list of routes in a resource group.
            Value *[]Route `json:"value,omitempty"`
            // NextLink - The URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

            // RouteListResultIterator provides access to a complete listing of Route values.
            type RouteListResultIterator struct {
                i int
                page RouteListResultPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * RouteListResultIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/RouteListResultIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * RouteListResultIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter RouteListResultIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter RouteListResultIterator) Response() RouteListResult {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter RouteListResultIterator) Value() Route {
        if !iter.page.NotDone() {
        return Route{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the RouteListResultIterator type.
        func NewRouteListResultIterator (page RouteListResultPage) RouteListResultIterator {
        return RouteListResultIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (rlr RouteListResult) IsEmpty() bool {
                return rlr.Value == nil || len(*rlr.Value) == 0
                }

                // hasNextLink returns true if the NextLink is not empty.
                func (rlr RouteListResult) hasNextLink() bool {
                return rlr.NextLink != nil && len(*rlr.NextLink) != 0
                }
                    // routeListResultPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (rlr RouteListResult) routeListResultPreparer(ctx context.Context) (*http.Request, error) {
                    if !rlr.hasNextLink() {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( rlr.NextLink)));
                    }

            // RouteListResultPage contains a page of Route values.
            type RouteListResultPage struct {
                fn func(context.Context, RouteListResult) (RouteListResult, error)
                rlr RouteListResult
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * RouteListResultPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/RouteListResultPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        for {
        next, err := page.fn(ctx, page.rlr)
        if err != nil {
        return err
        }
        page.rlr = next
        if !next.hasNextLink() || !next.IsEmpty() {
        break
        }
        }
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * RouteListResultPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page RouteListResultPage) NotDone() bool {
        return !page.rlr.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page RouteListResultPage) Response() RouteListResult {
        return page.rlr
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page RouteListResultPage) Values() []Route {
        if page.rlr.IsEmpty() {
        return nil
        }
        return *page.rlr.Value
        }
        // Creates a new instance of the RouteListResultPage type.
        func NewRouteListResultPage (cur RouteListResult, getNextPage func(context.Context, RouteListResult) (RouteListResult, error)) RouteListResultPage {
        return RouteListResultPage{
        fn: getNextPage,
        rlr: cur,
        }
        }

            // RoutePropertiesFormat route resource.
            type RoutePropertiesFormat struct {
            // AddressPrefix - The destination CIDR to which the route applies.
            AddressPrefix *string `json:"addressPrefix,omitempty"`
            // NextHopType - The type of Azure hop the packet should be sent to. Possible values include: 'RouteNextHopTypeVirtualNetworkGateway', 'RouteNextHopTypeVnetLocal', 'RouteNextHopTypeInternet', 'RouteNextHopTypeVirtualAppliance', 'RouteNextHopTypeNone'
            NextHopType RouteNextHopType `json:"nextHopType,omitempty"`
            // NextHopIPAddress - The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
            NextHopIPAddress *string `json:"nextHopIpAddress,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the route resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // HasBgpOverride - A value indicating whether this route overrides overlapping BGP routes regardless of LPM.
            HasBgpOverride *bool `json:"hasBgpOverride,omitempty"`
            }

        // MarshalJSON is the custom marshaler for RoutePropertiesFormat.
        func (rpf RoutePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(rpf.AddressPrefix != nil) {
                objectMap["addressPrefix"] = rpf.AddressPrefix
                }
                if(rpf.NextHopType != "") {
                objectMap["nextHopType"] = rpf.NextHopType
                }
                if(rpf.NextHopIPAddress != nil) {
                objectMap["nextHopIpAddress"] = rpf.NextHopIPAddress
                }
                if(rpf.HasBgpOverride != nil) {
                objectMap["hasBgpOverride"] = rpf.HasBgpOverride
                }
                return json.Marshal(objectMap)
        }

            // RouteTable route table resource.
            type RouteTable struct {
            autorest.Response `json:"-"`
            // RouteTablePropertiesFormat - Properties of the route table.
            *RouteTablePropertiesFormat `json:"properties,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for RouteTable.
        func (rt RouteTable)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(rt.RouteTablePropertiesFormat != nil) {
                objectMap["properties"] = rt.RouteTablePropertiesFormat
                }
                if(rt.ID != nil) {
                objectMap["id"] = rt.ID
                }
                if(rt.Location != nil) {
                objectMap["location"] = rt.Location
                }
                if(rt.Tags != nil) {
                objectMap["tags"] = rt.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for RouteTable struct.
        func (rt *RouteTable) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var routeTablePropertiesFormat RouteTablePropertiesFormat
        err = json.Unmarshal(*v, &routeTablePropertiesFormat)
    if err != nil {
    return err
    }
        rt.RouteTablePropertiesFormat = &routeTablePropertiesFormat
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        rt.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        rt.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        rt.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        rt.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        rt.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        rt.Tags = tags
    }
            }
        }

        return nil
        }

            // RouteTableListResult response for the ListRouteTable API service call.
            type RouteTableListResult struct {
            autorest.Response `json:"-"`
            // Value - A list of route tables in a resource group.
            Value *[]RouteTable `json:"value,omitempty"`
            // NextLink - The URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

            // RouteTableListResultIterator provides access to a complete listing of RouteTable values.
            type RouteTableListResultIterator struct {
                i int
                page RouteTableListResultPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * RouteTableListResultIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/RouteTableListResultIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * RouteTableListResultIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter RouteTableListResultIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter RouteTableListResultIterator) Response() RouteTableListResult {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter RouteTableListResultIterator) Value() RouteTable {
        if !iter.page.NotDone() {
        return RouteTable{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the RouteTableListResultIterator type.
        func NewRouteTableListResultIterator (page RouteTableListResultPage) RouteTableListResultIterator {
        return RouteTableListResultIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (rtlr RouteTableListResult) IsEmpty() bool {
                return rtlr.Value == nil || len(*rtlr.Value) == 0
                }

                // hasNextLink returns true if the NextLink is not empty.
                func (rtlr RouteTableListResult) hasNextLink() bool {
                return rtlr.NextLink != nil && len(*rtlr.NextLink) != 0
                }
                    // routeTableListResultPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (rtlr RouteTableListResult) routeTableListResultPreparer(ctx context.Context) (*http.Request, error) {
                    if !rtlr.hasNextLink() {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( rtlr.NextLink)));
                    }

            // RouteTableListResultPage contains a page of RouteTable values.
            type RouteTableListResultPage struct {
                fn func(context.Context, RouteTableListResult) (RouteTableListResult, error)
                rtlr RouteTableListResult
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * RouteTableListResultPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/RouteTableListResultPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        for {
        next, err := page.fn(ctx, page.rtlr)
        if err != nil {
        return err
        }
        page.rtlr = next
        if !next.hasNextLink() || !next.IsEmpty() {
        break
        }
        }
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * RouteTableListResultPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page RouteTableListResultPage) NotDone() bool {
        return !page.rtlr.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page RouteTableListResultPage) Response() RouteTableListResult {
        return page.rtlr
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page RouteTableListResultPage) Values() []RouteTable {
        if page.rtlr.IsEmpty() {
        return nil
        }
        return *page.rtlr.Value
        }
        // Creates a new instance of the RouteTableListResultPage type.
        func NewRouteTableListResultPage (cur RouteTableListResult, getNextPage func(context.Context, RouteTableListResult) (RouteTableListResult, error)) RouteTableListResultPage {
        return RouteTableListResultPage{
        fn: getNextPage,
        rtlr: cur,
        }
        }

            // RouteTablePropertiesFormat route Table resource.
            type RouteTablePropertiesFormat struct {
            // Routes - Collection of routes contained within a route table.
            Routes *[]Route `json:"routes,omitempty"`
            // Subnets - READ-ONLY; A collection of references to subnets.
            Subnets *[]Subnet `json:"subnets,omitempty"`
            // DisableBgpRoutePropagation - Whether to disable the routes learned by BGP on that route table. True means disable.
            DisableBgpRoutePropagation *bool `json:"disableBgpRoutePropagation,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the route table resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // ResourceGUID - READ-ONLY; The resource GUID property of the route table.
            ResourceGUID *string `json:"resourceGuid,omitempty"`
            }

        // MarshalJSON is the custom marshaler for RouteTablePropertiesFormat.
        func (rtpf RouteTablePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(rtpf.Routes != nil) {
                objectMap["routes"] = rtpf.Routes
                }
                if(rtpf.DisableBgpRoutePropagation != nil) {
                objectMap["disableBgpRoutePropagation"] = rtpf.DisableBgpRoutePropagation
                }
                return json.Marshal(objectMap)
        }

            // RouteTablesCreateOrUpdateFuture an abstraction for monitoring and retrieving the results of a
            // long-running operation.
            type RouteTablesCreateOrUpdateFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(RouteTablesClient) (RouteTable, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *RouteTablesCreateOrUpdateFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for RouteTablesCreateOrUpdateFuture.Result.
        func (future *RouteTablesCreateOrUpdateFuture) result(client RouteTablesClient) (rt RouteTable, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.RouteTablesCreateOrUpdateFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    rt.Response.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.RouteTablesCreateOrUpdateFuture")
                return
            }
            sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if rt.Response.Response, err = future.GetResult(sender); err == nil && rt.Response.Response.StatusCode != http.StatusNoContent {
            rt, err = client.CreateOrUpdateResponder(rt.Response.Response)
            if err != nil {
            err = autorest.NewErrorWithError(err, "network.RouteTablesCreateOrUpdateFuture", "Result", rt.Response.Response, "Failure responding to request")
            }
            }
            return
        }

            // RouteTablesDeleteFuture an abstraction for monitoring and retrieving the results of a long-running
            // operation.
            type RouteTablesDeleteFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(RouteTablesClient) (autorest.Response, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *RouteTablesDeleteFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for RouteTablesDeleteFuture.Result.
        func (future *RouteTablesDeleteFuture) result(client RouteTablesClient) (ar autorest.Response, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.RouteTablesDeleteFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ar.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.RouteTablesDeleteFuture")
                return
            }
            ar.Response = future.Response()
        return
        }

            // RoutesCreateOrUpdateFuture an abstraction for monitoring and retrieving the results of a long-running
            // operation.
            type RoutesCreateOrUpdateFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(RoutesClient) (Route, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *RoutesCreateOrUpdateFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for RoutesCreateOrUpdateFuture.Result.
        func (future *RoutesCreateOrUpdateFuture) result(client RoutesClient) (r Route, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.RoutesCreateOrUpdateFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    r.Response.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.RoutesCreateOrUpdateFuture")
                return
            }
            sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if r.Response.Response, err = future.GetResult(sender); err == nil && r.Response.Response.StatusCode != http.StatusNoContent {
            r, err = client.CreateOrUpdateResponder(r.Response.Response)
            if err != nil {
            err = autorest.NewErrorWithError(err, "network.RoutesCreateOrUpdateFuture", "Result", r.Response.Response, "Failure responding to request")
            }
            }
            return
        }

            // RoutesDeleteFuture an abstraction for monitoring and retrieving the results of a long-running operation.
            type RoutesDeleteFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(RoutesClient) (autorest.Response, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *RoutesDeleteFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for RoutesDeleteFuture.Result.
        func (future *RoutesDeleteFuture) result(client RoutesClient) (ar autorest.Response, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.RoutesDeleteFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ar.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.RoutesDeleteFuture")
                return
            }
            ar.Response = future.Response()
        return
        }

            // SecurityGroup networkSecurityGroup resource.
            type SecurityGroup struct {
            // SecurityGroupPropertiesFormat - Properties of the network security group.
            *SecurityGroupPropertiesFormat `json:"properties,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for SecurityGroup.
        func (sg SecurityGroup)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sg.SecurityGroupPropertiesFormat != nil) {
                objectMap["properties"] = sg.SecurityGroupPropertiesFormat
                }
                if(sg.ID != nil) {
                objectMap["id"] = sg.ID
                }
                if(sg.Location != nil) {
                objectMap["location"] = sg.Location
                }
                if(sg.Tags != nil) {
                objectMap["tags"] = sg.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for SecurityGroup struct.
        func (sg *SecurityGroup) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var securityGroupPropertiesFormat SecurityGroupPropertiesFormat
        err = json.Unmarshal(*v, &securityGroupPropertiesFormat)
    if err != nil {
    return err
    }
        sg.SecurityGroupPropertiesFormat = &securityGroupPropertiesFormat
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        sg.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        sg.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        sg.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        sg.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        sg.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        sg.Tags = tags
    }
            }
        }

        return nil
        }

            // SecurityGroupPropertiesFormat network Security Group resource.
            type SecurityGroupPropertiesFormat struct {
            // SecurityRules - A collection of security rules of the network security group.
            SecurityRules *[]SecurityRule `json:"securityRules,omitempty"`
            // DefaultSecurityRules - READ-ONLY; The default security rules of network security group.
            DefaultSecurityRules *[]SecurityRule `json:"defaultSecurityRules,omitempty"`
            // NetworkInterfaces - READ-ONLY; A collection of references to network interfaces.
            NetworkInterfaces *[]Interface `json:"networkInterfaces,omitempty"`
            // Subnets - READ-ONLY; A collection of references to subnets.
            Subnets *[]Subnet `json:"subnets,omitempty"`
            // FlowLogs - READ-ONLY; A collection of references to flow log resources.
            FlowLogs *[]FlowLog `json:"flowLogs,omitempty"`
            // ResourceGUID - READ-ONLY; The resource GUID property of the network security group resource.
            ResourceGUID *string `json:"resourceGuid,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the network security group resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for SecurityGroupPropertiesFormat.
        func (sgpf SecurityGroupPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sgpf.SecurityRules != nil) {
                objectMap["securityRules"] = sgpf.SecurityRules
                }
                return json.Marshal(objectMap)
        }

            // SecurityRule network security rule.
            type SecurityRule struct {
            // SecurityRulePropertiesFormat - Properties of the security rule.
            *SecurityRulePropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - The type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for SecurityRule.
        func (sr SecurityRule)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sr.SecurityRulePropertiesFormat != nil) {
                objectMap["properties"] = sr.SecurityRulePropertiesFormat
                }
                if(sr.Name != nil) {
                objectMap["name"] = sr.Name
                }
                if(sr.Type != nil) {
                objectMap["type"] = sr.Type
                }
                if(sr.ID != nil) {
                objectMap["id"] = sr.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for SecurityRule struct.
        func (sr *SecurityRule) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var securityRulePropertiesFormat SecurityRulePropertiesFormat
        err = json.Unmarshal(*v, &securityRulePropertiesFormat)
    if err != nil {
    return err
    }
        sr.SecurityRulePropertiesFormat = &securityRulePropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        sr.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        sr.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        sr.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        sr.ID = &ID
    }
            }
        }

        return nil
        }

            // SecurityRulePropertiesFormat security rule resource.
            type SecurityRulePropertiesFormat struct {
            // Description - A description for this rule. Restricted to 140 chars.
            Description *string `json:"description,omitempty"`
            // Protocol - Network protocol this rule applies to. Possible values include: 'TCP', 'UDP', 'Icmp', 'Esp', 'Asterisk', 'Ah'
            Protocol SecurityRuleProtocol `json:"protocol,omitempty"`
            // SourcePortRange - The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
            SourcePortRange *string `json:"sourcePortRange,omitempty"`
            // DestinationPortRange - The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
            DestinationPortRange *string `json:"destinationPortRange,omitempty"`
            // SourceAddressPrefix - The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from.
            SourceAddressPrefix *string `json:"sourceAddressPrefix,omitempty"`
            // SourceAddressPrefixes - The CIDR or source IP ranges.
            SourceAddressPrefixes *[]string `json:"sourceAddressPrefixes,omitempty"`
            // SourceApplicationSecurityGroups - The application security group specified as source.
            SourceApplicationSecurityGroups *[]ApplicationSecurityGroup `json:"sourceApplicationSecurityGroups,omitempty"`
            // DestinationAddressPrefix - The destination address prefix. CIDR or destination IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
            DestinationAddressPrefix *string `json:"destinationAddressPrefix,omitempty"`
            // DestinationAddressPrefixes - The destination address prefixes. CIDR or destination IP ranges.
            DestinationAddressPrefixes *[]string `json:"destinationAddressPrefixes,omitempty"`
            // DestinationApplicationSecurityGroups - The application security group specified as destination.
            DestinationApplicationSecurityGroups *[]ApplicationSecurityGroup `json:"destinationApplicationSecurityGroups,omitempty"`
            // SourcePortRanges - The source port ranges.
            SourcePortRanges *[]string `json:"sourcePortRanges,omitempty"`
            // DestinationPortRanges - The destination port ranges.
            DestinationPortRanges *[]string `json:"destinationPortRanges,omitempty"`
            // Access - The network traffic is allowed or denied. Possible values include: 'Allow', 'Deny'
            Access SecurityRuleAccess `json:"access,omitempty"`
            // Priority - The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
            Priority *int32 `json:"priority,omitempty"`
            // Direction - The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. Possible values include: 'Inbound', 'Outbound'
            Direction SecurityRuleDirection `json:"direction,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the security rule resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for SecurityRulePropertiesFormat.
        func (srpf SecurityRulePropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(srpf.Description != nil) {
                objectMap["description"] = srpf.Description
                }
                if(srpf.Protocol != "") {
                objectMap["protocol"] = srpf.Protocol
                }
                if(srpf.SourcePortRange != nil) {
                objectMap["sourcePortRange"] = srpf.SourcePortRange
                }
                if(srpf.DestinationPortRange != nil) {
                objectMap["destinationPortRange"] = srpf.DestinationPortRange
                }
                if(srpf.SourceAddressPrefix != nil) {
                objectMap["sourceAddressPrefix"] = srpf.SourceAddressPrefix
                }
                if(srpf.SourceAddressPrefixes != nil) {
                objectMap["sourceAddressPrefixes"] = srpf.SourceAddressPrefixes
                }
                if(srpf.SourceApplicationSecurityGroups != nil) {
                objectMap["sourceApplicationSecurityGroups"] = srpf.SourceApplicationSecurityGroups
                }
                if(srpf.DestinationAddressPrefix != nil) {
                objectMap["destinationAddressPrefix"] = srpf.DestinationAddressPrefix
                }
                if(srpf.DestinationAddressPrefixes != nil) {
                objectMap["destinationAddressPrefixes"] = srpf.DestinationAddressPrefixes
                }
                if(srpf.DestinationApplicationSecurityGroups != nil) {
                objectMap["destinationApplicationSecurityGroups"] = srpf.DestinationApplicationSecurityGroups
                }
                if(srpf.SourcePortRanges != nil) {
                objectMap["sourcePortRanges"] = srpf.SourcePortRanges
                }
                if(srpf.DestinationPortRanges != nil) {
                objectMap["destinationPortRanges"] = srpf.DestinationPortRanges
                }
                if(srpf.Access != "") {
                objectMap["access"] = srpf.Access
                }
                if(srpf.Priority != nil) {
                objectMap["priority"] = srpf.Priority
                }
                if(srpf.Direction != "") {
                objectMap["direction"] = srpf.Direction
                }
                return json.Marshal(objectMap)
        }

            // ServiceAssociationLink serviceAssociationLink resource.
            type ServiceAssociationLink struct {
            // ServiceAssociationLinkPropertiesFormat - Resource navigation link properties format.
            *ServiceAssociationLinkPropertiesFormat `json:"properties,omitempty"`
            // Name - Name of the resource that is unique within a resource group. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ServiceAssociationLink.
        func (sal ServiceAssociationLink)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sal.ServiceAssociationLinkPropertiesFormat != nil) {
                objectMap["properties"] = sal.ServiceAssociationLinkPropertiesFormat
                }
                if(sal.Name != nil) {
                objectMap["name"] = sal.Name
                }
                if(sal.ID != nil) {
                objectMap["id"] = sal.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ServiceAssociationLink struct.
        func (sal *ServiceAssociationLink) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var serviceAssociationLinkPropertiesFormat ServiceAssociationLinkPropertiesFormat
        err = json.Unmarshal(*v, &serviceAssociationLinkPropertiesFormat)
    if err != nil {
    return err
    }
        sal.ServiceAssociationLinkPropertiesFormat = &serviceAssociationLinkPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        sal.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        sal.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        sal.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        sal.ID = &ID
    }
            }
        }

        return nil
        }

            // ServiceAssociationLinkPropertiesFormat properties of ServiceAssociationLink.
            type ServiceAssociationLinkPropertiesFormat struct {
            // LinkedResourceType - Resource type of the linked resource.
            LinkedResourceType *string `json:"linkedResourceType,omitempty"`
            // Link - Link to the external resource.
            Link *string `json:"link,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the service association link resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // AllowDelete - If true, the resource can be deleted.
            AllowDelete *bool `json:"allowDelete,omitempty"`
            // Locations - A list of locations.
            Locations *[]string `json:"locations,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ServiceAssociationLinkPropertiesFormat.
        func (salpf ServiceAssociationLinkPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(salpf.LinkedResourceType != nil) {
                objectMap["linkedResourceType"] = salpf.LinkedResourceType
                }
                if(salpf.Link != nil) {
                objectMap["link"] = salpf.Link
                }
                if(salpf.AllowDelete != nil) {
                objectMap["allowDelete"] = salpf.AllowDelete
                }
                if(salpf.Locations != nil) {
                objectMap["locations"] = salpf.Locations
                }
                return json.Marshal(objectMap)
        }

            // ServiceAssociationLinksListResult response for ServiceAssociationLinks_List operation.
            type ServiceAssociationLinksListResult struct {
            autorest.Response `json:"-"`
            // Value - The service association links in a subnet.
            Value *[]ServiceAssociationLink `json:"value,omitempty"`
            // NextLink - READ-ONLY; The URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ServiceAssociationLinksListResult.
        func (sallr ServiceAssociationLinksListResult)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sallr.Value != nil) {
                objectMap["value"] = sallr.Value
                }
                return json.Marshal(objectMap)
        }

            // ServiceDelegationPropertiesFormat properties of a service delegation.
            type ServiceDelegationPropertiesFormat struct {
            // ServiceName - The name of the service to whom the subnet should be delegated (e.g. Microsoft.Sql/servers).
            ServiceName *string `json:"serviceName,omitempty"`
            // Actions - READ-ONLY; The actions permitted to the service upon delegation.
            Actions *[]string `json:"actions,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the service delegation resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ServiceDelegationPropertiesFormat.
        func (sdpf ServiceDelegationPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sdpf.ServiceName != nil) {
                objectMap["serviceName"] = sdpf.ServiceName
                }
                return json.Marshal(objectMap)
        }

            // ServiceEndpointPolicy service End point policy resource.
            type ServiceEndpointPolicy struct {
            // ServiceEndpointPolicyPropertiesFormat - Properties of the service end point policy.
            *ServiceEndpointPolicyPropertiesFormat `json:"properties,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Kind - READ-ONLY; Kind of service endpoint policy. This is metadata used for the Azure portal experience.
            Kind *string `json:"kind,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for ServiceEndpointPolicy.
        func (sep ServiceEndpointPolicy)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sep.ServiceEndpointPolicyPropertiesFormat != nil) {
                objectMap["properties"] = sep.ServiceEndpointPolicyPropertiesFormat
                }
                if(sep.ID != nil) {
                objectMap["id"] = sep.ID
                }
                if(sep.Location != nil) {
                objectMap["location"] = sep.Location
                }
                if(sep.Tags != nil) {
                objectMap["tags"] = sep.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ServiceEndpointPolicy struct.
        func (sep *ServiceEndpointPolicy) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var serviceEndpointPolicyPropertiesFormat ServiceEndpointPolicyPropertiesFormat
        err = json.Unmarshal(*v, &serviceEndpointPolicyPropertiesFormat)
    if err != nil {
    return err
    }
        sep.ServiceEndpointPolicyPropertiesFormat = &serviceEndpointPolicyPropertiesFormat
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        sep.Etag = &etag
    }
                case "kind":
    if v != nil {
        var kind string
        err = json.Unmarshal(*v, &kind)
    if err != nil {
    return err
    }
        sep.Kind = &kind
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        sep.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        sep.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        sep.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        sep.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        sep.Tags = tags
    }
            }
        }

        return nil
        }

            // ServiceEndpointPolicyDefinition service Endpoint policy definitions.
            type ServiceEndpointPolicyDefinition struct {
            // ServiceEndpointPolicyDefinitionPropertiesFormat - Properties of the service endpoint policy definition.
            *ServiceEndpointPolicyDefinitionPropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - The type of the resource.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ServiceEndpointPolicyDefinition.
        func (sepd ServiceEndpointPolicyDefinition)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sepd.ServiceEndpointPolicyDefinitionPropertiesFormat != nil) {
                objectMap["properties"] = sepd.ServiceEndpointPolicyDefinitionPropertiesFormat
                }
                if(sepd.Name != nil) {
                objectMap["name"] = sepd.Name
                }
                if(sepd.Type != nil) {
                objectMap["type"] = sepd.Type
                }
                if(sepd.ID != nil) {
                objectMap["id"] = sepd.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for ServiceEndpointPolicyDefinition struct.
        func (sepd *ServiceEndpointPolicyDefinition) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var serviceEndpointPolicyDefinitionPropertiesFormat ServiceEndpointPolicyDefinitionPropertiesFormat
        err = json.Unmarshal(*v, &serviceEndpointPolicyDefinitionPropertiesFormat)
    if err != nil {
    return err
    }
        sepd.ServiceEndpointPolicyDefinitionPropertiesFormat = &serviceEndpointPolicyDefinitionPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        sepd.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        sepd.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        sepd.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        sepd.ID = &ID
    }
            }
        }

        return nil
        }

            // ServiceEndpointPolicyDefinitionPropertiesFormat service Endpoint policy definition resource.
            type ServiceEndpointPolicyDefinitionPropertiesFormat struct {
            // Description - A description for this rule. Restricted to 140 chars.
            Description *string `json:"description,omitempty"`
            // Service - Service endpoint name.
            Service *string `json:"service,omitempty"`
            // ServiceResources - A list of service resources.
            ServiceResources *[]string `json:"serviceResources,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the service endpoint policy definition resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ServiceEndpointPolicyDefinitionPropertiesFormat.
        func (sepdpf ServiceEndpointPolicyDefinitionPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sepdpf.Description != nil) {
                objectMap["description"] = sepdpf.Description
                }
                if(sepdpf.Service != nil) {
                objectMap["service"] = sepdpf.Service
                }
                if(sepdpf.ServiceResources != nil) {
                objectMap["serviceResources"] = sepdpf.ServiceResources
                }
                return json.Marshal(objectMap)
        }

            // ServiceEndpointPolicyPropertiesFormat service Endpoint Policy resource.
            type ServiceEndpointPolicyPropertiesFormat struct {
            // ServiceEndpointPolicyDefinitions - A collection of service endpoint policy definitions of the service endpoint policy.
            ServiceEndpointPolicyDefinitions *[]ServiceEndpointPolicyDefinition `json:"serviceEndpointPolicyDefinitions,omitempty"`
            // Subnets - READ-ONLY; A collection of references to subnets.
            Subnets *[]Subnet `json:"subnets,omitempty"`
            // ResourceGUID - READ-ONLY; The resource GUID property of the service endpoint policy resource.
            ResourceGUID *string `json:"resourceGuid,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the service endpoint policy resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // ServiceAlias - The alias indicating if the policy belongs to a service
            ServiceAlias *string `json:"serviceAlias,omitempty"`
            // ContextualServiceEndpointPolicies - A collection of contextual service endpoint policy.
            ContextualServiceEndpointPolicies *[]string `json:"contextualServiceEndpointPolicies,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ServiceEndpointPolicyPropertiesFormat.
        func (seppf ServiceEndpointPolicyPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(seppf.ServiceEndpointPolicyDefinitions != nil) {
                objectMap["serviceEndpointPolicyDefinitions"] = seppf.ServiceEndpointPolicyDefinitions
                }
                if(seppf.ServiceAlias != nil) {
                objectMap["serviceAlias"] = seppf.ServiceAlias
                }
                if(seppf.ContextualServiceEndpointPolicies != nil) {
                objectMap["contextualServiceEndpointPolicies"] = seppf.ContextualServiceEndpointPolicies
                }
                return json.Marshal(objectMap)
        }

            // ServiceEndpointPropertiesFormat the service endpoint properties.
            type ServiceEndpointPropertiesFormat struct {
            // Service - The type of the endpoint service.
            Service *string `json:"service,omitempty"`
            // Locations - A list of locations.
            Locations *[]string `json:"locations,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the service endpoint resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ServiceEndpointPropertiesFormat.
        func (sepf ServiceEndpointPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sepf.Service != nil) {
                objectMap["service"] = sepf.Service
                }
                if(sepf.Locations != nil) {
                objectMap["locations"] = sepf.Locations
                }
                return json.Marshal(objectMap)
        }

            // SubResource reference to another subresource.
            type SubResource struct {
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

            // Subnet subnet in a virtual network resource.
            type Subnet struct {
            autorest.Response `json:"-"`
            // SubnetPropertiesFormat - Properties of the subnet.
            *SubnetPropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - Resource type.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for Subnet.
        func (s Subnet)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(s.SubnetPropertiesFormat != nil) {
                objectMap["properties"] = s.SubnetPropertiesFormat
                }
                if(s.Name != nil) {
                objectMap["name"] = s.Name
                }
                if(s.Type != nil) {
                objectMap["type"] = s.Type
                }
                if(s.ID != nil) {
                objectMap["id"] = s.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for Subnet struct.
        func (s *Subnet) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var subnetPropertiesFormat SubnetPropertiesFormat
        err = json.Unmarshal(*v, &subnetPropertiesFormat)
    if err != nil {
    return err
    }
        s.SubnetPropertiesFormat = &subnetPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        s.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        s.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        s.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        s.ID = &ID
    }
            }
        }

        return nil
        }

            // SubnetListResult response for ListSubnets API service callRetrieves all subnet that belongs to a virtual
            // network.
            type SubnetListResult struct {
            autorest.Response `json:"-"`
            // Value - The subnets in a virtual network.
            Value *[]Subnet `json:"value,omitempty"`
            // NextLink - The URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

            // SubnetListResultIterator provides access to a complete listing of Subnet values.
            type SubnetListResultIterator struct {
                i int
                page SubnetListResultPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * SubnetListResultIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/SubnetListResultIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * SubnetListResultIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter SubnetListResultIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter SubnetListResultIterator) Response() SubnetListResult {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter SubnetListResultIterator) Value() Subnet {
        if !iter.page.NotDone() {
        return Subnet{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the SubnetListResultIterator type.
        func NewSubnetListResultIterator (page SubnetListResultPage) SubnetListResultIterator {
        return SubnetListResultIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (slr SubnetListResult) IsEmpty() bool {
                return slr.Value == nil || len(*slr.Value) == 0
                }

                // hasNextLink returns true if the NextLink is not empty.
                func (slr SubnetListResult) hasNextLink() bool {
                return slr.NextLink != nil && len(*slr.NextLink) != 0
                }
                    // subnetListResultPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (slr SubnetListResult) subnetListResultPreparer(ctx context.Context) (*http.Request, error) {
                    if !slr.hasNextLink() {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( slr.NextLink)));
                    }

            // SubnetListResultPage contains a page of Subnet values.
            type SubnetListResultPage struct {
                fn func(context.Context, SubnetListResult) (SubnetListResult, error)
                slr SubnetListResult
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * SubnetListResultPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/SubnetListResultPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        for {
        next, err := page.fn(ctx, page.slr)
        if err != nil {
        return err
        }
        page.slr = next
        if !next.hasNextLink() || !next.IsEmpty() {
        break
        }
        }
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * SubnetListResultPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page SubnetListResultPage) NotDone() bool {
        return !page.slr.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page SubnetListResultPage) Response() SubnetListResult {
        return page.slr
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page SubnetListResultPage) Values() []Subnet {
        if page.slr.IsEmpty() {
        return nil
        }
        return *page.slr.Value
        }
        // Creates a new instance of the SubnetListResultPage type.
        func NewSubnetListResultPage (cur SubnetListResult, getNextPage func(context.Context, SubnetListResult) (SubnetListResult, error)) SubnetListResultPage {
        return SubnetListResultPage{
        fn: getNextPage,
        slr: cur,
        }
        }

            // SubnetPropertiesFormat properties of the subnet.
            type SubnetPropertiesFormat struct {
            // AddressPrefix - The address prefix for the subnet.
            AddressPrefix *string `json:"addressPrefix,omitempty"`
            // AddressPrefixes - List of address prefixes for the subnet.
            AddressPrefixes *[]string `json:"addressPrefixes,omitempty"`
            // NetworkSecurityGroup - The reference to the NetworkSecurityGroup resource.
            NetworkSecurityGroup *SecurityGroup `json:"networkSecurityGroup,omitempty"`
            // RouteTable - The reference to the RouteTable resource.
            RouteTable *RouteTable `json:"routeTable,omitempty"`
            // NatGateway - Nat gateway associated with this subnet.
            NatGateway *SubResource `json:"natGateway,omitempty"`
            // ServiceEndpoints - An array of service endpoints.
            ServiceEndpoints *[]ServiceEndpointPropertiesFormat `json:"serviceEndpoints,omitempty"`
            // ServiceEndpointPolicies - An array of service endpoint policies.
            ServiceEndpointPolicies *[]ServiceEndpointPolicy `json:"serviceEndpointPolicies,omitempty"`
            // PrivateEndpoints - READ-ONLY; An array of references to private endpoints.
            PrivateEndpoints *[]PrivateEndpoint `json:"privateEndpoints,omitempty"`
            // IPConfigurations - READ-ONLY; An array of references to the network interface IP configurations using subnet.
            IPConfigurations *[]IPConfiguration `json:"ipConfigurations,omitempty"`
            // IPConfigurationProfiles - READ-ONLY; Array of IP configuration profiles which reference this subnet.
            IPConfigurationProfiles *[]IPConfigurationProfile `json:"ipConfigurationProfiles,omitempty"`
            // IPAllocations - Array of IpAllocation which reference this subnet.
            IPAllocations *[]SubResource `json:"ipAllocations,omitempty"`
            // ResourceNavigationLinks - READ-ONLY; An array of references to the external resources using subnet.
            ResourceNavigationLinks *[]ResourceNavigationLink `json:"resourceNavigationLinks,omitempty"`
            // ServiceAssociationLinks - READ-ONLY; An array of references to services injecting into this subnet.
            ServiceAssociationLinks *[]ServiceAssociationLink `json:"serviceAssociationLinks,omitempty"`
            // Delegations - An array of references to the delegations on the subnet.
            Delegations *[]Delegation `json:"delegations,omitempty"`
            // Purpose - READ-ONLY; A read-only string identifying the intention of use for this subnet based on delegations and other user-defined properties.
            Purpose *string `json:"purpose,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the subnet resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // PrivateEndpointNetworkPolicies - Enable or Disable apply network policies on private end point in the subnet. Possible values include: 'VirtualNetworkPrivateEndpointNetworkPoliciesEnabled', 'VirtualNetworkPrivateEndpointNetworkPoliciesDisabled'
            PrivateEndpointNetworkPolicies VirtualNetworkPrivateEndpointNetworkPolicies `json:"privateEndpointNetworkPolicies,omitempty"`
            // PrivateLinkServiceNetworkPolicies - Enable or Disable apply network policies on private link service in the subnet. Possible values include: 'VirtualNetworkPrivateLinkServiceNetworkPoliciesEnabled', 'VirtualNetworkPrivateLinkServiceNetworkPoliciesDisabled'
            PrivateLinkServiceNetworkPolicies VirtualNetworkPrivateLinkServiceNetworkPolicies `json:"privateLinkServiceNetworkPolicies,omitempty"`
            // ApplicationGatewayIPConfigurations - Application gateway IP configurations of virtual network resource.
            ApplicationGatewayIPConfigurations *[]ApplicationGatewayIPConfiguration `json:"applicationGatewayIpConfigurations,omitempty"`
            }

        // MarshalJSON is the custom marshaler for SubnetPropertiesFormat.
        func (spf SubnetPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(spf.AddressPrefix != nil) {
                objectMap["addressPrefix"] = spf.AddressPrefix
                }
                if(spf.AddressPrefixes != nil) {
                objectMap["addressPrefixes"] = spf.AddressPrefixes
                }
                if(spf.NetworkSecurityGroup != nil) {
                objectMap["networkSecurityGroup"] = spf.NetworkSecurityGroup
                }
                if(spf.RouteTable != nil) {
                objectMap["routeTable"] = spf.RouteTable
                }
                if(spf.NatGateway != nil) {
                objectMap["natGateway"] = spf.NatGateway
                }
                if(spf.ServiceEndpoints != nil) {
                objectMap["serviceEndpoints"] = spf.ServiceEndpoints
                }
                if(spf.ServiceEndpointPolicies != nil) {
                objectMap["serviceEndpointPolicies"] = spf.ServiceEndpointPolicies
                }
                if(spf.IPAllocations != nil) {
                objectMap["ipAllocations"] = spf.IPAllocations
                }
                if(spf.Delegations != nil) {
                objectMap["delegations"] = spf.Delegations
                }
                if(spf.PrivateEndpointNetworkPolicies != "") {
                objectMap["privateEndpointNetworkPolicies"] = spf.PrivateEndpointNetworkPolicies
                }
                if(spf.PrivateLinkServiceNetworkPolicies != "") {
                objectMap["privateLinkServiceNetworkPolicies"] = spf.PrivateLinkServiceNetworkPolicies
                }
                if(spf.ApplicationGatewayIPConfigurations != nil) {
                objectMap["applicationGatewayIpConfigurations"] = spf.ApplicationGatewayIPConfigurations
                }
                return json.Marshal(objectMap)
        }

            // SubnetsCreateOrUpdateFuture an abstraction for monitoring and retrieving the results of a long-running
            // operation.
            type SubnetsCreateOrUpdateFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(SubnetsClient) (Subnet, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *SubnetsCreateOrUpdateFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for SubnetsCreateOrUpdateFuture.Result.
        func (future *SubnetsCreateOrUpdateFuture) result(client SubnetsClient) (s Subnet, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.SubnetsCreateOrUpdateFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    s.Response.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.SubnetsCreateOrUpdateFuture")
                return
            }
            sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if s.Response.Response, err = future.GetResult(sender); err == nil && s.Response.Response.StatusCode != http.StatusNoContent {
            s, err = client.CreateOrUpdateResponder(s.Response.Response)
            if err != nil {
            err = autorest.NewErrorWithError(err, "network.SubnetsCreateOrUpdateFuture", "Result", s.Response.Response, "Failure responding to request")
            }
            }
            return
        }

            // SubnetsDeleteFuture an abstraction for monitoring and retrieving the results of a long-running
            // operation.
            type SubnetsDeleteFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(SubnetsClient) (autorest.Response, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *SubnetsDeleteFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for SubnetsDeleteFuture.Result.
        func (future *SubnetsDeleteFuture) result(client SubnetsClient) (ar autorest.Response, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.SubnetsDeleteFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ar.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.SubnetsDeleteFuture")
                return
            }
            ar.Response = future.Response()
        return
        }

            // SubnetsPrepareNetworkPoliciesFuture an abstraction for monitoring and retrieving the results of a
            // long-running operation.
            type SubnetsPrepareNetworkPoliciesFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(SubnetsClient) (autorest.Response, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *SubnetsPrepareNetworkPoliciesFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for SubnetsPrepareNetworkPoliciesFuture.Result.
        func (future *SubnetsPrepareNetworkPoliciesFuture) result(client SubnetsClient) (ar autorest.Response, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.SubnetsPrepareNetworkPoliciesFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ar.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.SubnetsPrepareNetworkPoliciesFuture")
                return
            }
            ar.Response = future.Response()
        return
        }

            // SubnetsUnprepareNetworkPoliciesFuture an abstraction for monitoring and retrieving the results of a
            // long-running operation.
            type SubnetsUnprepareNetworkPoliciesFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(SubnetsClient) (autorest.Response, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *SubnetsUnprepareNetworkPoliciesFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for SubnetsUnprepareNetworkPoliciesFuture.Result.
        func (future *SubnetsUnprepareNetworkPoliciesFuture) result(client SubnetsClient) (ar autorest.Response, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.SubnetsUnprepareNetworkPoliciesFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ar.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.SubnetsUnprepareNetworkPoliciesFuture")
                return
            }
            ar.Response = future.Response()
        return
        }

            // TagsObject tags object for patch operations.
            type TagsObject struct {
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for TagsObject.
        func (toVar TagsObject)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(toVar.Tags != nil) {
                objectMap["tags"] = toVar.Tags
                }
                return json.Marshal(objectMap)
        }

            // TrafficAnalyticsConfigurationProperties parameters that define the configuration of traffic analytics.
            type TrafficAnalyticsConfigurationProperties struct {
            // Enabled - Flag to enable/disable traffic analytics.
            Enabled *bool `json:"enabled,omitempty"`
            // WorkspaceID - The resource guid of the attached workspace.
            WorkspaceID *string `json:"workspaceId,omitempty"`
            // WorkspaceRegion - The location of the attached workspace.
            WorkspaceRegion *string `json:"workspaceRegion,omitempty"`
            // WorkspaceResourceID - Resource Id of the attached workspace.
            WorkspaceResourceID *string `json:"workspaceResourceId,omitempty"`
            // TrafficAnalyticsInterval - The interval in minutes which would decide how frequently TA service should do flow analytics.
            TrafficAnalyticsInterval *int32 `json:"trafficAnalyticsInterval,omitempty"`
            }

            // TrafficAnalyticsProperties parameters that define the configuration of traffic analytics.
            type TrafficAnalyticsProperties struct {
            // NetworkWatcherFlowAnalyticsConfiguration - Parameters that define the configuration of traffic analytics.
            NetworkWatcherFlowAnalyticsConfiguration *TrafficAnalyticsConfigurationProperties `json:"networkWatcherFlowAnalyticsConfiguration,omitempty"`
            }

            // UnprepareNetworkPoliciesRequest details of UnprepareNetworkPolicies for Subnet.
            type UnprepareNetworkPoliciesRequest struct {
            // ServiceName - The name of the service for which subnet is being unprepared for.
            ServiceName *string `json:"serviceName,omitempty"`
            }

            // VirtualNetwork virtual Network resource.
            type VirtualNetwork struct {
            autorest.Response `json:"-"`
            // ExtendedLocation - The extended location of the virtual network.
            ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`
            // VirtualNetworkPropertiesFormat - Properties of the virtual network.
            *VirtualNetworkPropertiesFormat `json:"properties,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for VirtualNetwork.
        func (vn VirtualNetwork)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(vn.ExtendedLocation != nil) {
                objectMap["extendedLocation"] = vn.ExtendedLocation
                }
                if(vn.VirtualNetworkPropertiesFormat != nil) {
                objectMap["properties"] = vn.VirtualNetworkPropertiesFormat
                }
                if(vn.ID != nil) {
                objectMap["id"] = vn.ID
                }
                if(vn.Location != nil) {
                objectMap["location"] = vn.Location
                }
                if(vn.Tags != nil) {
                objectMap["tags"] = vn.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for VirtualNetwork struct.
        func (vn *VirtualNetwork) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "extendedLocation":
    if v != nil {
        var extendedLocation ExtendedLocation
        err = json.Unmarshal(*v, &extendedLocation)
    if err != nil {
    return err
    }
        vn.ExtendedLocation = &extendedLocation
    }
                case "properties":
    if v != nil {
        var virtualNetworkPropertiesFormat VirtualNetworkPropertiesFormat
        err = json.Unmarshal(*v, &virtualNetworkPropertiesFormat)
    if err != nil {
    return err
    }
        vn.VirtualNetworkPropertiesFormat = &virtualNetworkPropertiesFormat
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        vn.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        vn.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        vn.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        vn.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        vn.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        vn.Tags = tags
    }
            }
        }

        return nil
        }

            // VirtualNetworkBgpCommunities bgp Communities sent over ExpressRoute with each route corresponding to a
            // prefix in this VNET.
            type VirtualNetworkBgpCommunities struct {
            // VirtualNetworkCommunity - The BGP community associated with the virtual network.
            VirtualNetworkCommunity *string `json:"virtualNetworkCommunity,omitempty"`
            // RegionalCommunity - READ-ONLY; The BGP community associated with the region of the virtual network.
            RegionalCommunity *string `json:"regionalCommunity,omitempty"`
            }

        // MarshalJSON is the custom marshaler for VirtualNetworkBgpCommunities.
        func (vnbc VirtualNetworkBgpCommunities)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(vnbc.VirtualNetworkCommunity != nil) {
                objectMap["virtualNetworkCommunity"] = vnbc.VirtualNetworkCommunity
                }
                return json.Marshal(objectMap)
        }

            // VirtualNetworkListResult response for the ListVirtualNetworks API service call.
            type VirtualNetworkListResult struct {
            autorest.Response `json:"-"`
            // Value - A list of VirtualNetwork resources in a resource group.
            Value *[]VirtualNetwork `json:"value,omitempty"`
            // NextLink - The URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

            // VirtualNetworkListResultIterator provides access to a complete listing of VirtualNetwork values.
            type VirtualNetworkListResultIterator struct {
                i int
                page VirtualNetworkListResultPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * VirtualNetworkListResultIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/VirtualNetworkListResultIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * VirtualNetworkListResultIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter VirtualNetworkListResultIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter VirtualNetworkListResultIterator) Response() VirtualNetworkListResult {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter VirtualNetworkListResultIterator) Value() VirtualNetwork {
        if !iter.page.NotDone() {
        return VirtualNetwork{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the VirtualNetworkListResultIterator type.
        func NewVirtualNetworkListResultIterator (page VirtualNetworkListResultPage) VirtualNetworkListResultIterator {
        return VirtualNetworkListResultIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (vnlr VirtualNetworkListResult) IsEmpty() bool {
                return vnlr.Value == nil || len(*vnlr.Value) == 0
                }

                // hasNextLink returns true if the NextLink is not empty.
                func (vnlr VirtualNetworkListResult) hasNextLink() bool {
                return vnlr.NextLink != nil && len(*vnlr.NextLink) != 0
                }
                    // virtualNetworkListResultPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (vnlr VirtualNetworkListResult) virtualNetworkListResultPreparer(ctx context.Context) (*http.Request, error) {
                    if !vnlr.hasNextLink() {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( vnlr.NextLink)));
                    }

            // VirtualNetworkListResultPage contains a page of VirtualNetwork values.
            type VirtualNetworkListResultPage struct {
                fn func(context.Context, VirtualNetworkListResult) (VirtualNetworkListResult, error)
                vnlr VirtualNetworkListResult
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * VirtualNetworkListResultPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/VirtualNetworkListResultPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        for {
        next, err := page.fn(ctx, page.vnlr)
        if err != nil {
        return err
        }
        page.vnlr = next
        if !next.hasNextLink() || !next.IsEmpty() {
        break
        }
        }
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * VirtualNetworkListResultPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page VirtualNetworkListResultPage) NotDone() bool {
        return !page.vnlr.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page VirtualNetworkListResultPage) Response() VirtualNetworkListResult {
        return page.vnlr
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page VirtualNetworkListResultPage) Values() []VirtualNetwork {
        if page.vnlr.IsEmpty() {
        return nil
        }
        return *page.vnlr.Value
        }
        // Creates a new instance of the VirtualNetworkListResultPage type.
        func NewVirtualNetworkListResultPage (cur VirtualNetworkListResult, getNextPage func(context.Context, VirtualNetworkListResult) (VirtualNetworkListResult, error)) VirtualNetworkListResultPage {
        return VirtualNetworkListResultPage{
        fn: getNextPage,
        vnlr: cur,
        }
        }

            // VirtualNetworkListUsageResult response for the virtual networks GetUsage API service call.
            type VirtualNetworkListUsageResult struct {
            autorest.Response `json:"-"`
            // Value - READ-ONLY; VirtualNetwork usage stats.
            Value *[]VirtualNetworkUsage `json:"value,omitempty"`
            // NextLink - The URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

        // MarshalJSON is the custom marshaler for VirtualNetworkListUsageResult.
        func (vnlur VirtualNetworkListUsageResult)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(vnlur.NextLink != nil) {
                objectMap["nextLink"] = vnlur.NextLink
                }
                return json.Marshal(objectMap)
        }

            // VirtualNetworkListUsageResultIterator provides access to a complete listing of VirtualNetworkUsage
            // values.
            type VirtualNetworkListUsageResultIterator struct {
                i int
                page VirtualNetworkListUsageResultPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * VirtualNetworkListUsageResultIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/VirtualNetworkListUsageResultIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * VirtualNetworkListUsageResultIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter VirtualNetworkListUsageResultIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter VirtualNetworkListUsageResultIterator) Response() VirtualNetworkListUsageResult {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter VirtualNetworkListUsageResultIterator) Value() VirtualNetworkUsage {
        if !iter.page.NotDone() {
        return VirtualNetworkUsage{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the VirtualNetworkListUsageResultIterator type.
        func NewVirtualNetworkListUsageResultIterator (page VirtualNetworkListUsageResultPage) VirtualNetworkListUsageResultIterator {
        return VirtualNetworkListUsageResultIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (vnlur VirtualNetworkListUsageResult) IsEmpty() bool {
                return vnlur.Value == nil || len(*vnlur.Value) == 0
                }

                // hasNextLink returns true if the NextLink is not empty.
                func (vnlur VirtualNetworkListUsageResult) hasNextLink() bool {
                return vnlur.NextLink != nil && len(*vnlur.NextLink) != 0
                }
                    // virtualNetworkListUsageResultPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (vnlur VirtualNetworkListUsageResult) virtualNetworkListUsageResultPreparer(ctx context.Context) (*http.Request, error) {
                    if !vnlur.hasNextLink() {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( vnlur.NextLink)));
                    }

            // VirtualNetworkListUsageResultPage contains a page of VirtualNetworkUsage values.
            type VirtualNetworkListUsageResultPage struct {
                fn func(context.Context, VirtualNetworkListUsageResult) (VirtualNetworkListUsageResult, error)
                vnlur VirtualNetworkListUsageResult
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * VirtualNetworkListUsageResultPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/VirtualNetworkListUsageResultPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        for {
        next, err := page.fn(ctx, page.vnlur)
        if err != nil {
        return err
        }
        page.vnlur = next
        if !next.hasNextLink() || !next.IsEmpty() {
        break
        }
        }
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * VirtualNetworkListUsageResultPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page VirtualNetworkListUsageResultPage) NotDone() bool {
        return !page.vnlur.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page VirtualNetworkListUsageResultPage) Response() VirtualNetworkListUsageResult {
        return page.vnlur
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page VirtualNetworkListUsageResultPage) Values() []VirtualNetworkUsage {
        if page.vnlur.IsEmpty() {
        return nil
        }
        return *page.vnlur.Value
        }
        // Creates a new instance of the VirtualNetworkListUsageResultPage type.
        func NewVirtualNetworkListUsageResultPage (cur VirtualNetworkListUsageResult, getNextPage func(context.Context, VirtualNetworkListUsageResult) (VirtualNetworkListUsageResult, error)) VirtualNetworkListUsageResultPage {
        return VirtualNetworkListUsageResultPage{
        fn: getNextPage,
        vnlur: cur,
        }
        }

            // VirtualNetworkPeering peerings in a virtual network resource.
            type VirtualNetworkPeering struct {
            autorest.Response `json:"-"`
            // VirtualNetworkPeeringPropertiesFormat - Properties of the virtual network peering.
            *VirtualNetworkPeeringPropertiesFormat `json:"properties,omitempty"`
            // Name - The name of the resource that is unique within a resource group. This name can be used to access the resource.
            Name *string `json:"name,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // Type - Resource type.
            Type *string `json:"type,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            }

        // MarshalJSON is the custom marshaler for VirtualNetworkPeering.
        func (vnp VirtualNetworkPeering)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(vnp.VirtualNetworkPeeringPropertiesFormat != nil) {
                objectMap["properties"] = vnp.VirtualNetworkPeeringPropertiesFormat
                }
                if(vnp.Name != nil) {
                objectMap["name"] = vnp.Name
                }
                if(vnp.Type != nil) {
                objectMap["type"] = vnp.Type
                }
                if(vnp.ID != nil) {
                objectMap["id"] = vnp.ID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for VirtualNetworkPeering struct.
        func (vnp *VirtualNetworkPeering) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var virtualNetworkPeeringPropertiesFormat VirtualNetworkPeeringPropertiesFormat
        err = json.Unmarshal(*v, &virtualNetworkPeeringPropertiesFormat)
    if err != nil {
    return err
    }
        vnp.VirtualNetworkPeeringPropertiesFormat = &virtualNetworkPeeringPropertiesFormat
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        vnp.Name = &name
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        vnp.Etag = &etag
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        vnp.Type = &typeVar
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        vnp.ID = &ID
    }
            }
        }

        return nil
        }

            // VirtualNetworkPeeringListResult response for ListSubnets API service call. Retrieves all subnets that
            // belong to a virtual network.
            type VirtualNetworkPeeringListResult struct {
            autorest.Response `json:"-"`
            // Value - The peerings in a virtual network.
            Value *[]VirtualNetworkPeering `json:"value,omitempty"`
            // NextLink - The URL to get the next set of results.
            NextLink *string `json:"nextLink,omitempty"`
            }

            // VirtualNetworkPeeringListResultIterator provides access to a complete listing of VirtualNetworkPeering
            // values.
            type VirtualNetworkPeeringListResultIterator struct {
                i int
                page VirtualNetworkPeeringListResultPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * VirtualNetworkPeeringListResultIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/VirtualNetworkPeeringListResultIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * VirtualNetworkPeeringListResultIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter VirtualNetworkPeeringListResultIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter VirtualNetworkPeeringListResultIterator) Response() VirtualNetworkPeeringListResult {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter VirtualNetworkPeeringListResultIterator) Value() VirtualNetworkPeering {
        if !iter.page.NotDone() {
        return VirtualNetworkPeering{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the VirtualNetworkPeeringListResultIterator type.
        func NewVirtualNetworkPeeringListResultIterator (page VirtualNetworkPeeringListResultPage) VirtualNetworkPeeringListResultIterator {
        return VirtualNetworkPeeringListResultIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (vnplr VirtualNetworkPeeringListResult) IsEmpty() bool {
                return vnplr.Value == nil || len(*vnplr.Value) == 0
                }

                // hasNextLink returns true if the NextLink is not empty.
                func (vnplr VirtualNetworkPeeringListResult) hasNextLink() bool {
                return vnplr.NextLink != nil && len(*vnplr.NextLink) != 0
                }
                    // virtualNetworkPeeringListResultPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (vnplr VirtualNetworkPeeringListResult) virtualNetworkPeeringListResultPreparer(ctx context.Context) (*http.Request, error) {
                    if !vnplr.hasNextLink() {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( vnplr.NextLink)));
                    }

            // VirtualNetworkPeeringListResultPage contains a page of VirtualNetworkPeering values.
            type VirtualNetworkPeeringListResultPage struct {
                fn func(context.Context, VirtualNetworkPeeringListResult) (VirtualNetworkPeeringListResult, error)
                vnplr VirtualNetworkPeeringListResult
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * VirtualNetworkPeeringListResultPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/VirtualNetworkPeeringListResultPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        for {
        next, err := page.fn(ctx, page.vnplr)
        if err != nil {
        return err
        }
        page.vnplr = next
        if !next.hasNextLink() || !next.IsEmpty() {
        break
        }
        }
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * VirtualNetworkPeeringListResultPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page VirtualNetworkPeeringListResultPage) NotDone() bool {
        return !page.vnplr.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page VirtualNetworkPeeringListResultPage) Response() VirtualNetworkPeeringListResult {
        return page.vnplr
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page VirtualNetworkPeeringListResultPage) Values() []VirtualNetworkPeering {
        if page.vnplr.IsEmpty() {
        return nil
        }
        return *page.vnplr.Value
        }
        // Creates a new instance of the VirtualNetworkPeeringListResultPage type.
        func NewVirtualNetworkPeeringListResultPage (cur VirtualNetworkPeeringListResult, getNextPage func(context.Context, VirtualNetworkPeeringListResult) (VirtualNetworkPeeringListResult, error)) VirtualNetworkPeeringListResultPage {
        return VirtualNetworkPeeringListResultPage{
        fn: getNextPage,
        vnplr: cur,
        }
        }

            // VirtualNetworkPeeringPropertiesFormat properties of the virtual network peering.
            type VirtualNetworkPeeringPropertiesFormat struct {
            // AllowVirtualNetworkAccess - Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
            AllowVirtualNetworkAccess *bool `json:"allowVirtualNetworkAccess,omitempty"`
            // AllowForwardedTraffic - Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
            AllowForwardedTraffic *bool `json:"allowForwardedTraffic,omitempty"`
            // AllowGatewayTransit - If gateway links can be used in remote virtual networking to link to this virtual network.
            AllowGatewayTransit *bool `json:"allowGatewayTransit,omitempty"`
            // UseRemoteGateways - If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
            UseRemoteGateways *bool `json:"useRemoteGateways,omitempty"`
            // RemoteVirtualNetwork - The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the preview and learn more (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
            RemoteVirtualNetwork *SubResource `json:"remoteVirtualNetwork,omitempty"`
            // RemoteAddressSpace - The reference to the address space peered with the remote virtual network.
            RemoteAddressSpace *AddressSpace `json:"remoteAddressSpace,omitempty"`
            // RemoteVirtualNetworkAddressSpace - The reference to the current address space of the remote virtual network.
            RemoteVirtualNetworkAddressSpace *AddressSpace `json:"remoteVirtualNetworkAddressSpace,omitempty"`
            // RemoteBgpCommunities - The reference to the remote virtual network's Bgp Communities.
            RemoteBgpCommunities *VirtualNetworkBgpCommunities `json:"remoteBgpCommunities,omitempty"`
            // PeeringState - The status of the virtual network peering. Possible values include: 'Initiated', 'Connected', 'Disconnected'
            PeeringState VirtualNetworkPeeringState `json:"peeringState,omitempty"`
            // PeeringSyncLevel - The peering sync status of the virtual network peering. Possible values include: 'FullyInSync', 'RemoteNotInSync', 'LocalNotInSync', 'LocalAndRemoteNotInSync'
            PeeringSyncLevel VirtualNetworkPeeringLevel `json:"peeringSyncLevel,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the virtual network peering resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // DoNotVerifyRemoteGateways - If we need to verify the provisioning state of the remote gateway.
            DoNotVerifyRemoteGateways *bool `json:"doNotVerifyRemoteGateways,omitempty"`
            // ResourceGUID - READ-ONLY; The resourceGuid property of the Virtual Network peering resource.
            ResourceGUID *string `json:"resourceGuid,omitempty"`
            }

        // MarshalJSON is the custom marshaler for VirtualNetworkPeeringPropertiesFormat.
        func (vnppf VirtualNetworkPeeringPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(vnppf.AllowVirtualNetworkAccess != nil) {
                objectMap["allowVirtualNetworkAccess"] = vnppf.AllowVirtualNetworkAccess
                }
                if(vnppf.AllowForwardedTraffic != nil) {
                objectMap["allowForwardedTraffic"] = vnppf.AllowForwardedTraffic
                }
                if(vnppf.AllowGatewayTransit != nil) {
                objectMap["allowGatewayTransit"] = vnppf.AllowGatewayTransit
                }
                if(vnppf.UseRemoteGateways != nil) {
                objectMap["useRemoteGateways"] = vnppf.UseRemoteGateways
                }
                if(vnppf.RemoteVirtualNetwork != nil) {
                objectMap["remoteVirtualNetwork"] = vnppf.RemoteVirtualNetwork
                }
                if(vnppf.RemoteAddressSpace != nil) {
                objectMap["remoteAddressSpace"] = vnppf.RemoteAddressSpace
                }
                if(vnppf.RemoteVirtualNetworkAddressSpace != nil) {
                objectMap["remoteVirtualNetworkAddressSpace"] = vnppf.RemoteVirtualNetworkAddressSpace
                }
                if(vnppf.RemoteBgpCommunities != nil) {
                objectMap["remoteBgpCommunities"] = vnppf.RemoteBgpCommunities
                }
                if(vnppf.PeeringState != "") {
                objectMap["peeringState"] = vnppf.PeeringState
                }
                if(vnppf.PeeringSyncLevel != "") {
                objectMap["peeringSyncLevel"] = vnppf.PeeringSyncLevel
                }
                if(vnppf.DoNotVerifyRemoteGateways != nil) {
                objectMap["doNotVerifyRemoteGateways"] = vnppf.DoNotVerifyRemoteGateways
                }
                return json.Marshal(objectMap)
        }

            // VirtualNetworkPeeringsCreateOrUpdateFuture an abstraction for monitoring and retrieving the results of a
            // long-running operation.
            type VirtualNetworkPeeringsCreateOrUpdateFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(VirtualNetworkPeeringsClient) (VirtualNetworkPeering, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *VirtualNetworkPeeringsCreateOrUpdateFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for VirtualNetworkPeeringsCreateOrUpdateFuture.Result.
        func (future *VirtualNetworkPeeringsCreateOrUpdateFuture) result(client VirtualNetworkPeeringsClient) (vnp VirtualNetworkPeering, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.VirtualNetworkPeeringsCreateOrUpdateFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    vnp.Response.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.VirtualNetworkPeeringsCreateOrUpdateFuture")
                return
            }
            sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if vnp.Response.Response, err = future.GetResult(sender); err == nil && vnp.Response.Response.StatusCode != http.StatusNoContent {
            vnp, err = client.CreateOrUpdateResponder(vnp.Response.Response)
            if err != nil {
            err = autorest.NewErrorWithError(err, "network.VirtualNetworkPeeringsCreateOrUpdateFuture", "Result", vnp.Response.Response, "Failure responding to request")
            }
            }
            return
        }

            // VirtualNetworkPeeringsDeleteFuture an abstraction for monitoring and retrieving the results of a
            // long-running operation.
            type VirtualNetworkPeeringsDeleteFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(VirtualNetworkPeeringsClient) (autorest.Response, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *VirtualNetworkPeeringsDeleteFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for VirtualNetworkPeeringsDeleteFuture.Result.
        func (future *VirtualNetworkPeeringsDeleteFuture) result(client VirtualNetworkPeeringsClient) (ar autorest.Response, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.VirtualNetworkPeeringsDeleteFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ar.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.VirtualNetworkPeeringsDeleteFuture")
                return
            }
            ar.Response = future.Response()
        return
        }

            // VirtualNetworkPropertiesFormat properties of the virtual network.
            type VirtualNetworkPropertiesFormat struct {
            // AddressSpace - The AddressSpace that contains an array of IP address ranges that can be used by subnets.
            AddressSpace *AddressSpace `json:"addressSpace,omitempty"`
            // DhcpOptions - The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
            DhcpOptions *DhcpOptions `json:"dhcpOptions,omitempty"`
            // FlowTimeoutInMinutes - The FlowTimeout value (in minutes) for the Virtual Network
            FlowTimeoutInMinutes *int32 `json:"flowTimeoutInMinutes,omitempty"`
            // Subnets - A list of subnets in a Virtual Network.
            Subnets *[]Subnet `json:"subnets,omitempty"`
            // VirtualNetworkPeerings - A list of peerings in a Virtual Network.
            VirtualNetworkPeerings *[]VirtualNetworkPeering `json:"virtualNetworkPeerings,omitempty"`
            // ResourceGUID - READ-ONLY; The resourceGuid property of the Virtual Network resource.
            ResourceGUID *string `json:"resourceGuid,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the virtual network resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // EnableDdosProtection - Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
            EnableDdosProtection *bool `json:"enableDdosProtection,omitempty"`
            // EnableVMProtection - Indicates if VM protection is enabled for all the subnets in the virtual network.
            EnableVMProtection *bool `json:"enableVmProtection,omitempty"`
            // DdosProtectionPlan - The DDoS protection plan associated with the virtual network.
            DdosProtectionPlan *SubResource `json:"ddosProtectionPlan,omitempty"`
            // BgpCommunities - Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
            BgpCommunities *VirtualNetworkBgpCommunities `json:"bgpCommunities,omitempty"`
            // IPAllocations - Array of IpAllocation which reference this VNET.
            IPAllocations *[]SubResource `json:"ipAllocations,omitempty"`
            }

        // MarshalJSON is the custom marshaler for VirtualNetworkPropertiesFormat.
        func (vnpf VirtualNetworkPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(vnpf.AddressSpace != nil) {
                objectMap["addressSpace"] = vnpf.AddressSpace
                }
                if(vnpf.DhcpOptions != nil) {
                objectMap["dhcpOptions"] = vnpf.DhcpOptions
                }
                if(vnpf.FlowTimeoutInMinutes != nil) {
                objectMap["flowTimeoutInMinutes"] = vnpf.FlowTimeoutInMinutes
                }
                if(vnpf.Subnets != nil) {
                objectMap["subnets"] = vnpf.Subnets
                }
                if(vnpf.VirtualNetworkPeerings != nil) {
                objectMap["virtualNetworkPeerings"] = vnpf.VirtualNetworkPeerings
                }
                if(vnpf.EnableDdosProtection != nil) {
                objectMap["enableDdosProtection"] = vnpf.EnableDdosProtection
                }
                if(vnpf.EnableVMProtection != nil) {
                objectMap["enableVmProtection"] = vnpf.EnableVMProtection
                }
                if(vnpf.DdosProtectionPlan != nil) {
                objectMap["ddosProtectionPlan"] = vnpf.DdosProtectionPlan
                }
                if(vnpf.BgpCommunities != nil) {
                objectMap["bgpCommunities"] = vnpf.BgpCommunities
                }
                if(vnpf.IPAllocations != nil) {
                objectMap["ipAllocations"] = vnpf.IPAllocations
                }
                return json.Marshal(objectMap)
        }

            // VirtualNetworkTap virtual Network Tap resource.
            type VirtualNetworkTap struct {
            // VirtualNetworkTapPropertiesFormat - Virtual Network Tap Properties.
            *VirtualNetworkTapPropertiesFormat `json:"properties,omitempty"`
            // Etag - READ-ONLY; A unique read-only string that changes whenever the resource is updated.
            Etag *string `json:"etag,omitempty"`
            // ID - Resource ID.
            ID *string `json:"id,omitempty"`
            // Name - READ-ONLY; Resource name.
            Name *string `json:"name,omitempty"`
            // Type - READ-ONLY; Resource type.
            Type *string `json:"type,omitempty"`
            // Location - Resource location.
            Location *string `json:"location,omitempty"`
            // Tags - Resource tags.
            Tags map[string]*string `json:"tags"`
            }

        // MarshalJSON is the custom marshaler for VirtualNetworkTap.
        func (vnt VirtualNetworkTap)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(vnt.VirtualNetworkTapPropertiesFormat != nil) {
                objectMap["properties"] = vnt.VirtualNetworkTapPropertiesFormat
                }
                if(vnt.ID != nil) {
                objectMap["id"] = vnt.ID
                }
                if(vnt.Location != nil) {
                objectMap["location"] = vnt.Location
                }
                if(vnt.Tags != nil) {
                objectMap["tags"] = vnt.Tags
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for VirtualNetworkTap struct.
        func (vnt *VirtualNetworkTap) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var virtualNetworkTapPropertiesFormat VirtualNetworkTapPropertiesFormat
        err = json.Unmarshal(*v, &virtualNetworkTapPropertiesFormat)
    if err != nil {
    return err
    }
        vnt.VirtualNetworkTapPropertiesFormat = &virtualNetworkTapPropertiesFormat
    }
                case "etag":
    if v != nil {
        var etag string
        err = json.Unmarshal(*v, &etag)
    if err != nil {
    return err
    }
        vnt.Etag = &etag
    }
                case "id":
    if v != nil {
        var ID string
        err = json.Unmarshal(*v, &ID)
    if err != nil {
    return err
    }
        vnt.ID = &ID
    }
                case "name":
    if v != nil {
        var name string
        err = json.Unmarshal(*v, &name)
    if err != nil {
    return err
    }
        vnt.Name = &name
    }
                case "type":
    if v != nil {
        var typeVar string
        err = json.Unmarshal(*v, &typeVar)
    if err != nil {
    return err
    }
        vnt.Type = &typeVar
    }
                case "location":
    if v != nil {
        var location string
        err = json.Unmarshal(*v, &location)
    if err != nil {
    return err
    }
        vnt.Location = &location
    }
                case "tags":
    if v != nil {
        var tags map[string]*string
        err = json.Unmarshal(*v, &tags)
    if err != nil {
    return err
    }
        vnt.Tags = tags
    }
            }
        }

        return nil
        }

            // VirtualNetworkTapPropertiesFormat virtual Network Tap properties.
            type VirtualNetworkTapPropertiesFormat struct {
            // NetworkInterfaceTapConfigurations - READ-ONLY; Specifies the list of resource IDs for the network interface IP configuration that needs to be tapped.
            NetworkInterfaceTapConfigurations *[]InterfaceTapConfiguration `json:"networkInterfaceTapConfigurations,omitempty"`
            // ResourceGUID - READ-ONLY; The resource GUID property of the virtual network tap resource.
            ResourceGUID *string `json:"resourceGuid,omitempty"`
            // ProvisioningState - READ-ONLY; The provisioning state of the virtual network tap resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
            ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
            // DestinationNetworkInterfaceIPConfiguration - The reference to the private IP Address of the collector nic that will receive the tap.
            DestinationNetworkInterfaceIPConfiguration *InterfaceIPConfiguration `json:"destinationNetworkInterfaceIPConfiguration,omitempty"`
            // DestinationLoadBalancerFrontEndIPConfiguration - The reference to the private IP address on the internal Load Balancer that will receive the tap.
            DestinationLoadBalancerFrontEndIPConfiguration *FrontendIPConfiguration `json:"destinationLoadBalancerFrontEndIPConfiguration,omitempty"`
            // DestinationPort - The VXLAN destination port that will receive the tapped traffic.
            DestinationPort *int32 `json:"destinationPort,omitempty"`
            }

        // MarshalJSON is the custom marshaler for VirtualNetworkTapPropertiesFormat.
        func (vntpf VirtualNetworkTapPropertiesFormat)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(vntpf.DestinationNetworkInterfaceIPConfiguration != nil) {
                objectMap["destinationNetworkInterfaceIPConfiguration"] = vntpf.DestinationNetworkInterfaceIPConfiguration
                }
                if(vntpf.DestinationLoadBalancerFrontEndIPConfiguration != nil) {
                objectMap["destinationLoadBalancerFrontEndIPConfiguration"] = vntpf.DestinationLoadBalancerFrontEndIPConfiguration
                }
                if(vntpf.DestinationPort != nil) {
                objectMap["destinationPort"] = vntpf.DestinationPort
                }
                return json.Marshal(objectMap)
        }

            // VirtualNetworkUsage usage details for subnet.
            type VirtualNetworkUsage struct {
            // CurrentValue - READ-ONLY; Indicates number of IPs used from the Subnet.
            CurrentValue *float64 `json:"currentValue,omitempty"`
            // ID - READ-ONLY; Subnet identifier.
            ID *string `json:"id,omitempty"`
            // Limit - READ-ONLY; Indicates the size of the subnet.
            Limit *float64 `json:"limit,omitempty"`
            // Name - READ-ONLY; The name containing common and localized value for usage.
            Name *VirtualNetworkUsageName `json:"name,omitempty"`
            // Unit - READ-ONLY; Usage units. Returns 'Count'.
            Unit *string `json:"unit,omitempty"`
            }

        // MarshalJSON is the custom marshaler for VirtualNetworkUsage.
        func (vnu VirtualNetworkUsage)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                return json.Marshal(objectMap)
        }

            // VirtualNetworkUsageName usage strings container.
            type VirtualNetworkUsageName struct {
            // LocalizedValue - READ-ONLY; Localized subnet size and usage string.
            LocalizedValue *string `json:"localizedValue,omitempty"`
            // Value - READ-ONLY; Subnet size and usage string.
            Value *string `json:"value,omitempty"`
            }

        // MarshalJSON is the custom marshaler for VirtualNetworkUsageName.
        func (vnun VirtualNetworkUsageName)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                return json.Marshal(objectMap)
        }

            // VirtualNetworksCreateOrUpdateFuture an abstraction for monitoring and retrieving the results of a
            // long-running operation.
            type VirtualNetworksCreateOrUpdateFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(VirtualNetworksClient) (VirtualNetwork, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *VirtualNetworksCreateOrUpdateFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for VirtualNetworksCreateOrUpdateFuture.Result.
        func (future *VirtualNetworksCreateOrUpdateFuture) result(client VirtualNetworksClient) (vn VirtualNetwork, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.VirtualNetworksCreateOrUpdateFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    vn.Response.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.VirtualNetworksCreateOrUpdateFuture")
                return
            }
            sender := autorest.DecorateSender(client, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if vn.Response.Response, err = future.GetResult(sender); err == nil && vn.Response.Response.StatusCode != http.StatusNoContent {
            vn, err = client.CreateOrUpdateResponder(vn.Response.Response)
            if err != nil {
            err = autorest.NewErrorWithError(err, "network.VirtualNetworksCreateOrUpdateFuture", "Result", vn.Response.Response, "Failure responding to request")
            }
            }
            return
        }

            // VirtualNetworksDeleteFuture an abstraction for monitoring and retrieving the results of a long-running
            // operation.
            type VirtualNetworksDeleteFuture struct {
            azure.FutureAPI
            // Result returns the result of the asynchronous operation.
            // If the operation has not completed it will return an error.
            Result func(VirtualNetworksClient) (autorest.Response, error)
            }
        // UnmarshalJSON is the custom unmarshaller for CreateFuture.
        func (future *VirtualNetworksDeleteFuture) UnmarshalJSON(body []byte) error {
            var azFuture azure.Future
            if err := json.Unmarshal(body, &azFuture); err != nil {
                return err
            }
            future.FutureAPI = &azFuture
            future.Result = future.result
            return nil
        }
        // result is the default implementation for VirtualNetworksDeleteFuture.Result.
        func (future *VirtualNetworksDeleteFuture) result(client VirtualNetworksClient) (ar autorest.Response, err error) {
            var done bool
            done, err = future.DoneWithContext(context.Background(), client)
            if err != nil {
                err = autorest.NewErrorWithError(err, "network.VirtualNetworksDeleteFuture", "Result", future.Response(), "Polling failure")
                return
            }
            if !done {
                    ar.Response = future.Response()
                err = azure.NewAsyncOpIncompleteError("network.VirtualNetworksDeleteFuture")
                return
            }
            ar.Response = future.Response()
        return
        }

